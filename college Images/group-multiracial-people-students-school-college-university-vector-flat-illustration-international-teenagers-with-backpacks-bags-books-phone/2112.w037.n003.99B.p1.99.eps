%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 12/24/2021
%%BoundingBox: 0 0 1360 400
%%HiResBoundingBox: 0 0 1359.3992 400
%%CropBox: 0 0 1359.3992 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 40 8%%BeginData: 12355 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8A8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8
%CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8
%FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8
%CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8
%FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAA8CAA8
%FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8
%CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8
%FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8
%CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8
%FFA8CAA8FFFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8
%CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8
%FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8
%CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8
%FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFFFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFFFFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFA8FFCAFFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFCAFFCAFFA8FFCAFFA8A8
%FFA8CAA8FFA8CA7EA8A8CAA8FFA8CAA8FFA8CAA8FFCA7D20A1A8CAA8FFA8
%CAA8FFA8A8A8FFA8CAA8FFA8CAA8FFA8CAA8A8A8FFA8FFA8CAA8FFA8CAA8
%FFA8FFA8FFA8CAA8FFA8CAA8FFCAFFA8FFA8CAA8FFA8CAA8FFA87D52CAA8
%CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8A852A8A8
%FFA8CAA8FFA8CAFFCAFFA8FFCAFF7E2F27A8CAFFCAFFA8FFCAFFA8FFCAFF
%A15227FFCAFFCAFFA8FFA8A152A2CFFFA8FFCAFFA8FFCAFFFFA8F827A8FF
%CAFFA8FFCAFFA8FFCA5252527DFFA8FFCAFFA8FFA87DA8FFCAFFA8FFCAFF
%A8FFFF52F827A8FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FF7DF84BFFCAFFA8FFCAFFA8A8FFA8CAA8FFCA7E274B7DFFA8FFA8
%CAA8FFA8FFA8FFA8CAA1A1A8FFA8FFA8CAA8FF764B76FFA8CAA8FFA8CAA8
%FFA8FF764BF8277DFFA8CAA8FFA8CAA8FF76F8F876CAFFA8FFA8CACA7DF8
%27A8FFA8CAA8FFA8CAA8FF76759ACAA8CAA8CAA1C9A8FFA8CAA8FFA8CAA8
%FFCAFFA8FFA8CAA8FFA8CAA87D4B7DA8FFA8CAA8FFA8CAFFA8FFCAFFA8FF
%7E7776A8CFFFA8FFCAFF527DCAFFA8FFA7C2A8FFCAFFA8FFCAFFCFA876A1
%A8FFCAFFA8FFCAFFA8FFCACAA0A0F8F8A8FFCAFFA8FFCAFFCAA1F87576FF
%CAFFA8FFCAFF7C6F4BA8CAFFCAFFA8FFCAFFA8FFC2A1CAFFCAFFA0A0A0CF
%A8FFCAFFA8FFCAFF7DA8CAFFA8FFCAFFA8FFCAFF7D76A8FFA8FFCAFFA8FF
%CAA8CAA8FFA8FFA87D53537DCFA8CAA8FFA8F8F8CACACA7EC97D7E7EA9A8
%CAA8FFA8A87DA0A1FFA8FFA8CAA8FFA8CAA8FFA8A15227F8A8A8FFA8CAA8
%FFA8A8F85276A0A8FFA8CAA8FFA8516F4B27FFA8FFA8CAA8FFA85A2F7D53
%5984FFA7C3A1CAA8FFA8FFA8CAA8FFA820F87DCACAA8FFA8CAA8FFA8A14B
%A1A8CAA8FFA8CAA8FFFFA8FFCAFFA8A1777DA0C9A7FFA8FFCAFF76F851CA
%A1A8A0857F8584FFA8FFCA7E282F52CAC9CFA8FFA8FFCAFFCAFF7E7D7754
%5353A2FFCAFFA8FFCAFF52A0C27E59A8CFFFA8FFFFA828A82727A8FFCAFF
%A8FFA885535360612F6084C9C3CAFFFF7EFFCAFFA8FFCAFF6F264BFFA8FF
%CAFFA8FFCAA1A0C8A0A1C9FFCAFFA8FFCAA8CAA8FFA87D767D7E7E7DA1A2
%FFA8FFA8CA284C77C3A1C97D7F5A85A8FFA859062F2853A7C9A6CAA8FFA8
%CAA8CA7E5352A12F532F537EFFA8CAA8FFA8A0C2C85A844BA1A8CAA8A97E
%A27E7D5385A8FFA8CAA8855AC37C605A5A3584C3C3A8FF7E5353A8A8CAA8
%FFA8A099A8A8CAA8FFA8CAA8C9A0C8C2A176C8A1FFA8CAA8FFFFCAFFA8A8
%77A17D85535453A8CAFFA8FFCAFF77A1C3A1A0A15B857ECAFF7E2853282F
%52C9C9C9A7FFC9A07D7E53532F54A0592F542F7EA8FFCAFFA8C9C2C8A061
%84764BCFCAA9845A2EA0C2857F85A8FFCAA95AA8C3A15A615A5A5AC9C9FF
%A87E2F53A1FFCAFFA8CAA0A0A7FFCAFFA8FFCAFF7DA7C2C8A0A1C2C8A8FF
%CAFFA8A8FFA8FF7D7777A17777535377FFA8CAA8FFA8A1767D767776855A
%7EA7FF2E28525228A8A7C9A7CAA8C9A07D29532F532F7DA05328532FA8A8
%FFA8CAA0C8A0C85A847675A0FF7E85532876C97EA95AA8A8FF7DC3C2A135
%605A605A84A8FFA8A8295328A0A1CBA8A7A07776C276CAA8CAA8A95A605A
%7C759A76C2C1C9A8FFA8CAFFCAFFCACA777D77A177A19AA1A8FFA8FFCAFF
%A8A1777E77A177857ECACB5328532E7DCAFFCFCF76A1CAFF7D5453542828
%53A1535453537EFFCAFFC9C8C2A1A08560C9A0C9A8855BA175A17F857F85
%A8FFA8A1C3C97D615A6160FFCAFFCAFFA8A854A176A17D7DA0A177A1A07D
%7DFFA8FFA861607D4B9A759A9AA0A1FFCAFFA8A8FFA8CAA8A87677767D9A
%BC4BA8A8CAA8FFA8FFA1A87E7D76A177A1A7FF7D28282F52CACACAA1A1A1
%FFA8A87D7E7E28F8A177532F5353A8A8FFA8CA9FC8A0A05A607CC2A0FF84
%857699A1855A8584CAA87E76C9A05A5A605A7EA8FFA8FFA8CFA8FFA87D76
%7D76A1767DA0A0537DA8FFA8FF8461597659A0759A6FA1A8FFA8CAFFA8FF
%CAFFCAC9A1A1777E7D7DA1FFCAFFA8FFCAFFA85A537D77A1C2CAA8FF5A53
%285376764C7EA8FFA8FFCAFFA8FF7727C2C9535377CBCAFFA8FFCAC8C2C8
%C2A159FF7D53A8FFA8C9A1A27EA87DCBCAFF7D53775377A2777D76A8CFFF
%A8FFCAFFA8FFA17D777D777D77A17D7D77CACAFFA8CA7D6160A8C8C89A9B
%A8FFA8FFCAA8CAA8FFA8CAA0C9C9A7366153A2A8FFA8CAA8FFA87E29532F
%547DA8A8CAA8855A7F5A7D76A1A8FFA8CAA8FFA8CAA8A127A0C2A1A0C8A8
%FFA8CAA8FFA7C8C1C26F75A8AF53CFA8CAA0C876A176777DFFA8A8282928
%7D7777767D77CAA8CAA8FFA8A82E53282F287D7777527D7677A7FFA8FFA1
%762F53527C767776CAA8CAA8FFFFA8FFCAFFCAC9C9C9A7615A7EC9FFCAFF
%A8FFCAA9537E5354537EA8FFCAAF85A98585C8C8C2CFCBFFA8FFCAFFA8FF
%7DA176C8C8C8C2CFCBFFA8FFCAFF7DA17C7DA1FFFFFFA8FFC9C2A0C977A1
%77A2CAFFCAA8537E77A177A17DA1A8FFA8FFCAFFA8592853285377A19AA1
%777DA0CFCAFFCAC94C53282F282F53A8CAFFA8FFCAA8CAA8FFA8CA83A8A7
%A75A615ACAA8FFA8CAA8FF7D53537E535329A8CACF84857E857DC8A0C8A7
%FFA8CAA8FFA8FFA87D777DA0C8C2C8A7FFA8CAA8FFA87E2F547EFFA9FFA8
%CAA8C9A0A0A07D7D7D77FFA8CAA8FFA87D767D777D76A1A8CAA8FFA8FF7D
%2F282E28526FC2767DA0C9A8FFA8FF76522853282F287ECAFFA8CAA8FFFF
%CAFFA8FFCA8536615A605A85A8FFA8FFCAFFA85A5353535A53537EFFCAFF
%A8C9A1C9A0A1C2C9A8FFCAFFA8FFCAA877A17DA1A0A1A8FFA8FFCAFFA8FF
%5954537E7E7EA8FFCAFFC2C8A0C276A1A1A8A8FFCAFFCACA777D77A2777D
%77CBCAFFA8FFFFA8FD0427002776845AA8CAFFA8FFCA76282F5253282F7E
%FFA8FFCAFFA8A8FFA8CAA8FF5A6036605A605AA9A8CAA8FFA87E29532F53
%2F53297EA8FFA8CAA0C8C2C2A0C8A0CAA8FFA8CAA8FFA17776A1777776A8
%A8CAA8FFA8CAA87E5353535A2FA8A8FFA8C8A0A0C2C29FC9A8CAA8FFA8FF
%A17D76777DA17777A1FFA8CAA8FFA884355A2F5935605A6084CAA8CAA8CF
%76282853282F287ECACAA8FFA8CAFFCAFFA8FFCA855A8560605A61A8FFA8
%FFCAFF7D545353535A53537EFFCAFFA8C9C2C8C2C9C2C8C9FFCAFFA8FFCA
%A277A17D7D77A1A8FFA8FFCAFFA8FF5A5A535A535AA8FFCACFC2C9A0C8C2
%C8C8FFA8FFCAFFCACA77A177A2A8A177CACFFFA8FFCAA960856060608560
%615A5A53537DFFFF7E28535353282F7DFFA8FFCAFFA8A8FFA8CAA8FF5A60
%5A615A5A5AA9A8CAA8FFA87E2953595A2F532F7EA8FFA8CAA0C8C2C8A0C8
%C2C9A8FFA8CAA8FF777776A1777776A8A8CAA8FFA8CAA8A15277527776CA
%A8FFA8C8A0A0C2C8A0C9A8CBA8FFA8FFA17D777777A1767DA8FFA8CAA8FF
%5A605A5A5A605A605A5A2E532EA8A8FF53282853282F287ECACAA8FFA8CA
%FFA8FFCAFFA8855A615A605A6184FFCAFFA8FF7E532F7E535353547EFFA8
%FFCAC8C2C8C2C2C2C8CAFFA8FFCAFFA8A1777D76A1777D7DFFCAFFA8FFCA
%FFA19A769A6FA0CAFFA8CAC2C8A0C8C2C8C2FFCAFFA8FFCAA876A177A177
%7DA1FFA8FFCAFFA8855A615A6060615A84CACB7EFFCAFFA853282F2E5328
%2F7DFFCAFFA8FFCAA8CAA8FFA8CA5A605A605A6036A8A8FFA8CAA87E2953
%29532F53297EA8CAA8CAA0C8A0C2A0C8A0CAA8CAA8FFA8A8767D767D767D
%767DA8FFA8CAA8FFA8A16F9A757576FFA8FFA7C8A0A0A0C8A0C8A8FFA8CA
%A8FFA177767D777D76A8A8CAA8FFA8CA5A605A5A35605A605AFFA87EA8FF
%A8A8282F2853282F287DA8FFA8CAA8FFFFA8FFCAFFA88560615A615A6184
%FFCAFFA8FF7E53535A535453547DFFA8FFC9C8C2C9A0C8C2C9CAFFA8FFCA
%FFA2A1777D76A1777D77FFCAFFA8FFA8FFA19A769A6FA8FFFFA8CFC2C8A0
%C9C2C8C2FFCAFFA8FFFFA877A177A177A2CAFFA8FFCAFFA8855A615A6060
%615A85CACB7EFFCAFF7D2F2E532F53282F59FFCAFFA8FFCAA8CAA8FFA8A8
%5A605A605A603684A8FFA8CAA87E2F532F535353297EA8FFA8C9C2C8C2A0
%A0C8A0FFA8CAA8FFA8A2767D777D767D777DA8FFA8CAA8A17776759A6FA0
%A8FFA8FFA1C2A0A0A0C8A0C2A8FFA8CAA8FFA177767D7D7DA8FFA8CAA8FF
%A8CA5A605A5A35615A607EFFA87EA8FFA853282F2859282F287DA8FFA8CA
%A8FFFFCAFFA8FFA8605A615A5A5A84A8FFA8FFCAFF7EFD045354535353FF
%CAFFC2C8C2C8A0C8C2CAA8FFCAFFA8FF7DA176A17DA176A176A8A8FFCAFF
%777D769A75A1A8FFA8FFCACAA0C2A0A0A0C8A0CAA8FFCAFFA8A8777D76A2
%A2FFA8FFCAFFA8FFCA855A615A605A615A85CACB7EFFCACB2E2F28537D2F
%282F53FFA8FFCAFFA8A8FFA8CAA8FF7E7D7D7D76A1A8FFA8CAA8FFCA7E2F
%5453532F5A2F7EA8FFA7C8A0C8A0A0C1C8A7CBA8FFA8CAA8A877A176A877
%A1767DA2FFA8FFA87D76A07575A1FFA8CAA8FFA8CAC2C9C2C2C2C9A8CAA8
%FFA8FF7DFD0477CBA8CAA8FFA8CAA8FF7E6036615A6036617ECFA87EA8FF
%A152282853A8282F0653A8CAA8FFA8CAFFCAFFA8FFCBCA9AC29AA0A0FFCB
%FFA8FFCAFF7E7E7D7D7D7E537D7DFFCBCAC2C9A0C8A0C9A0FFCAFFCAFFA8
%FFA8A1A17DA8CA7DA152A8CAFFCAFF77A17D9A75CAFFFFA8FFCAFFFD04A8
%A2CAA8FFA8FFCAFFA8CAA1A1A1C9CAFFA8FFCAFFA8FFCAA95A847E857DA8
%7DA9CAFF7EFFA8A9777628A8A22F285353FFA8FFCAFFA8A8FFA8CAA8FFA7
%C8C2C89FC2A7CAA8CAA8FFA87D529B76A17D5376A1A8FFA2775354535352
%537EA8A8FFCAFF7D53282E2EFFA853062953CAA8FFA87D77A8769A77A8A8
%FFA8FFA87D062E2E53287ECACAA8FFA8CBA8C8C2C89FC9A8CAA8FFA8CAA8
%FFA8C99FC2C9C9C2C8A8FFA8857E845A8477A8A8CB7E7776A8A8CAA8FFA8
%CAFFA8FFCAFFA8C9C8C9C2C8C1C8A0C9CAFFA8CB7777527777A1777D7DFF
%CAA82F542F542F53295353A8CAA8532F28532853CAA8282F287DA8FFA8CB
%77A2A87D77A177A2A8CF775352522853532F53FFCAFFA8FFCAFFC2C8A07C
%A0CACAFFA8FFCAFFA7C9C2C2C2C8C9C9C2CFCAA97E857F855A85A9CB7E85
%7E85A8FFCAFFA8FFCAA8CAA8FFA8CAA0C8C1C2A0C8A0C2A0CFA8A84C764C
%76527D767776A2A8FF7E5353532FFD05537DFF77535277527D777E282F28
%77A1FFA8CAFD04A87677767752A1A1A075A09FA0767C76A0A8FFA8CAA8FF
%A8C89FC8C2C29FC9A8CAA8CAA0C29FC8A0C9A0C9C2C9A8FFA87EA8A98485
%7E855A7F5A855AA9A8FFA8CAA8FFFFA8FFCAFFA8CFCACAC9CFCAFFA8FFCA
%FFA8A8A2A8A8CAA8CAA8CBA8FFA8FFA8A9A8A9A8A9A8FFA8FFA8FFA8CAA8
%CBA8A8537D77A1A8FFCAFFA8FFCFFFA8CAA8CAA8CAA8CFA8CFA8CAA7CAC9
%C9A7FFCAFFA8FFCAFFC9CAFD04C9CAFFA8FFCAFD04C9CAC9CAC9C9C9FFCA
%FFA8FFCAFFA8FF84A984A9A8A9A8FFCAFFA8FFCAA8CAA8FFA8CAA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8CAA8FFA8FFA8FFA8FFA8FF
%A8CAA8FFA8FFA8FFA8A8A8CAA8FFA8FFA8CAA8FFA8CFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8CAA8FFA8FFA8FFA8FFA8FFA8CAA8FFA8CAA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFFFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFCAFFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFCAFFA8FFA8
%FFA8FFA8FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2021-12-24T15:21:04+03:00"
   xmp:ModifyDate="2021-12-24T15:21:04+03:00"
   xmp:MetadataDate="2021-12-24T15:21:04+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:298ea0b0-6110-fd4b-a4fd-8c7906a7c6aa"
   xmpMM:InstanceID="xmp.iid:298ea0b0-6110-fd4b-a4fd-8c7906a7c6aa"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2112.w037.n003.99B.p1.99</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="76"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgATAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9CZFudirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVWu6RozuwVFB&#xA;ZmY0AA3JJOKoPTNb0jVPV/R15FdeiQJRGwYrXpUe9NsnPHKPMUxEgeSOyDJ2KqF/fW9hYXN9csVt&#xA;rSJ552ALEJGpZjQbnYYqlPlHzv5Y83WD3ugXy3ccRCXEdGSWJyPsyxuFdTseooaGmKp7iqGvtSsL&#xA;BFe8nSBXNELmlT7YaSIk8leORJEWSNg8bgMjqagg7ggjtgQuxV2KoWLVdLmvJLGK8gkvYd5bVJEa&#xA;VP8AWQHkOvcYqisVdiq15YkZFd1VpDxjBIBY0JoPE0GKuSRJF5IwdTUclNRsaHp74quxV2KuxV2K&#xA;oDWde0TQ7P67rF9Bp9pyCCa5kWNSxqQoLEVY06DfFVvl/wAw6P5h0iDWNGuReabclxBcKrKG9KRo&#xA;noHCts6EdMUJjil2KuxV2KuxV2KpLqvnPytpOtWGialqUNrqup/7wWshIaUlggA2p8TGi1O56Yot&#xA;OsUuxV2KpD53vbW38tX8U0wjkuYJIoU6szMtKBRueu+W4Npg+aDEkF51+TumWul+Yr+4ijkjS+gr&#xA;O7EshlDr8RZiTvXYdANgNsOoMYk3IGUpbDr1bBC4jhjQA3ex5SwebXv5wfUPzaXyPqGni0sZbcSW&#xA;2pyyUM0rKGARKcePVftVqPowTkIi2WPGZS4eTOtQ1K1igePmTJIGRVWhO6nx2yvLkEYSl/N/WB+l&#xA;sx4jxxBHP+39BY55QbSrK5uZntxBqWpmL65OFiX1HiTipcxBAWqx+LiK+AzNjocsYXI3+pxsusxS&#xA;mBAUP0syzHZvMfzQ1byxqMkOmLrKwajas3rQxVHJT1jNwCixPVf569RsSCJTxZBDiAbdNlhx8Mjs&#xA;WeeWNLudM8sadb3RUSQQosnxISCe1EZh3ptkIg1uwy5ImR4eSZYWLTMqKWYhVUVZjsAB3OKvmX80&#xA;PLVnp+s3nmryjcXB81vc/WLK6ikRQY7lnkkccyOXHn6YJ24fCAeoGLFlnMgC4j7+5ty+HHGD/H+N&#xA;3t/5U+YNd8weQNJ1TXohDrEySJeKFCVaKV4w5UbKXVA9Btvttk5RMTRaImwyzIsni3/ORj2us2ul&#xA;eVLGxnvvMc1wlzb3NtzIsISeDzS+k1V9QVVea8ftGo45CeSMBciAogZbAEpn+QHl+38u6RqukQzI&#xA;6LdCRErWRiI1SSU7LVWIWhAp+OMOL+IN2aMBXCberZNpfPX506nd3fmy71LRNfv9Mk8r28cd3JbL&#xA;MIUk+OZ0PA0k9RXRXNDxpQg75TkySjIADYuThwQnCUiaMfx9r3Hyt5hsvMfl3TtdslZLbUYEnjR/&#xA;tLyG6tTup2y5xQmmKXmn5lt5F8zz2egarbvf3FqxvrcL8MJKho2R5PtUIap4A9Mulo8phY2LTi1u&#xA;AT9W8bq+iceRdf8ALttpq6JEwsriwHKa3kVYkBnZpSYyCV48mPevjgjo8kYixacuuwykSDQTO7ut&#xA;dudWEemTRLaKE9TmKkhWIem21Q3WvUDbNccspSIi7mOnhjxiWQJ+vTfcjr88zHVlvFXm2t/nhouh&#xA;/mBH5P1TTbqD15obaDU6xmFpbj0ypoSKRqJhyatQf2e+AEXSkECy9Jwq7FXlPm7TdI1j8w9J1a6h&#xA;/SWl2AVX/dy+nbz2splWTmlCaMwO1Q1KGg64088RMbj597mRwE4yK3enWN3Z3dsk1pIJIGA4EVG3&#xA;yO4y8SB5dHFlAx5ojJMXYq8l8xXgu/Md4dSaVI4XaKJY1DFVRqLszKKEb9ctjs5cR6dkquNb1tJJ&#xA;YrBF+ounD0gvxBCBy7+PSmZGSGlnuYiEr50OfvcXFj1MTsTMd1n7nrnlvUW1DRLS6c1lZOMpPUuh&#xA;4sT8yK5hlM40aSD8yPIOg+ZbCO+u7BLrUtLrLZyGtaGnNCFI5gqPstXDE0saJFsTg8xTQWkMUUC/&#xA;uyPVkJJ50FB8vhFMpnpOLiJP1CnZeMOERA5G0wsL5LtGcMOfJj6Y6qtfhH3Z0WknxYwCdwN3l9Xh&#xA;MMh22J2V/wA3fNWpaT5WsoLNzDcap8Es67MsaoC4U9ixYb+Fc1WhhGZ4ulOfqSY7PIfLnlj9Na9Z&#xA;6fBcpJDO6meSpRkQDlJVSC1QK7gEZmZtTwY5EjhI5Xy8uTRDDxSAHqHlz830Tem0srZ7q4+pWsMN&#xA;Hecm4HEKQf2iy79M42GA8QNY+ffL9b0By2KByfIfqQuua5rkcCahpCwS6VHBLcTzSBqsqqCvAjp+&#xA;02670ptWubYSnKYAGxIcfwoRgTI+oXs8r138yfM+p6dLaTyxQWzKfWMKlGYAdGJJ+HxpnRw0kIG3&#xA;SyyyIpAkQan5at763mR309TFIeYPOEsSjKa0ajcl2zDx5fB1Jj/Bl3if6Q2I+4uTKPiYQR9UNj7u&#xA;ib/lf5ju7DX4bOrfUtQf0pIT2c7I4HY12PtmXrMQlC+ocfDOjT3BmCqWPRQSfkM0cpACy5wFmmGz&#xA;taC/mueCRXF/IDIyj4naOMKtT34xoBnKZsk8xMzyH2B6DFCOICPf9rD9Wi1hWsNS0chdQsbofFxL&#xA;t6UqkSKAP5uIG+df2vPw5DegY/7k7fe8p7PxGSMr/nf7ob/c9M1HVzFZWzVMT3Q+JwOXAADlQd9z&#xA;lnZ0BmHH0pt1sjiPC8r0i5vNb1HWtJ1+yi+pXCPHKhEgE1GApyLUIoeRPyOR7QyTkeHTy9ZNGNRo&#xA;Ac+Y/S3aXCIw4s0fQBYO+98uRZz5Uit9FWz0qwKLp6qIktYuXGIDZaVHXxpmz1OCJgSBXC6vT5SJ&#xA;Vd2m3ma/KommQPxurtHcnwijKh+niXAH0+GamOaOL1yFgfe7I6SeoBxwPCT18mFalBbRXkFukYaW&#xA;KNpZJyK0Z+KKFY1IqENVHzOX9nSnmyyyk1HlX47nG7Zji02nhpwAZ87/AE/Fbp2h3t5qUtzZxeow&#xA;iRJPiVacWYr9oj+Y5tsuSMR6jVvO4MU8gqIvhNvRLKyayiklYepLxJ4p4DfiK9znM6fBwc+Ze41m&#xA;r8TYcg8btNe1lPO5v7v6zbc7gG9jUvGUiB+FHShJXYJQjate2bnWzjiwjhAlvX9jr9FhOXIQbG1+&#xA;73/c9YXzloEkaGG4Es0lOFuAedT2Ipt06nNXllwRMjyDkwwylLhYNcXOm6r5tlvpbOGa3jKTuJKs&#xA;pe2UhJCOhp8NPlvXYDAygxAykeo16ff5u0gf3ZxdO/8AY9C0DXbXWbIXMA4Op4zQk1KN/EHsc2RF&#xA;OonHhKH8x65HYQ/V1UtcTLVeyhTtUn+GWw0ZzRIvhDhajXx05G3FJ52PN+kxwzaaoZ5Y1ZJ5I+DK&#xA;JHrX9qvU77Zz+r0ZhqLsSAI+Qej0Oc5sIJHCSOTIPKHmLT0itIjcojkLC8TMFYknitAev0ZGM5Q1&#xA;JkLMZH7/ANTPNh4sVHmGfZvHSOxVjfmXy7pd/Osstu/rsvxTwkK1B05Amjfccw9TqZY5AAj4udpY&#xA;XE2w/UtBt9MmT05HmWZCODLRtz07eGZmhiNXEiW3DXJxO0O0ZaOUeEA8QPNlX5cWTWWgvbgUt1nf&#xA;0F5Fiq0ApvXwwmIiTEdCnJk4xGVVxRB+bKsDW8j8/wCrwxazc2Ok2cJjtkDX7BdzI29aKV2QEVPj&#xA;1zbaTCDj9X8TjZcshMEH6UB5Ku7a91SGGWi3LuEjHLitCDVqftbinH9e9MXXaTJGB8KVbb/gOTh1&#xA;cZGpi3onnvy3puseXBY3SMzRMhtZE+2jgcajY/s1qMr7PhwyERyAadXOwZdSXnGi+SNa8satHqWl&#xA;3ZOoKGW3jmjMIowoxL1f9mv7OZnaUoRwmUjsK5NWgkTlEeEG+9nPl+DzNrck/wDiPVRd2QYFNOhK&#xA;SQvxJqJC0SH4GHbfxOaLBqceS4jiv+lt8qLtc2OWMiQqPu3+9mCWtslsLVYkFsF9MQ8Rw4Upx49K&#xA;UzJG3JxZG+bD/O/kjyhL5X1YPpsEJnt5IRIiheDTD0wygbAgtUbZf+YmdiSURwxJec+R/KUf+Abb&#xA;QZbeO01iz2klVzLE4ErH1FPJqeorEsBT4u2a0686XKJm5QN7OyGkGXDwUBMM68i+Q9MsL367cSNd&#xA;XlvRoajjGpNRXjvUjtU5k4u2paniiBwhw83Z4wgG7L0B1DoyHowIP04yjYIPVriaNsJ1e406xnnt&#xA;buePnCnqlCQGK0JBAPfbtnOy7Oz45DhBIJoEfp/a7uGrxTG5A8kN5F0u/wBcs9Vu7m2n0/iinS7m&#xA;RGFuXSkj8ogVkJHJBvT9oLuGzockvzEBHIPpFX18/m6SOnjpZk4j9Ruvu+TI9G02f/DFnFriCS+i&#xA;iMlyQejmrNQinj22y7xRgBOPaMR9gYHH4pAnuSwmS1stOeS7tVEKySv9djcNX1CnMUoG3ag9iTv3&#xA;Oa/s3WnxSeEcZiaNmju7XWYOPFwEnhBHQJr5N1ZLrWeDWpCMpEMxJPFwCSDQcd1zb5NTknGpV8HV&#xA;/koY9xd+aD/ND/FGm61Y69o1v9aiFs9pcRFHkVfjDgsEIIrXY17ZHHhx5YGE9t7WOonhlxR7qYvY&#xA;6pqr2Rl1L1E1OWQvJG6BFRKniADvuKU9vGuXDJ4Xoh9IYy0cNQfEyC5H3sp8lavNaarHFdSoY78C&#xA;NUqOSt1RjTpy6UO+U5ckp8y2R0ePGDwCnpOY6GDfmr5lg0fS4obiwe6hvgy/WI3Cek8ZUrWqtWte&#xA;ntmRgw8fXkwlm8M28m03zYk19HEkRhaSqCTkD9pSKdO/TLsuk9O+7bi1vFICqT+2vJYVl9EArcRP&#xA;CZOoAJo3H3HGntmDPHDLW98Mgfk5/qj0qwzX8sYZ1kvZTUQOqKK/tMpO/wBFcZ5AZcPVozx9IKZf&#xA;mVqMGn+X1uJEDMJlCmnxBQCz0+arTJQzSxyHDzJpw5aSGeJE+QBN9zye384eTormWWfS5hJMQZuM&#xA;casxpSrHmDmTr9HPICMQhG+ZPP4bbON2fmliIOWczw8gOXx7/cnnku203XPMNrcaXFOLKCQSyrOF&#xA;qvpnluVLChNAN810NDLGP3hHF5O8n2gJwPD9r2jLnXOxVjvnO4kitLYRuUYyE1U0Oy+3zzM0eKMy&#xA;eIA7dXWdp5pQjHhJBvow26up55IjPIXatFLb/sk5ssOmx4r4AI26XNqcmX65GVM+8rSB9EgoACvJ&#xA;Wp4hj/DNVq41kL0HZ8+LDHyROtaiNN0i8vyvL6tC8gU7VKioH0nKccOKQHe5cjQt89Wt7O+rLdTM&#xA;XmmkYyuTuTLUMT/wWdCYgRoOvvdFeUJfS806S/T/AEuFT22Zwp/XkNQLxy9zLH9QfQN3Z293F6U6&#xA;8kB5AVI3oRXYjxzRY8soG4mi5s4CQosRW2hVw4HxLWhr0rnMartfUZ4cEz6fcHe4OzsOKXFEb+9E&#xA;+V3aBbJCKVhSNh/sB/EY6XLWpP8ASJXUY7we4BlmdG6Viv5j3XpaEkI63EyqR/kqCx/EDJR5tuEb&#xA;vPba/uLJo5YCAxjK7iuxc5Tl00M1iXf+hzo5DHk9L8j3Iu9ES4cBrkO8c0lACSGqOn+SRgx6XHiP&#xA;pFOJqMspGiWQ5a47xn8y2J823PxAgJEAAQafANjTpm50f92HBzfUnPk/zxrtzqGkaG9y0tkpPqep&#xA;UyEiJxwL1qUXqAfDK9RgiImXVlimbAehaq/CwlPcgL95pnPdoSrDJ2ujjeQMFutOF+t5B6hipco4&#xA;cCv2YY/lmkw6jwTGVX6T95duYcXEPP8AQE78r6BbxXRvpJ5p7mAcUaR6qA4IO1P45utFrJZgbAFO&#xA;t1mMY6A6sqzNcF495sfn5j1A1rSUiv8AqgD+GWjk5mP6QoX9tLbm3ulKoHjhaKjAvURKS3GvIDlX&#xA;fCkG3sVnK81pBK44vJGjsvgWUEjKXCPNiv5paHba35YNjLemxl9ZJYJliEzckBBARmQbqxBNcyNN&#xA;GZl6XF1eaGONyeJP+WOrRTRiHzCRKW5KRaIOIU7tX1O3b3zZnDIijL7HUx7Ro3w8vNl2gaBPp2lR&#xA;2N9etqTQsxjnZBEQh6JQFth88x8HZePHInc25Gf2h1GSIiKAHzZt5d/MXyL6lppNrclbydo4Aoik&#xA;4mU0UKH48actgemYP5DwzIxHM27SOrOSMeI70En/AD7jk/QNhL6oWMXBjMQqGZmXkD8gEOHTYuLI&#xA;D0izyZRHHIdZU8Sck20dTWjuB8qLm4HN15+kPePyIdW8mzgChS+lUnx/dxt/xtms1v1/BytP9L0b&#xA;MRvdirFfPTfDZL2JkP3cf65suz/4vg6Xtg/T8f0MPkpzi6/bNP8AgWzZulHIs88lvy0hh/LMw/4V&#xA;T/HNPrx6/g9D2Uf3Xx/UqedUD+U9WB6C2kP0qKj9WU6b+8j73YZPpLwCC7mgSaNKFJ04SqyhgR1B&#xA;FRsQdwRm/It16tozmPV7FxuVuImA+Tg5HIPSfcmPN9ITyCOF5D+wpP3DOXyz4YmXcHaY48UgO9h8&#xA;8ohhklIqI1Lkf6ornIQjxEDvekkaForQ4H9e1jY1aMDkR0qq/wBcy9GOPOK77cfUnhxH3MpzqHQv&#xA;PfzOuuV3ZWo/3XG0p/2ZCj/iGTg5GAbMNbeFD7sv3UP8cR9Rcg8me/lhc1tb61J+w6Sgf64Kn/iA&#xA;xm42ccmayyxRRtLK6xxoKu7EKoA7knINDyb8zrmzutbtprWeO4T6sqM0TK4BEjncqT/NmJqJyjLY&#xA;kO10WMGB4h16ob8q7Ce482SXYU+hZxOXfsGkHBV+mpP0ZLDKUjuSUawRjGgALeqa4aWVPFwP1nMb&#xA;tU/uvi0dnj958GMWx/fXXw0/ejfx/dJvmgnyj7v0l3EeZ9/6An/l7/d/+w/42zbdj/xfD9Lru0v4&#xA;fj+hOM3bq3jPmNg2v6iR/wAtEo+5yMtHJzYcgjPL+ivqmuwQOv7iNIpbivT0wimn+y2GJNMZyoPW&#xA;sqcRi/nkH0bQ9uT7/QM2PZ/Mum7Y5R+LC22u06bxvXx2ZafrzZuk6Jz5a0+3vNYCXKCeD0n528gV&#xA;ozXarKRv175i6yZjDZzuzYCWWiLTnQPLfl2HXtYki0u0jktbqH6s6QRKYq2sTfuyF+H4iTt3zXZc&#xA;kuGO53H6S9DGIs7PO/z91b1dW07Skb4baFp5AP5pm4ivyWP8cydDHYlp1B3p5hIki2sLMtFdnKN4&#xA;j4QfxGZg5tF7PcPyDkJ8r38e3Fb5mHjVoYwf+I5rtd9Q9zlafk9NzCch2Ksb86ab9YtYblS5khbg&#xA;kakgHn1Ox/ycmNcNPEk1u1ns0aqQBlw15Wweawv/AKxHGkL1JqCWYipqPH3ys+0IPKvtLdH2Yxj6&#xA;pkjyAH63p+kaXaabaehaszRMxcszciSQB1+jLcmY5DxFx8OnGIcIQvm2W3Ty3qKzyLEs1vLCrvXg&#xA;HkQqnI/sjkepw4frHvZz5F4a3l+XmkUU0ck0gXgolgAJcAqKmXbr4ZtvzuMGj9x/U0jR5CLA294/&#xA;Wq6To8h1mK3qwuLe4RJ4m9IFXEnEqayV6rhy6qAHv9/6mOPTzO46e57nr93FbaczSusaOypyYgDc&#xA;17/LOX14kcREQSS7XRV4gthV5rejyQvH9ch2kSKYM6rsWHNd6VqoPTNNj7PzgiXBLlY2+TtJ6nGb&#xA;jxC7rmyDylqWmX89w1pcxzvCArKjAsOR6069uuZ/Z+hyYpGU4mO2zha3UwmBGJtk2bZ1zy/8wL7Q&#xA;k8w8JdVgW6aIc7aUHjGE/ZMi8uLNueO2WeHMxsA/Bvw5oD0kgIN9JgPlG38wK0YtKySTzMX4CIlU&#xA;Q0FX+0p2pXfHglfDvxfD+xkNRDn/AA/FFflj5h0i58x3VjbXIkY2/KIrGY0kIYFgpfi5KDxHj4ZK&#xA;WnlGPER9t/sacuojM8Md2bedn4eV74+yD/gpFH8crjzXF9QePX9tIqQTcGCTBgjHoxVtyvtvTMLV&#xA;g8QdzpZCi9j8nWWn2vl6zFmqD1I0kuGjNeUxUeoWPjy29umZGOPCAHU6iZlM2itdSybTZTey+jCg&#xA;5epyKUYfZ3BB69hkc2AZRTHFm8M28/j1/wAk8fWTzLau0v71o2N5CVoBGeQ4O1fsjiR79K5hS7Fz&#xA;UAK+Q97nDtPT3fqH494Zj5RbTbi3mvLG9jvkZhG8kEkkkYKqGp+8CkNRxX4cv0uilgsS5nycfU6m&#xA;GWuC68/wU/zLcV5drnlbU31i8lDRcJp5ZF+I1AZiwqAPA5TPX4YHhkd/i7DFilKIIDM/J9hBb6b6&#xA;oobmUIlww7GJAiqPagr9OHDqI5o8UeTj6mEoSop9lrjsf8528kunxOi8vTk+KnYEEfrzK02ohiJM&#xA;zwh1/aGmyZogQHEbYlDpt1NHJLHFyMNAx2DAN4A7n7PbMkdraY2eMUPe6/8AkTVihwc/OP6078nW&#xA;V0uovM0ZWJYyrMaDdiKbde2UZdfhzwrHLio+bl6XszPp8l5I0CD1B+4lNNPu7a11jXTcSCMSXMTR&#xA;1/aAtYlJXx3BGQnjkYRIG1fpLnicRIi3jH5jaHrWq+cLq9tUN2l4yC1RAeXEKsarx+jMuGUYqhIE&#xA;efMNfhHKDOJB8uRQ/nXylq2naV5ejFjOeFhyunWNyEmllklZHYCgZQ1KZLFmiTIk9WEsZ2AG7Pvy&#xA;HtbyDQ9S9eN443uVMfIEAkIA1PwzD1WSMyDE25GLHKG0hT0/MVtdiqD1K0nuFjELhWRuXxVG/bpX&#xA;MHXaaeUARNUXK0uaOMniHNLbjQLy5flPMnL+cVY/Loua/wDkrJI3KQ/Hyc0doQiPSCitP0q9tbj1&#xA;GvDLGa+pGQd9tupOZul0eTFK+Ox3ONqNVDJGuGil3nDTvNmpRrZ6RPBb2cqkXMjsyyGuxWoVqLTw&#xA;3zZxIDiQMRzYfa/lLrkciSveWwdDyAUyHcHbfgMnxt3jBNLL8ttRhvYp5LqEBZFeRkDFjxIPcDfA&#xA;ZsTlHcyXzj5el1/RG0+KVYZDIkiu4LD4T7fPJ6fL4crcTJDiFPPW/JjXDUfXbUjtX1P+ac2H8oQ7&#xA;i0flyrWv5L6rA6TxayttcLuGhR6qf8lwyH8Mrlr4n+HZI0572a6/oXmO90G20+x1ZoLlI1jvLkfu&#xA;3mooBYOBIyVIJ2Hfr44MZgSunJEdqNvP0/Iadn5S3ymtSx5sxqf+ea1zJ/On8f2tfgQ8/wAfBV8x&#xA;eWPN8ug2vlTToGGlWDHnc8W5zvyZxTp8C89vHr7YMeaIlxHmUyw2KBoJr+W/5ZNosqanflkvEr6a&#xA;CgbcEfFQmi7/AGa79/DK8+oM/cyhCMBQ+bPNZ0qHVdPkspnaOOQqSyUr8JDdwfDMcGmcZUbY15g8&#xA;jXF19RTTJIoo7SL0v3rMGNG5BvhVtySScNjq2wy1zQ2l+T/N+mziS2v4I0LBpYw8hVvGqlKHDYTL&#xA;JE81/mHyDqOt6jJdXGoTcKssEUdzLCiRk7KEROPSlfHMbizgnhlGv6rGsJHqEr96Q2/5LRWM3rWM&#xA;89tMQVLwSqwKnsfVQGvyyY1WqG3ol77H3MTh05/nR+TL/I3lFvLkN6hnlm+uSidzMysfUoQzfCB9&#xA;rbvkhmyz3yCI7qv9LE48cfov4snwoSXUtJubm5ldKGOQAfaIP2QM0mr0GSeUyjVfsdpptXCMBEqO&#xA;haFdaR+6tqrbk/FHJNJKoH+SHZuNOgp8umXYMepjLfho8+X6Bza82TBKPW+iftWhoKnsM2hdeEln&#xA;tdZnZi/IBgVKqyIAp7AgOfnmmy4NRkNn7x+12mPNhgNv0/sW2mj3Fq3OONhIDXkJV/imUw7OyRNg&#xA;f7L9jZPWwkNz9n7UxsLWWKSWSQENJSpLcyT9AXNhotNLGSZdfO3D1WaMwAOiAby4s97fTXL0SaVW&#xA;tfTO6p6ahg1R3kDHN7DWyjEAdHVT0sZEkqB8tXFtIJ7aVZXjIaNHFPirtvWm3XL/AM9GY4ZCrafy&#xA;hibibQ11ouuXrE3QWSoI+JlpQ9qDJQz4IAgdff8ApYyxZpEE9E50DT5bCyaGUKpMhYKvQAgD+GYW&#xA;qyRnIGPKnKwQlEernaZZjN6p/o3+X+GKN3f6N/l/hiu7v9G/y/wxXd3+jf5f4Yru7/Rv8v8ADFd3&#xA;f6N/l/hiu7v9G/y/wxXd3+jf5f4Yru7/AEb/AC/wxXd3+jf5f4Yru7/Rv8v8MV3d/o3+X+GK7u/0&#xA;b/L/AAxXd3+jf5f4Yru7/Rv8v8MV3d/o3+X+GK7u/wBG/wAv8MV3d/o3+X+GK7u/0b/L/DFd3f6N&#xA;/l/hiu7v9G/y/wAMV3d/o3+X+GK7u/0b/L/DFd3f6N/l/hiu7v8ARv8AL/DFd3f6N/l/hiu7v9G/&#xA;y/wxXd3+jf5f4Yru7/Rv8v8ADFd3f6N/l/hiu7v9G/y/wxXd3+jf5f4Yru//2Q=="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:842e7a5e-fdae-784c-aae3-32bbffa9122b"
    stRef:documentID="xmp.did:842e7a5e-fdae-784c-aae3-32bbffa9122b"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:842e7a5e-fdae-784c-aae3-32bbffa9122b"
      stEvt:when="2021-12-24T15:21+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:298ea0b0-6110-fd4b-a4fd-8c7906a7c6aa"
      stEvt:when="2021-12-24T15:21:04+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="1359.399200"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
1359.4 400 li
1359.4 0 li
cp
clp
1359.4 400 mo
-1.07187e-05 400 li
-1.07187e-05 0 li
1359.4 0 li
1359.4 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.917647 .878431 .878431 rgb
f
276.428 197.012 mo
276.428 197.012 301.396 203.699 302.242 170.373 cv
303.053 138.396 293.492 128.031 293.492 128.031 cv
276.064 171 li
276.428 197.012 li
cp
.968627 .701961 .411765 rgb
f
265.307 324.791 mo
265.307 336.901 li
289.33 336.901 li
292.134 332.63 li
292.134 322.446 li
265.307 324.791 li
cp
1 .670588 .580392 rgb
f
223.793 324.791 mo
223.793 336.901 li
247.815 336.901 li
250.62 336.901 li
250.62 322.446 li
223.793 324.791 li
cp
f
220.644 336.489 mo
220.644 336.489 186.936 357.071 185.364 361.313 cv
183.791 365.556 188.721 367.155 191.013 367.313 cv
193.305 367.469 250.222 362.996 250.222 362.996 cv
252.206 347.249 li
252.206 347.249 251.204 334.068 250.62 333.686 cv
250.036 333.303 221.919 334.283 221.919 334.283 cv
220.644 336.489 li
cp
.556863 .396078 .490196 rgb
f
265.709 332.996 mo
265.709 332.996 243.798 353.449 243.079 357.588 cv
242.36 361.728 244.739 363.747 246.216 364.313 cv
247.692 364.878 276.672 364.151 284.632 363.739 cv
292.592 363.327 293.919 357.976 294.614 353.291 cv
295.309 348.606 292.134 332.63 292.134 332.63 cv
265.709 332.996 li
cp
.639216 .482353 .564706 rgb
f
238.991 173.627 mo
238.991 173.627 210.245 230.022 206.807 241.74 cv
203.37 253.458 208.818 327.654 208.818 327.654 cv
249.302 328.116 li
252.114 288.611 li
252.114 288.611 247.908 271.871 247.355 266.85 cv
246.802 261.827 252.114 247.512 252.114 247.512 cv
254.512 196.208 li
239.77 183.933 li
238.991 173.627 li
cp
.360784 .411765 .647059 rgb
f
286.398 185.598 mo
286.398 185.598 293.359 259.149 294.296 291.959 cv
295.234 324.769 294.296 327.654 294.296 327.654 cv
294.296 327.654 273.993 329.456 261.647 328.786 cv
249.302 328.116 249.302 328.116 249.302 328.116 cv
251.177 202.661 li
233.885 191.436 li
238.991 173.627 li
282.654 174.974 li
286.398 185.598 li
cp
f
238.782 257.981 mo
238.235 257.981 237.784 258.203 237.404 258.658 cv
237.042 259.092 236.937 259.509 237.082 259.933 cv
237.765 261.933 243.4 263.729 246.462 264.501 cv
245.065 262.621 241.452 258.107 238.882 257.983 cv
238.849 257.981 238.815 257.981 238.782 257.981 cv
cp
247.355 265.473 mo
247.328 265.473 247.301 265.47 247.274 265.464 cv
246.268 265.243 237.412 263.216 236.372 260.176 cv
236.138 259.492 236.292 258.82 236.828 258.178 cv
237.385 257.512 238.084 257.203 238.919 257.234 cv
242.521 257.408 247.457 264.581 247.665 264.887 cv
247.751 265.014 247.752 265.181 247.666 265.308 cv
247.595 265.412 247.478 265.473 247.355 265.473 cv
cp
1 1 1 rgb
f
294.713 319.575 mo
258.358 319.575 li
258.151 319.575 257.983 319.407 257.983 319.2 cv
257.983 318.993 258.151 318.825 258.358 318.825 cv
294.713 318.825 li
294.92 318.825 295.088 318.993 295.088 319.2 cv
295.088 319.407 294.92 319.575 294.713 319.575 cv
cp
f
247.355 319.575 mo
214.459 319.575 li
214.252 319.575 214.084 319.407 214.084 319.2 cv
214.084 318.993 214.252 318.825 214.459 318.825 cv
247.355 318.825 li
247.562 318.825 247.73 318.993 247.73 319.2 cv
247.73 319.407 247.562 319.575 247.355 319.575 cv
cp
f
250.434 252.771 mo
250.23 252.771 250.063 252.609 250.059 252.405 cv
249.171 214.664 li
235.555 203.837 li
235.393 203.708 235.366 203.472 235.495 203.31 cv
235.624 203.147 235.86 203.121 236.021 203.249 cv
249.775 214.186 li
249.862 214.255 249.914 214.359 249.916 214.471 cv
250.809 252.388 li
250.813 252.595 250.649 252.767 250.442 252.771 cv
250.439 252.771 250.437 252.771 250.434 252.771 cv
cp
f
286.398 203.918 mo
278.394 203.803 274.657 192.208 274.502 191.714 cv
274.44 191.517 274.55 191.306 274.748 191.244 cv
274.944 191.181 275.155 191.292 275.218 191.489 cv
275.254 191.604 278.947 203.061 286.403 203.168 cv
286.61 203.171 286.776 203.341 286.773 203.549 cv
286.77 203.754 286.603 203.918 286.398 203.918 cv
cp
f
1296.79 147.415 mo
1296.79 147.415 1316.16 170.224 1306.79 197.224 cv
1297.43 224.223 1268.45 209.477 1265.93 203.224 cv
1263.42 196.972 1267.81 172.471 1267.81 172.471 cv
1286.98 144.438 li
1296.79 147.415 li
cp
.639216 .482353 .564706 rgb
f
1286.23 207.892 mo
1283.24 207.892 1279.73 207.173 1275.74 205.212 cv
1275.56 205.12 1275.48 204.896 1275.57 204.71 cv
1275.66 204.523 1275.89 204.451 1276.07 204.538 cv
1290.43 211.596 1298.21 202.079 1298.29 201.981 cv
1298.41 201.819 1298.65 201.793 1298.81 201.921 cv
1298.97 202.05 1299 202.286 1298.87 202.448 cv
1298.81 202.522 1294.42 207.892 1286.23 207.892 cv
cp
.360784 .411765 .647059 rgb
f
251.975 83.5244 mo
251.975 83.5244 250.935 72.9165 254.025 72.25 cv
257.116 71.5835 262.228 75.5 262.228 75.5 cv
262.228 75.5 271.366 76.9165 273.7 81.3335 cv
276.033 85.75 273.7 91.1055 273.7 91.1055 cv
273.7 91.1055 270.29 90.7192 268.203 91.1929 cv
266.116 91.6665 251.975 83.5244 251.975 83.5244 cv
cp
0 0 0 rgb
f
673.478 101.988 mo
673.478 101.988 667.66 100.355 665.615 105.007 cv
664.376 107.825 665.615 111.079 665.615 111.079 cv
665.615 111.079 660.533 109.848 657.978 114.286 cv
655.865 117.954 657.978 121.82 657.978 121.82 cv
657.978 121.82 651.088 124.556 649.978 130.222 cv
648.866 135.889 651.644 139.111 651.644 139.111 cv
685.071 133.111 li
684.582 107.616 li
673.478 101.988 li
cp
f
697.721 119.97 mo
694.999 119.97 692.784 117.756 692.784 115.034 cv
692.784 113.772 693.261 112.57 694.126 111.65 cv
694.269 111.5 694.506 111.493 694.656 111.634 cv
694.808 111.776 694.814 112.013 694.673 112.164 cv
693.938 112.944 693.534 113.964 693.534 115.034 cv
693.534 117.342 695.412 119.22 697.721 119.22 cv
700.029 119.22 701.907 117.342 701.907 115.034 cv
701.907 112.726 700.029 110.848 697.721 110.848 cv
697.514 110.848 697.346 110.68 697.346 110.473 cv
697.346 110.266 697.514 110.098 697.721 110.098 cv
700.442 110.098 702.657 112.313 702.657 115.034 cv
702.657 117.756 700.442 119.97 697.721 119.97 cv
cp
1 1 1 rgb
f
935.142 318.393 mo
935.142 318.393 947.146 327.979 946.92 329.457 cv
946.694 330.937 952.472 350.065 952.472 350.065 cv
923.696 342.27 li
923.696 318.393 li
935.142 318.393 li
cp
.937255 .643137 .34902 rgb
f
904.86 322.93 mo
904.86 336.882 li
932.25 335.381 li
932.25 322.048 li
904.86 322.93 li
cp
1 1 1 rgb
f
886.36 142.263 mo
886.36 142.263 863.527 161.604 868.36 189.77 cv
873.194 217.937 904.194 208.12 907.694 202.361 cv
911.194 196.604 910.86 171.714 910.86 171.714 cv
896.527 140.928 li
886.36 142.263 li
cp
.25098 .313726 .498039 rgb
f
953.36 174.583 mo
953.36 174.583 980.25 222.492 980.472 241.381 cv
980.694 260.27 941.729 322.93 941.729 322.93 cv
941.729 322.93 931.139 327.27 915.583 326.77 cv
900.027 326.27 897.583 324.492 897.583 324.492 cv
897.583 324.492 900.25 190.092 906.472 177.514 cv
912.694 164.937 953.36 174.583 953.36 174.583 cv
cp
.639216 .482353 .564706 rgb
f
973.694 125.048 mo
973.694 125.048 979.694 123.062 982.86 119.916 cv
986.027 116.77 989.527 109.882 989.527 109.882 cv
1004.19 113.712 li
1004.19 113.712 1004.19 139.604 988.944 149.77 cv
974.429 159.447 961.36 155.842 961.36 155.842 cv
973.694 125.048 li
cp
1 .670588 .580392 rgb
f
928.916 111.621 mo
928.916 111.621 915.139 111.159 908.027 117.604 cv
900.916 124.048 905.583 180.27 905.583 180.27 cv
905.583 180.27 924.135 181.826 937.414 180.27 cv
950.694 178.714 956.694 176.604 956.694 176.604 cv
956.694 176.604 958.25 124.922 954.694 118.708 cv
951.139 112.492 928.916 111.621 928.916 111.621 cv
cp
.407843 .713726 .847059 rgb
f
913.162 114.41 mo
913.162 114.41 899.194 117.437 889.027 129.659 cv
879.63 140.957 877.36 154.757 877.36 154.757 cv
877.36 154.757 887.84 151.147 893.767 151.208 cv
899.694 151.27 907.527 153.937 907.527 153.937 cv
913.162 114.41 li
cp
f
943.698 87.5713 mo
943.698 87.5713 949.971 77.5298 945.011 75.2285 cv
940.05 72.9272 933.945 78.377 933.945 78.377 cv
933.945 78.377 922.723 79.1152 918.332 85.0166 cv
913.94 90.918 924.164 101.663 924.164 101.663 cv
943.698 87.5713 li
cp
0 0 0 rgb
f
926.099 103.984 mo
925.226 114.288 li
925.226 114.288 926.833 117.407 932.819 118.408 cv
937.278 119.153 938.942 118.272 938.942 118.272 cv
938.758 113 li
938.572 107.859 li
927.891 104.542 li
926.099 103.984 li
cp
1 .670588 .580392 rgb
f
927.891 104.542 mo
927.894 104.826 927.972 105.167 928.106 105.562 cv
929.976 110.904 936.185 112.548 938.758 113 cv
938.572 107.859 li
927.891 104.542 li
cp
0 0 0 rgb
f
942.86 84.5679 mo
942.86 84.5679 947.173 97.9448 944.433 104.942 cv
941.693 111.939 935.247 110.147 931.462 108.361 cv
927.678 106.576 926.098 103.986 926.098 103.986 cv
926.098 103.986 922.307 104.861 920.197 101.206 cv
918.087 97.5508 919.989 93.7871 922.173 93.1001 cv
924.356 92.4131 926.694 94.1748 926.694 94.1748 cv
925.116 90.2544 li
925.116 90.2544 935.225 72.1519 942.86 84.5679 cv
cp
1 .670588 .580392 rgb
f
925.876 99.6699 mo
925.789 99.6699 925.703 99.6401 925.632 99.5796 cv
921.272 95.8477 li
921.115 95.7134 921.097 95.4766 921.231 95.3193 cv
921.366 95.1611 921.603 95.1436 921.761 95.2783 cv
926.12 99.0103 li
926.277 99.1445 926.296 99.3813 926.161 99.5386 cv
926.087 99.6255 925.981 99.6699 925.876 99.6699 cv
cp
0 0 0 rgb
f
921.649 99.2534 mo
921.47 99.2534 921.311 99.124 921.279 98.9409 cv
921.245 98.7368 921.383 98.543 921.587 98.5088 cv
924.711 97.9814 li
924.923 97.9443 925.109 98.085 925.144 98.2886 cv
925.178 98.4927 925.04 98.6865 924.836 98.7207 cv
921.712 99.248 li
921.69 99.252 921.67 99.2534 921.649 99.2534 cv
cp
f
933.804 89.2354 mo
933.713 89.2354 933.622 89.2026 933.551 89.1367 cv
933.397 88.9971 933.388 88.7598 933.527 88.6069 cv
935.06 86.9326 936.875 87.4175 937.62 87.9058 cv
937.792 88.019 937.84 88.25 937.728 88.4229 cv
937.615 88.5967 937.382 88.645 937.21 88.5337 cv
937.144 88.4902 935.558 87.5 934.08 89.1138 cv
934.006 89.1943 933.905 89.2354 933.804 89.2354 cv
cp
f
943.839 89.5986 mo
943.744 89.5986 943.649 89.563 943.576 89.4917 cv
942.548 88.4834 941.333 89.0371 941.282 89.062 cv
941.092 89.1499 940.871 89.0693 940.783 88.8838 cv
940.694 88.6973 940.772 88.4746 940.958 88.3853 cv
941.029 88.3516 942.69 87.5747 944.102 88.9556 cv
944.249 89.1006 944.252 89.3379 944.106 89.4858 cv
944.033 89.561 943.937 89.5986 943.839 89.5986 cv
cp
f
941.272 99.2534 mo
941.227 99.2534 941.181 99.2451 941.136 99.2275 cv
940.942 99.1519 940.848 98.9341 940.924 98.7412 cv
942.302 95.2295 939.923 93.9487 939.821 93.896 cv
939.638 93.8008 939.565 93.5752 939.659 93.3916 cv
939.753 93.2075 939.976 93.1338 940.162 93.2275 cv
940.192 93.2432 943.256 94.8525 941.621 99.0156 cv
941.563 99.1631 941.422 99.2534 941.272 99.2534 cv
cp
f
943.373 94.5449 mo
943.195 94.5449 943.037 94.4185 943.004 94.2378 cv
942.56 91.8203 li
942.522 91.6167 942.657 91.4209 942.861 91.3838 cv
943.064 91.3457 943.261 91.481 943.298 91.6846 cv
943.742 94.1021 li
943.779 94.3057 943.645 94.5015 943.44 94.5386 cv
943.418 94.543 943.396 94.5449 943.373 94.5449 cv
cp
f
936.842 94.1201 mo
936.664 94.1201 936.506 93.9937 936.473 93.813 cv
936.027 91.395 li
935.99 91.1914 936.125 90.9961 936.328 90.9585 cv
936.536 90.9194 936.729 91.0562 936.766 91.2593 cv
937.211 93.6772 li
937.248 93.8809 937.113 94.0762 936.91 94.1138 cv
936.887 94.1182 936.864 94.1201 936.842 94.1201 cv
cp
f
943.698 87.5713 mo
943.698 87.5713 942.755 85.4048 940.187 85.1694 cv
937.617 84.9341 935.963 86.6172 935.963 86.6172 cv
935.963 86.6172 936.724 91.041 933.034 93.0439 cv
929.344 95.0469 926.694 94.1748 926.694 94.1748 cv
924.235 93.0562 li
922.689 89.1943 li
930.693 81.9121 li
940.61 77.7061 li
945.075 82.5073 li
943.698 87.5713 li
cp
f
938.373 103.14 mo
938.29 103.14 935.684 103.114 934.789 100.694 cv
934.717 100.5 934.816 100.285 935.011 100.213 cv
935.208 100.14 935.421 100.241 935.492 100.435 cv
936.204 102.358 938.238 102.39 938.365 102.39 cv
938.576 102.39 938.744 102.556 938.745 102.762 cv
938.747 102.968 938.582 103.137 938.375 103.14 cv
938.375 103.14 938.374 103.14 938.373 103.14 cv
cp
f
909.058 115.687 mo
909.058 115.687 910.988 129.659 909.29 139.604 cv
907.477 150.227 901.527 164.492 901.527 164.492 cv
904.863 169.658 li
904.863 169.658 909.005 167.636 911.4 164.254 cv
914.36 160.076 920.194 147.27 920.194 131.437 cv
920.194 115.604 919.088 112.198 919.088 112.198 cv
919.088 112.198 911.154 113.665 909.058 115.687 cv
cp
.25098 .313726 .498039 rgb
f
951.442 115.976 mo
951.442 115.976 958.86 120.015 965.36 121.143 cv
971.86 122.27 975.86 122.762 975.86 122.762 cv
975.86 122.762 975.194 140.029 975.86 148.65 cv
976.527 157.27 976.86 158.77 976.86 158.77 cv
976.86 158.77 958.527 161.411 953.694 154.757 cv
948.86 148.104 951.442 115.976 951.442 115.976 cv
cp
.407843 .713726 .847059 rgb
f
878.599 154.35 mo
878.599 154.35 868.694 182.104 885.194 185.437 cv
901.694 188.77 911.36 152.937 911.36 152.937 cv
899.86 147.27 li
893.767 151.208 li
893.767 151.208 882.86 151.937 878.599 154.35 cv
cp
1 .670588 .580392 rgb
f
899.86 147.27 mo
899.86 147.27 900.527 140.66 901.194 137.632 cv
901.86 134.604 904.86 132.27 904.86 132.27 cv
904.86 132.27 908.245 128.665 909.694 128.619 cv
911.144 128.572 912.36 130.937 912.36 130.937 cv
912.36 130.937 918.194 133.87 920.194 135.653 cv
922.194 137.437 923.519 141.937 922.689 143.937 cv
921.86 145.937 919.694 149.529 918.36 148.65 cv
917.027 147.77 917.235 144.714 917.235 144.714 cv
917.235 144.714 913.36 154.917 906.527 155.843 cv
899.694 156.77 899.86 147.27 899.86 147.27 cv
cp
f
941.729 113.056 mo
941.729 113.056 946.194 118.133 950.027 128.618 cv
953.86 139.104 957.034 158.77 957.034 158.77 cv
957.034 158.77 957.144 128.289 955.477 121.143 cv
953.81 113.997 941.729 113.056 941.729 113.056 cv
cp
.25098 .313726 .498039 rgb
f
990.48 102.313 mo
990.48 102.313 993.132 90.4717 996.388 90.2314 cv
999.644 89.9917 997.091 99.7603 997.091 99.7603 cv
1005.91 96.3892 li
1005.91 96.3892 1015.94 93.5923 1017.93 94.4653 cv
1019.93 95.3384 1016.64 98.5918 1016.64 98.5918 cv
1016.64 98.5918 1023.79 96.4478 1022.79 99.9307 cv
1021.78 103.413 1016.9 105.416 1016.9 105.416 cv
1016.9 105.416 1023.88 102.941 1022.3 107.022 cv
1021.45 109.229 1006.09 118.526 995.745 118.195 cv
985.397 117.863 989.527 109.882 989.527 109.882 cv
990.48 102.313 li
cp
1 .670588 .580392 rgb
f
1012.88 107.538 mo
1012.8 107.538 1012.71 107.508 1012.64 107.448 cv
1003.95 100.023 li
1003.79 99.8882 1003.77 99.6519 1003.91 99.4941 cv
1004.04 99.3359 1004.28 99.3169 1004.44 99.4526 cv
1013.13 106.877 li
1013.29 107.012 1013.3 107.249 1013.17 107.406 cv
1013.09 107.493 1012.99 107.538 1012.88 107.538 cv
cp
0 0 0 rgb
f
995.897 111 mo
995.732 111 995.581 110.889 995.536 110.722 cv
995.481 110.522 995.6 110.317 995.8 110.263 cv
995.825 110.255 998.365 109.542 999.13 107.321 cv
999.788 105.411 999.001 102.943 996.789 99.9849 cv
996.665 99.8188 996.699 99.584 996.865 99.46 cv
997.031 99.3369 997.267 99.3701 997.391 99.5356 cv
999.762 102.708 1000.58 105.412 999.837 107.572 cv
998.938 110.17 996.114 110.955 995.994 110.987 cv
995.962 110.996 995.93 111 995.897 111 cv
cp
f
903.139 137.044 mo
903.093 137.044 903.047 137.036 903.002 137.019 cv
902.81 136.943 902.714 136.726 902.789 136.533 cv
904.511 132.133 li
904.587 131.94 904.806 131.847 904.997 131.921 cv
905.189 131.996 905.285 132.214 905.21 132.407 cv
903.488 136.806 li
903.43 136.954 903.288 137.044 903.139 137.044 cv
cp
f
917.235 145.089 mo
917.192 145.089 917.148 145.082 917.106 145.066 cv
916.959 145.013 916.86 144.872 916.86 144.714 cv
916.86 142.263 li
916.86 142.056 917.028 141.888 917.235 141.888 cv
917.442 141.888 917.61 142.056 917.61 142.263 cv
917.61 143.687 li
919.012 142.021 li
919.146 141.863 919.382 141.843 919.54 141.976 cv
919.699 142.109 919.719 142.346 919.586 142.504 cv
917.522 144.956 li
917.449 145.042 917.344 145.089 917.235 145.089 cv
cp
f
935.624 119.052 mo
929.194 119.052 924.998 114.594 924.95 114.542 cv
924.81 114.39 924.819 114.153 924.972 114.012 cv
925.122 113.872 925.359 113.88 925.501 114.033 cv
925.554 114.091 930.969 119.83 938.853 117.908 cv
939.049 117.855 939.256 117.982 939.306 118.183 cv
939.354 118.384 939.231 118.587 939.03 118.636 cv
937.839 118.927 936.7 119.052 935.624 119.052 cv
cp
.407843 .462745 .666667 rgb
f
941.729 323.305 mo
941.5 323.292 941.342 323.114 941.354 322.908 cv
943.914 278.978 943.008 207.657 942.998 206.941 cv
942.996 206.808 943.066 206.683 943.182 206.614 cv
956.844 198.522 li
957.023 198.418 957.254 198.475 957.357 198.654 cv
957.463 198.833 957.404 199.063 957.227 199.168 cv
943.751 207.148 li
943.805 211.546 944.594 280.202 942.103 322.951 cv
942.091 323.15 941.926 323.305 941.729 323.305 cv
cp
1 1 1 rgb
f
955.399 243.58 mo
955.314 243.58 955.227 243.584 955.137 243.593 cv
951.724 243.911 946.534 249.961 944.58 252.389 cv
948.785 250.887 956.681 247.604 957.2 245.174 cv
957.284 244.78 957.151 244.44 956.782 244.102 cv
956.4 243.752 955.946 243.58 955.399 243.58 cv
cp
943.499 253.533 mo
943.381 253.533 943.267 253.478 943.194 253.377 cv
943.099 253.244 943.101 253.064 943.199 252.934 cv
943.494 252.539 950.486 243.273 955.066 242.846 cv
955.946 242.764 956.691 243.001 957.288 243.549 cv
957.997 244.198 958.03 244.876 957.934 245.331 cv
957.165 248.924 945.002 253.055 943.617 253.514 cv
943.578 253.527 943.538 253.533 943.499 253.533 cv
cp
f
907.827 196.411 mo
907.652 196.411 907.495 196.288 907.46 196.11 cv
907.419 195.907 907.55 195.709 907.753 195.668 cv
914.526 194.3 918.113 185.738 918.149 185.652 cv
918.229 185.46 918.448 185.368 918.639 185.447 cv
918.83 185.526 918.922 185.745 918.843 185.936 cv
918.692 186.304 915.071 194.956 907.901 196.403 cv
907.876 196.408 907.852 196.411 907.827 196.411 cv
cp
f
902.398 330.74 mo
902.398 330.74 933.139 329.374 933.361 330.267 cv
933.583 331.159 934.25 337.243 934.25 337.243 cv
964.027 353.678 li
964.027 353.678 974.25 356.691 974.472 361.813 cv
974.694 366.937 966.472 367.609 963.806 368.385 cv
961.139 369.159 909.011 368.465 903.731 367.585 cv
899.731 366.919 902.398 330.74 902.398 330.74 cv
cp
.968627 .701961 .411765 rgb
f
941.121 350.44 mo
940.962 350.44 940.819 350.34 940.767 350.188 cv
940.712 350.03 940.769 349.856 940.904 349.76 cv
945.592 346.433 li
932.107 347.514 li
931.93 347.526 931.792 347.433 931.73 347.282 cv
931.668 347.131 931.711 346.957 931.836 346.853 cv
938.786 341.017 li
938.945 340.886 939.182 340.905 939.314 341.063 cv
939.447 341.221 939.427 341.458 939.269 341.591 cv
933.217 346.672 li
946.89 345.576 li
947.073 345.558 947.214 345.663 947.272 345.822 cv
947.33 345.98 947.274 346.158 947.137 346.256 cv
942.384 349.629 li
956.154 348.967 li
956.371 348.963 956.537 349.117 956.547 349.324 cv
956.557 349.53 956.396 349.706 956.189 349.717 cv
941.139 350.44 li
941.133 350.44 941.127 350.44 941.121 350.44 cv
cp
.184314 .184314 .407843 rgb
f
890.156 203.913 mo
879.74 203.913 875.374 196.311 875.322 196.218 cv
875.222 196.037 875.287 195.809 875.468 195.708 cv
875.645 195.609 875.876 195.671 875.979 195.854 cv
876.225 196.295 882.188 206.613 897.475 202.002 cv
897.67 201.943 897.883 202.055 897.942 202.253 cv
898.002 202.451 897.89 202.66 897.691 202.721 cv
894.892 203.564 892.385 203.913 890.156 203.913 cv
cp
.407843 .462745 .666667 rgb
f
784.086 109.848 mo
784.086 109.848 774.469 117.102 773.753 125.912 cv
772.67 139.245 787.836 133.412 789.503 124.912 cv
791.17 116.412 784.086 109.848 784.086 109.848 cv
cp
0 0 0 rgb
f
823.586 179.329 mo
828.633 195.106 li
821.072 195.995 li
818.062 182.773 li
823.586 179.329 li
cp
.556863 .396078 .490196 rgb
f
761.403 310.328 mo
765.72 332.995 li
780.572 341.328 li
794.284 336.662 li
792.089 310.328 li
761.403 310.328 li
cp
.94902 .478431 .372549 rgb
f
763.624 321.988 mo
795.669 321.988 li
801.072 336.662 li
765.72 332.995 li
763.624 321.988 li
cp
1 1 1 rgb
f
798.029 336.662 mo
789.59 352.782 li
784.25 362.992 li
784.25 362.992 731.59 364.992 728.92 362.992 cv
726.25 360.992 726.25 355.332 728.92 352.992 cv
731.59 350.662 762.92 333.662 762.92 333.662 cv
762.92 333.662 762.92 328.992 764.869 328.542 cv
766.829 328.092 779.81 333.662 779.81 333.662 cv
794.96 328.521 li
798.029 336.662 li
cp
.207843 .270588 .427451 rgb
f
789.59 352.782 mo
784.25 362.992 li
784.25 362.992 731.59 364.992 728.92 362.992 cv
726.25 360.992 726.25 355.332 728.92 352.992 cv
728.92 352.992 765.06 355.662 785.159 352.992 cv
787.06 352.742 788.51 352.682 789.59 352.782 cv
cp
.937255 .643137 .34902 rgb
f
790.864 313.106 mo
794.284 336.662 li
819.586 336.662 li
820.653 313.106 li
790.864 313.106 li
cp
.956863 .517647 .384314 rgb
f
794.284 336.662 mo
792.574 324.884 li
820.12 324.884 li
819.586 336.662 li
794.284 336.662 li
cp
1 1 1 rgb
f
827.359 358.662 mo
827.359 361.552 825.59 365.552 819.359 366.882 cv
813.14 368.222 780.6 366.882 779.59 365.771 cv
779.05 365.191 778.71 362.832 778.51 360.712 cv
778.29 358.462 778.85 356.191 780.09 354.302 cv
793.409 333.992 li
793.409 333.992 797.079 330.222 804.22 330.882 cv
811.359 331.552 814.939 333.992 814.939 333.992 cv
814.939 333.992 818.25 330.642 819.81 331.762 cv
821.1 332.691 825.439 348.592 826.89 355.642 cv
827.189 357.092 827.359 358.172 827.359 358.662 cv
cp
.25098 .313726 .498039 rgb
f
766.629 183.507 mo
766.629 183.507 758.011 214.41 754.329 240.567 cv
750.647 266.726 748.582 309.167 750.977 310.744 cv
753.371 312.321 781.476 314.262 781.476 314.262 cv
781.476 314.262 790.948 317.854 807.307 317.414 cv
819.179 317.095 828.834 314.314 828.834 314.314 cv
828.834 314.314 827.111 198.123 818.161 180.181 cv
811.157 166.139 766.629 183.507 766.629 183.507 cv
cp
.968627 .701961 .411765 rgb
f
766.463 178.188 mo
766.463 184.884 li
766.463 184.884 783.435 188.773 797.364 187.773 cv
811.294 186.773 816.499 184.329 816.499 184.329 cv
822.42 150.329 li
804.624 125.285 li
790.07 124.106 li
754.586 149.829 li
763.253 173.329 li
766.463 178.188 li
cp
.572549 .705882 .917647 rgb
f
783.224 108.94 mo
783.224 108.94 779.753 105.105 780.753 99.1616 cv
781.431 95.1323 783.224 93.8286 783.224 93.8286 cv
783.224 93.8286 780.492 88.3286 788.623 88.6616 cv
796.753 88.9951 801.537 92.9868 801.537 92.9868 cv
801.537 92.9868 805.253 91.1616 806.92 95.4951 cv
808.586 99.8286 806.92 106.221 806.92 106.221 cv
783.224 108.94 li
cp
0 0 0 rgb
f
777.742 169.329 mo
784.328 138.662 li
807.225 138.662 li
802.063 171.139 li
777.742 169.329 li
cp
.937255 .643137 .34902 rgb
f
802.05 203.332 mo
798.81 205.352 794.96 203.332 794.96 203.332 cv
794.96 203.332 785.13 188.792 780.189 169.712 cv
780.109 169.412 780.04 169.112 779.97 168.812 cv
779 164.962 778.25 160.942 777.829 156.822 cv
777.79 156.552 777.77 156.292 777.739 156.022 cv
777.29 151.172 777.02 147.132 776.899 143.772 cv
780.63 143.772 li
781.729 138.662 li
784.399 138.662 li
784.5 140.262 784.63 141.972 784.81 143.772 cv
785.14 147.102 785.619 150.732 786.31 154.522 cv
787.26 159.672 788.6 165.112 790.51 170.472 cv
790.71 171.052 790.92 171.632 791.14 172.212 cv
799.59 194.442 803.729 197.102 803.729 197.102 cv
803.729 197.102 805.6 201.102 802.05 203.332 cv
cp
.639216 .482353 .564706 rgb
f
804.619 138.662 mo
799.46 171.142 li
790.51 170.472 li
780.189 169.712 li
775.14 169.332 li
775.47 167.812 li
777.829 156.822 li
780.63 143.772 li
781.729 138.662 li
804.619 138.662 li
cp
.968627 .701961 .411765 rgb
f
766.245 165.106 mo
772.024 143.773 li
791.615 143.773 li
786.077 169.5 li
766.245 165.106 li
cp
.407843 .462745 .666667 rgb
f
788.619 143.772 mo
786.31 154.522 li
783.09 169.502 li
779.97 168.812 li
775.47 167.812 li
763.25 165.102 li
769.029 143.772 li
788.619 143.772 li
cp
.25098 .313726 .498039 rgb
f
767.034 161.995 mo
767.034 161.995 774.382 161.233 775.938 161.233 cv
777.493 161.233 779.586 164.884 779.586 164.884 cv
784.247 166.229 li
778.92 181.217 li
778.92 181.217 767.835 182.658 763.253 177.329 cv
761.533 175.329 767.034 161.995 767.034 161.995 cv
cp
.94902 .478431 .372549 rgb
f
790.07 124.773 mo
790.07 124.773 776.142 125.106 762.03 136.884 cv
747.92 148.662 741.809 160.329 744.697 170.551 cv
747.586 180.773 765.697 181.217 765.697 181.217 cv
771.03 160.106 li
757.086 150.995 li
790.07 124.773 li
cp
.572549 .705882 .917647 rgb
f
797.586 165.551 mo
797.586 165.551 793.253 163.236 791.142 162.684 cv
789.143 162.161 787.636 162.26 787.636 162.26 cv
786.966 165.37 li
786.966 165.37 780.03 166.884 775.142 169.329 cv
770.253 171.773 771.142 173.995 771.142 173.995 cv
771.142 173.995 768.03 175.995 769.364 177.329 cv
770.697 178.662 775.809 177.329 775.809 177.329 cv
775.809 177.329 769.364 179.773 772.03 181.217 cv
774.697 182.662 780.572 182.217 780.572 182.217 cv
780.572 182.217 793.364 184.439 797.586 179.995 cv
801.809 175.551 797.586 165.551 797.586 165.551 cv
cp
.956863 .517647 .384314 rgb
f
801.072 115.64 mo
800.823 125.564 li
800.823 125.564 798.962 128.373 793.144 128.699 cv
788.81 128.942 787.496 126.686 787.496 126.686 cv
788.762 118.028 li
799.303 115.984 li
801.072 115.64 li
cp
f
800.253 124.773 mo
800.253 124.773 824.364 125.662 836.475 145.106 cv
848.586 164.551 839.03 182.106 820.03 185.662 cv
801.03 189.217 791.142 183.995 791.142 183.995 cv
795.669 161.884 li
805.414 160.439 li
814.941 148.829 li
800.253 124.773 li
cp
.572549 .705882 .917647 rgb
f
784.399 138.662 mo
781.729 138.662 li
780.63 143.772 li
776.899 143.772 li
776.359 129.552 778.25 127.442 778.25 127.442 cv
784.25 125.652 li
784.25 125.652 783.92 130.862 784.399 138.662 cv
cp
.639216 .482353 .564706 rgb
f
801.072 115.034 mo
801.04 115.305 800.929 115.622 800.76 115.984 cv
798.414 120.886 790.548 122.753 788.044 122.915 cv
788.762 118.028 li
801.072 115.034 li
cp
0 0 0 rgb
f
787.116 95.3501 mo
787.116 95.3501 781.596 107.663 783.475 114.628 cv
785.355 121.593 791.694 120.561 795.494 119.254 cv
799.293 117.947 801.073 115.642 801.073 115.642 cv
801.073 115.642 804.599 116.875 806.996 113.609 cv
809.394 110.342 807.974 106.551 805.962 105.666 cv
803.95 104.781 801.535 106.216 801.535 106.216 cv
803.451 102.641 li
803.451 102.641 795.707 84.3037 787.116 95.3501 cv
cp
.956863 .517647 .384314 rgb
f
801.535 106.216 mo
801.535 106.216 796.218 107.289 792.523 101.372 cv
788.83 95.4551 789.169 93.0249 789.169 93.0249 cv
785.489 99.1338 li
785.489 99.1338 784.666 94.8979 786.36 92.1982 cv
788.055 89.498 789.813 90.0576 789.813 90.0576 cv
801.537 92.9868 li
804.624 102.384 li
801.535 106.216 li
cp
0 0 0 rgb
f
787.537 111.047 mo
787.377 111.047 787.228 110.943 787.179 110.782 cv
786.371 108.145 788.236 105.468 788.316 105.355 cv
788.436 105.186 788.669 105.147 788.839 105.266 cv
789.008 105.386 789.048 105.62 788.929 105.789 cv
788.911 105.813 787.197 108.281 787.896 110.563 cv
787.956 110.761 787.845 110.97 787.646 111.031 cv
787.61 111.042 787.573 111.047 787.537 111.047 cv
cp
f
802.044 111.998 mo
801.951 111.998 801.858 111.964 801.786 111.895 cv
801.636 111.752 801.629 111.515 801.771 111.365 cv
805.141 107.815 li
805.285 107.666 805.521 107.659 805.671 107.802 cv
805.821 107.944 805.828 108.182 805.686 108.332 cv
802.316 111.881 li
802.242 111.959 802.144 111.998 802.044 111.998 cv
cp
f
805.603 111.055 mo
805.584 111.055 805.564 111.053 805.545 111.05 cv
803.223 110.691 li
803.019 110.66 802.878 110.468 802.91 110.264 cv
802.941 110.059 803.127 109.916 803.338 109.95 cv
805.66 110.309 li
805.864 110.341 806.005 110.532 805.973 110.737 cv
805.944 110.922 805.785 111.055 805.603 111.055 cv
cp
f
790.861 113.719 mo
791.628 113.917 792.7 114.069 793.113 113.612 cv
793.553 113.124 793.395 112.342 793.232 111.858 cv
790.861 113.719 li
cp
792.136 114.662 mo
791.143 114.662 790.109 114.28 789.936 114.213 cv
789.81 114.165 789.72 114.052 789.699 113.919 cv
789.68 113.786 789.732 113.651 789.839 113.568 cv
793.16 110.961 li
793.248 110.893 793.363 110.865 793.472 110.89 cv
793.58 110.914 793.674 110.985 793.725 111.084 cv
793.765 111.161 794.688 112.984 793.67 114.114 cv
793.299 114.527 792.724 114.662 792.136 114.662 cv
cp
f
785.156 100.921 mo
784.977 100.921 784.818 100.792 784.787 100.61 cv
784.751 100.406 784.888 100.212 785.092 100.176 cv
787.288 99.7944 li
787.498 99.7651 787.687 99.897 787.722 100.1 cv
787.758 100.304 787.621 100.498 787.417 100.534 cv
785.221 100.916 li
785.199 100.919 785.177 100.921 785.156 100.921 cv
cp
f
794.283 102.363 mo
794.226 102.363 794.168 102.35 794.113 102.322 cv
790.513 100.499 li
790.328 100.405 790.255 100.179 790.348 99.9946 cv
790.441 99.8086 790.667 99.7368 790.853 99.8296 cv
794.453 101.653 li
794.638 101.747 794.711 101.973 794.618 102.157 cv
794.552 102.288 794.42 102.363 794.283 102.363 cv
cp
f
808.252 109.848 mo
808.252 109.848 815.92 116.495 814.836 127.329 cv
813.753 138.162 803.011 136.771 800.755 132.818 cv
797.336 126.829 801.073 115.642 801.073 115.642 cv
801.073 115.642 807.66 116.745 808.252 109.848 cv
cp
f
785.156 105.997 mo
785.12 105.997 785.083 105.991 785.046 105.98 cv
784.849 105.919 784.737 105.709 784.798 105.512 cv
785.425 103.471 li
784.866 102.788 li
784.734 102.628 784.759 102.392 784.919 102.26 cv
785.078 102.131 785.314 102.152 785.446 102.313 cv
786.132 103.152 li
786.212 103.249 786.237 103.379 786.2 103.499 cv
785.515 105.731 li
785.465 105.893 785.316 105.997 785.156 105.997 cv
cp
f
791.402 106.596 mo
791.366 106.596 791.329 106.591 791.292 106.58 cv
791.095 106.519 790.983 106.309 791.044 106.111 cv
791.669 104.076 li
790.856 103.127 li
790.722 102.97 790.74 102.733 790.897 102.599 cv
791.056 102.465 791.291 102.481 791.427 102.64 cv
792.373 103.746 li
792.456 103.843 792.484 103.977 792.446 104.099 cv
791.761 106.331 li
791.711 106.493 791.563 106.596 791.402 106.596 cv
cp
f
779.586 165.259 mo
779.563 165.259 779.539 165.257 779.516 165.252 cv
772.516 163.919 li
772.313 163.88 772.179 163.684 772.218 163.48 cv
772.257 163.278 772.45 163.14 772.656 163.183 cv
779.656 164.516 li
779.859 164.554 779.993 164.75 779.954 164.954 cv
779.92 165.134 779.763 165.259 779.586 165.259 cv
cp
f
786.966 165.745 mo
786.804 165.745 786.654 165.64 786.606 165.477 cv
786.548 165.278 786.661 165.069 786.859 165.011 cv
790.757 163.858 li
790.955 163.8 791.165 163.912 791.223 164.111 cv
791.281 164.31 791.168 164.518 790.97 164.577 cv
787.072 165.729 li
787.037 165.74 787.001 165.745 786.966 165.745 cv
cp
f
771.437 174.017 mo
771.273 174.017 771.124 173.91 771.076 173.746 cv
771.019 173.547 771.134 173.339 771.332 173.281 cv
781.259 170.413 li
781.459 170.355 781.665 170.471 781.724 170.669 cv
781.781 170.868 781.666 171.076 781.468 171.133 cv
771.541 174.002 li
771.506 174.012 771.471 174.017 771.437 174.017 cv
cp
f
775.142 177.858 mo
774.979 177.858 774.83 177.752 774.781 177.589 cv
774.724 177.39 774.838 177.182 775.036 177.124 cv
781.258 175.302 li
781.457 175.244 781.664 175.357 781.724 175.556 cv
781.781 175.755 781.667 175.963 781.469 176.021 cv
775.247 177.843 li
775.212 177.854 775.177 177.858 775.142 177.858 cv
cp
f
793.234 129.03 mo
789.487 129.03 787.271 126.989 787.238 126.958 cv
787.088 126.816 787.082 126.58 787.224 126.429 cv
787.365 126.279 787.603 126.273 787.754 126.413 cv
787.932 126.581 792.2 130.473 799.13 126.583 cv
799.307 126.482 799.538 126.545 799.641 126.727 cv
799.742 126.907 799.678 127.136 799.497 127.237 cv
797.114 128.574 795.004 129.03 793.234 129.03 cv
cp
1 1 1 rgb
f
805.413 160.814 mo
805.237 160.814 805.081 160.691 805.045 160.512 cv
805.005 160.309 805.137 160.112 805.34 160.072 cv
805.473 160.045 818.638 157.454 826.253 157.454 cv
826.46 157.454 826.628 157.622 826.628 157.829 cv
826.628 158.036 826.46 158.204 826.253 158.204 cv
818.711 158.204 805.617 160.781 805.486 160.807 cv
805.461 160.812 805.437 160.814 805.413 160.814 cv
cp
f
823.703 153.201 mo
822.182 153.201 819.631 155.537 817.773 157.672 cv
821.165 156.158 824.393 154.313 824.431 153.524 cv
824.433 153.5 824.436 153.429 824.242 153.326 cv
824.083 153.241 823.901 153.201 823.703 153.201 cv
cp
816.499 159.002 mo
816.385 159.002 816.273 158.95 816.2 158.854 cv
816.098 158.719 816.099 158.531 816.203 158.397 cv
816.777 157.659 821.892 151.227 824.596 152.664 cv
825.102 152.935 825.193 153.301 825.18 153.561 cv
825.092 155.352 818.623 158.157 816.642 158.974 cv
816.596 158.993 816.547 159.002 816.499 159.002 cv
cp
f
765.72 157.011 mo
765.621 157.011 765.523 156.973 765.449 156.896 cv
765.405 156.851 761.009 152.322 756.998 151.36 cv
756.797 151.312 756.673 151.109 756.722 150.908 cv
756.77 150.708 756.961 150.582 757.174 150.63 cv
761.398 151.645 765.805 156.184 765.99 156.376 cv
766.134 156.525 766.129 156.763 765.979 156.906 cv
765.907 156.977 765.813 157.011 765.72 157.011 cv
cp
f
759.466 148.083 mo
759.436 148.083 759.391 148.097 759.319 148.154 cv
759.19 148.257 759.125 148.39 759.115 148.574 cv
759.07 149.383 760.02 150.701 760.831 151.652 cv
760.498 149.912 759.974 148.281 759.507 148.092 cv
759.497 148.088 759.484 148.083 759.466 148.083 cv
cp
761.402 153.201 mo
761.306 153.201 761.21 153.163 761.139 153.092 cv
760.845 152.801 758.274 150.202 758.366 148.533 cv
758.388 148.137 758.556 147.802 758.853 147.567 cv
759.146 147.333 759.475 147.271 759.787 147.397 cv
761.03 147.897 761.622 151.641 761.774 152.776 cv
761.795 152.935 761.713 153.09 761.569 153.162 cv
761.517 153.188 761.459 153.201 761.402 153.201 cv
cp
f
781.475 314.637 mo
781.303 314.637 781.147 314.519 781.108 314.344 cv
775.224 288.06 775.968 209.063 776.022 204.015 cv
766.881 199.948 li
766.691 199.863 766.606 199.642 766.69 199.453 cv
766.775 199.264 766.994 199.178 767.186 199.262 cv
776.553 203.43 li
776.689 203.491 776.777 203.627 776.775 203.777 cv
776.765 204.608 775.81 287.245 781.841 314.18 cv
781.886 314.382 781.759 314.582 781.557 314.628 cv
781.529 314.634 781.501 314.637 781.475 314.637 cv
cp
.25098 .313726 .498039 rgb
f
810.256 306.554 mo
797.753 306.554 786.361 304.617 786.189 304.587 cv
785.985 304.552 785.849 304.357 785.885 304.153 cv
785.92 303.951 786.098 303.808 786.318 303.849 cv
786.574 303.893 812.079 308.227 828.536 303.855 cv
828.74 303.801 828.941 303.922 828.995 304.121 cv
829.049 304.321 828.93 304.527 828.729 304.58 cv
823.156 306.061 816.563 306.554 810.256 306.554 cv
cp
f
794.96 203.332 mo
794.96 203.332 793.308 228.884 794.558 230.218 cv
795.809 231.551 802.045 231.995 802.045 231.995 cv
805.603 218.884 li
798.03 199.605 li
794.96 203.332 li
cp
.556863 .396078 .490196 rgb
f
772.6 305.289 mo
763.959 305.289 754.62 303.088 754.499 303.059 cv
754.297 303.011 754.173 302.809 754.222 302.607 cv
754.27 302.406 754.469 302.274 754.673 302.33 cv
754.829 302.367 770.367 306.029 779.725 303.853 cv
779.932 303.804 780.128 303.933 780.175 304.133 cv
780.222 304.335 780.097 304.536 779.895 304.583 cv
777.702 305.093 775.182 305.289 772.6 305.289 cv
cp
.25098 .313726 .498039 rgb
f
794.957 199.662 mo
794.957 199.662 797.142 217.551 798.253 217.551 cv
799.364 217.551 836.92 210.662 837.809 209.772 cv
838.697 208.884 835.586 190.439 834.03 189.995 cv
832.475 189.551 797.364 195.995 797.364 195.995 cv
794.957 199.662 li
cp
.639216 .482353 .564706 rgb
f
835.364 207.995 mo
835.364 207.995 838.789 223.551 837.965 224.218 cv
837.142 224.884 803.614 231.995 802.045 231.995 cv
800.475 231.995 798.03 212.662 798.03 212.662 cv
835.364 207.995 li
cp
f
807.224 216.395 mo
807.049 216.395 806.892 216.271 806.856 216.094 cv
806.815 215.891 806.946 215.692 807.149 215.652 cv
834.845 210.072 li
835.052 210.023 835.246 210.162 835.286 210.365 cv
835.327 210.568 835.196 210.767 834.993 210.807 cv
807.298 216.387 li
807.272 216.393 807.248 216.395 807.224 216.395 cv
cp
1 1 1 rgb
f
799.313 198.279 mo
798.551 198.279 797.93 198.899 797.93 199.662 cv
797.93 200.424 798.551 201.045 799.313 201.045 cv
800.076 201.045 800.696 200.424 800.696 199.662 cv
800.696 198.899 800.076 198.279 799.313 198.279 cv
cp
799.313 201.795 mo
798.137 201.795 797.18 200.838 797.18 199.662 cv
797.18 198.485 798.137 197.529 799.313 197.529 cv
800.489 197.529 801.446 198.485 801.446 199.662 cv
801.446 200.838 800.489 201.795 799.313 201.795 cv
cp
f
827.359 358.662 mo
827.359 361.552 825.59 365.552 819.359 366.882 cv
813.14 368.222 780.6 366.882 779.59 365.771 cv
779.05 365.191 778.71 362.832 778.51 360.712 cv
778.29 358.462 778.85 356.191 780.09 354.302 cv
780.09 354.302 782.17 357.622 802.05 358.312 cv
814.8 358.752 822.8 356.972 826.89 355.642 cv
827.189 357.092 827.359 358.172 827.359 358.662 cv
cp
.968627 .701961 .411765 rgb
f
810.06 346.33 mo
810.025 346.33 809.99 346.325 809.955 346.315 cv
802.805 344.237 794.204 346.298 794.118 346.319 cv
793.919 346.362 793.714 346.246 793.665 346.044 cv
793.616 345.843 793.739 345.64 793.94 345.591 cv
794.028 345.568 802.819 343.462 810.164 345.595 cv
810.363 345.652 810.478 345.86 810.42 346.06 cv
810.372 346.224 810.223 346.33 810.06 346.33 cv
cp
1 1 1 rgb
f
811.296 341.684 mo
811.262 341.684 811.227 341.679 811.191 341.669 cv
804.041 339.59 795.439 341.652 795.354 341.673 cv
795.154 341.717 794.949 341.599 794.9 341.397 cv
794.852 341.196 794.975 340.993 795.176 340.944 cv
795.265 340.923 804.057 338.814 811.4 340.948 cv
811.6 341.006 811.714 341.214 811.656 341.413 cv
811.608 341.577 811.459 341.684 811.296 341.684 cv
cp
f
761.951 341.703 mo
749.221 341.703 li
749.014 341.703 748.846 341.535 748.846 341.328 cv
748.846 341.121 749.014 340.953 749.221 340.953 cv
761.951 340.953 li
762.158 340.953 762.326 341.121 762.326 341.328 cv
762.326 341.535 762.158 341.703 761.951 341.703 cv
cp
f
765.72 337.037 mo
765.682 337.035 758.7 336.313 758.7 336.313 cv
758.494 336.292 758.344 336.107 758.365 335.902 cv
758.386 335.696 758.574 335.555 758.776 335.567 cv
765.758 336.289 li
765.964 336.311 766.114 336.495 766.093 336.7 cv
766.073 336.894 765.91 337.037 765.72 337.037 cv
cp
f
654.959 322.1 mo
654.959 322.1 702.517 310.944 708.06 274.995 cv
714.879 230.773 702.796 209.106 702.796 209.106 cv
671.726 246.187 li
662.402 290.995 li
650.115 299.884 li
643.278 314.373 li
654.959 322.1 li
cp
.607843 .34902 .305882 rgb
f
629.434 296.091 mo
629.544 294.34 631.098 292.981 632.974 293.004 cv
640.383 293.094 657.003 292.386 656.986 293.737 cv
656.965 295.462 652.028 312.716 652.028 312.716 cv
652.028 312.716 662.289 313.336 660.357 320.457 cv
658.876 325.921 652.269 332.192 649.274 334.815 cv
648.324 335.647 647.656 336.711 647.345 337.895 cv
646.006 342.985 641.643 356.981 634.104 357.09 cv
624.887 357.223 625.986 353.54 626.007 351.815 cv
626.025 350.335 628.682 308.04 629.434 296.091 cv
cp
.639216 .482353 .564706 rgb
f
704.757 205.788 mo
704.757 205.788 729.032 209.782 730.021 189.25 cv
730.971 169.55 721.715 163.213 721.715 163.213 cv
704.533 189.768 li
704.757 205.788 li
cp
.25098 .313726 .498039 rgb
f
687.699 246.187 mo
687.699 246.187 684.976 332.328 681.323 341.439 cv
677.671 350.551 657.712 341.439 657.712 341.439 cv
652.997 248.099 li
687.699 246.187 li
cp
.698039 .403922 .337255 rgb
f
707.551 187.414 mo
707.551 187.414 723.757 190.1 728.993 171.152 cv
734.229 152.204 708.348 128.111 708.348 128.111 cv
707.551 187.414 li
cp
.968627 .701961 .411765 rgb
f
708.06 191.3 mo
708.06 191.3 711.438 209.63 711.438 223.297 cv
711.438 236.964 713.104 251.964 711.438 253.297 cv
709.771 254.63 693.227 259.106 673.226 258.106 cv
653.226 257.106 647.226 252.62 647.56 251.03 cv
647.893 249.439 650.226 248.099 650.226 248.099 cv
650.226 248.099 648.893 208.59 654.226 198.015 cv
659.56 187.44 682.296 185.131 682.296 185.131 cv
706.747 185.131 li
708.06 191.3 li
cp
.407843 .462745 .666667 rgb
f
690.023 239.37 mo
689.796 239.358 689.638 239.181 689.649 238.975 cv
690.844 217.642 li
690.854 217.435 691.042 217.265 691.238 217.288 cv
691.445 217.299 691.604 217.477 691.592 217.683 cv
690.397 239.016 li
690.387 239.216 690.222 239.37 690.023 239.37 cv
cp
1 1 1 rgb
f
673.747 189.729 mo
673.747 189.729 692.78 193.974 702.313 189.331 cv
711.847 184.687 706.474 157.991 706.474 157.991 cv
706.474 157.991 701.295 121.428 693.867 120.648 cv
686.438 119.869 679.882 120.854 679.882 120.854 cv
670.718 151.925 li
673.747 189.729 li
cp
.407843 .713726 .847059 rgb
f
690.772 119.651 mo
690.772 119.651 692.018 120.014 693.867 120.648 cv
681.087 121.447 li
681.087 121.447 679.367 139.323 678.743 159.824 cv
678.306 174.351 678.749 187.456 679.059 193.853 cv
661.021 193.415 li
661.021 193.415 652.417 134.509 659.219 128.193 cv
666.021 121.877 682.884 119.762 682.884 119.762 cv
690.772 119.651 li
cp
.968627 .701961 .411765 rgb
f
710.372 194.615 mo
700.237 194.367 li
700.809 186.578 701.8 168.022 700.021 149.515 cv
697.752 125.975 694.111 120.955 693.887 120.658 cv
698.761 122.32 707.802 125.874 709.465 129.711 cv
711.76 135.02 710.372 194.615 710.372 194.615 cv
cp
f
703.641 177.617 mo
720.583 195.226 li
698.375 224.856 li
677.109 208.941 li
703.641 177.617 li
cp
.25098 .313726 .498039 rgb
f
706.439 180.58 mo
723.382 198.189 li
701.175 227.819 li
679.908 211.905 li
706.439 180.58 li
cp
1 1 1 rgb
f
659.706 365.657 mo
657.95 365.641 656.512 364.161 656.434 362.287 cv
656.129 354.884 654.538 338.324 655.888 338.27 cv
657.611 338.199 675.104 342.21 675.104 342.21 cv
675.104 342.21 675.176 331.932 682.39 333.48 cv
687.926 334.669 694.54 340.934 697.318 343.784 cv
698.2 344.688 699.297 345.299 700.496 345.547 cv
705.65 346.612 719.859 350.225 720.369 357.747 cv
720.991 366.943 717.256 366.043 715.533 366.113 cv
714.054 366.174 671.677 365.772 659.706 365.657 cv
cp
.639216 .482353 .564706 rgb
f
677.479 185.191 mo
677.479 185.191 695.49 188.169 699.049 191.447 cv
702.607 194.724 693.976 207.299 691.757 209.339 cv
689.539 211.378 673.731 201.027 673.731 201.027 cv
671.444 191.993 li
677.479 185.191 li
cp
.698039 .403922 .337255 rgb
f
699.049 191.447 mo
699.049 191.447 706.576 202.206 705.332 206.646 cv
704.089 211.087 695.02 197.36 695.02 197.36 cv
699.049 191.447 li
cp
f
685.789 206.354 mo
685.789 206.354 676.463 205.036 678.303 208.417 cv
680.143 211.798 690.108 211.21 691.757 209.339 cv
693.406 207.467 688.203 202.358 688.203 202.358 cv
685.789 206.354 li
cp
f
684.582 207.373 mo
684.538 207.373 684.492 207.365 684.448 207.349 cv
681.769 206.329 li
681.641 206.28 681.55 206.165 681.531 206.029 cv
681.512 205.894 681.569 205.759 681.68 205.677 cv
683.815 204.096 li
683.979 203.977 684.215 204.008 684.34 204.175 cv
684.463 204.341 684.428 204.575 684.261 204.699 cv
682.677 205.872 li
684.716 206.647 li
684.909 206.722 685.006 206.938 684.933 207.132 cv
684.876 207.281 684.733 207.373 684.582 207.373 cv
cp
0 0 0 rgb
f
697.966 200.82 mo
697.815 200.82 697.674 200.729 697.616 200.581 cv
696.995 198.974 695.794 196.242 695.212 195.747 cv
695.055 195.612 695.035 195.376 695.169 195.218 cv
695.303 195.06 695.539 195.041 695.698 195.175 cv
696.616 195.956 698.145 199.867 698.315 200.31 cv
698.391 200.503 698.294 200.721 698.101 200.795 cv
698.057 200.813 698.011 200.82 697.966 200.82 cv
cp
f
695.117 205.366 mo
694.98 205.366 694.849 205.291 694.782 205.16 cv
691.546 198.769 li
691.453 198.584 691.526 198.358 691.712 198.265 cv
691.894 198.173 692.122 198.245 692.216 198.43 cv
695.452 204.822 li
695.545 205.007 695.472 205.232 695.286 205.326 cv
695.232 205.354 695.175 205.366 695.117 205.366 cv
cp
f
680.738 112.512 mo
681.126 122.432 li
681.126 122.432 683.026 125.214 688.848 125.458 cv
693.185 125.641 694.467 123.367 694.467 123.367 cv
693.081 114.728 li
682.512 112.832 li
680.738 112.512 li
cp
.698039 .403922 .337255 rgb
f
680.729 111.906 mo
680.766 112.176 680.881 112.492 681.056 112.852 cv
683.469 117.721 691.36 119.478 693.866 119.604 cv
693.081 114.728 li
680.729 111.906 li
cp
0 0 0 rgb
f
694.409 92.0293 mo
694.409 92.0293 700.102 104.264 698.319 111.254 cv
696.537 118.245 690.184 117.301 686.366 116.048 cv
682.549 114.794 680.737 112.514 680.737 112.514 cv
680.737 112.514 677.229 113.796 674.786 110.563 cv
672.343 107.331 673.71 103.521 675.709 102.607 cv
677.708 101.694 680.144 103.096 680.144 103.096 cv
678.177 99.5474 li
678.177 99.5474 685.665 81.104 694.409 92.0293 cv
cp
.698039 .403922 .337255 rgb
f
694.467 107.133 mo
694.351 107.133 694.236 107.079 694.163 106.978 cv
694.041 106.81 694.079 106.575 694.247 106.454 cv
694.938 105.957 695.308 105.366 695.349 104.698 cv
695.443 103.131 693.783 101.58 693.767 101.564 cv
693.614 101.424 693.604 101.187 693.745 101.034 cv
693.888 100.882 694.124 100.873 694.274 101.013 cv
694.354 101.086 696.213 102.826 696.097 104.744 cv
696.042 105.647 695.567 106.427 694.687 107.063 cv
694.62 107.11 694.543 107.133 694.467 107.133 cv
cp
0 0 0 rgb
f
679.709 108.884 mo
679.612 108.884 679.514 108.847 679.441 108.771 cv
676.023 105.269 li
675.878 105.121 675.881 104.883 676.03 104.738 cv
676.176 104.594 676.416 104.596 676.56 104.745 cv
679.978 108.248 li
680.123 108.396 680.12 108.633 679.971 108.778 cv
679.899 108.849 679.804 108.884 679.709 108.884 cv
cp
f
676.138 107.99 mo
675.958 107.99 675.799 107.861 675.768 107.678 cv
675.734 107.473 675.872 107.28 676.076 107.246 cv
678.393 106.855 li
678.607 106.819 678.792 106.958 678.826 107.162 cv
678.86 107.367 678.722 107.56 678.518 107.594 cv
676.201 107.985 li
676.179 107.989 676.159 107.99 676.138 107.99 cv
cp
f
696.44 97.5718 mo
696.421 97.5718 696.401 97.5703 696.382 97.5669 cv
694.181 97.2158 li
693.976 97.1836 693.836 96.9912 693.869 96.7866 cv
693.902 96.5825 694.1 96.4429 694.298 96.4756 cv
696.499 96.8267 li
696.704 96.8589 696.844 97.0513 696.811 97.2559 cv
696.781 97.4404 696.622 97.5718 696.44 97.5718 cv
cp
f
687.334 99.1411 mo
687.199 99.1411 687.068 99.0679 687.002 98.9399 cv
686.905 98.7568 686.977 98.5303 687.16 98.4341 cv
690.735 96.5605 li
690.92 96.4634 691.146 96.5347 691.241 96.7188 cv
691.338 96.9019 691.267 97.1284 691.083 97.2246 cv
687.508 99.0981 li
687.452 99.1274 687.393 99.1411 687.334 99.1411 cv
cp
f
696.512 102.647 mo
696.354 102.647 696.206 102.546 696.155 102.387 cv
695.438 100.165 li
695.399 100.045 695.423 99.9146 695.501 99.8164 cv
696.175 98.9683 li
696.305 98.8066 696.54 98.7788 696.702 98.9082 cv
696.864 99.0371 696.892 99.2729 696.763 99.4351 cv
696.214 100.126 li
696.868 102.157 li
696.933 102.354 696.824 102.565 696.627 102.629 cv
696.589 102.641 696.55 102.647 696.512 102.647 cv
cp
f
690.274 103.334 mo
690.116 103.334 689.969 103.233 689.918 103.074 cv
689.201 100.852 li
689.161 100.729 689.188 100.596 689.27 100.497 cv
690.2 99.3789 li
690.333 99.2183 690.568 99.1968 690.729 99.3306 cv
690.888 99.4629 690.909 99.6992 690.776 99.8584 cv
689.978 100.818 li
690.631 102.844 li
690.695 103.041 690.587 103.252 690.39 103.316 cv
690.352 103.328 690.313 103.334 690.274 103.334 cv
cp
f
692.453 111.014 mo
690.929 111.014 689.234 109.378 689.012 109.157 cv
688.865 109.011 688.864 108.773 689.011 108.626 cv
689.156 108.481 689.394 108.479 689.541 108.625 cv
690.157 109.237 691.972 110.703 692.975 110.136 cv
693.155 110.033 693.383 110.097 693.485 110.277 cv
693.588 110.458 693.524 110.686 693.344 110.788 cv
693.063 110.947 692.762 111.014 692.453 111.014 cv
cp
f
662.491 125.845 mo
662.491 125.845 633.607 144.188 633.835 172.482 cv
634.064 200.775 672.353 209.241 672.353 209.241 cv
684.128 180.096 li
664.454 168.847 li
662.491 125.845 li
cp
.968627 .701961 .411765 rgb
f
696.783 121.703 mo
696.783 121.703 702.252 130.252 705.421 142.324 cv
708.59 154.396 710.78 163.678 710.78 163.678 cv
710.78 163.678 713.989 138.665 709.465 129.711 cv
707.248 125.324 696.783 121.703 696.783 121.703 cv
cp
.25098 .313726 .498039 rgb
f
650.226 248.474 mo
650.056 248.474 649.903 248.358 649.862 248.186 cv
649.813 247.984 649.937 247.782 650.139 247.734 cv
653.265 246.987 li
653.472 246.935 653.668 247.063 653.716 247.265 cv
653.765 247.466 653.641 247.668 653.439 247.716 cv
650.313 248.463 li
650.284 248.471 650.254 248.474 650.226 248.474 cv
cp
1 1 1 rgb
f
683.486 345.229 mo
683.449 345.229 683.411 345.223 683.374 345.211 cv
674.992 342.567 li
674.793 342.505 674.684 342.295 674.747 342.098 cv
674.808 341.9 675.019 341.791 675.216 341.853 cv
683.599 344.496 li
683.797 344.559 683.906 344.769 683.844 344.966 cv
683.794 345.126 683.646 345.229 683.486 345.229 cv
cp
.968627 .701961 .411765 rgb
f
647.546 320.653 mo
647.481 320.653 647.416 320.637 647.355 320.601 cv
647.177 320.495 647.119 320.266 647.224 320.087 cv
651.707 312.524 li
651.811 312.347 652.042 312.287 652.22 312.394 cv
652.398 312.499 652.457 312.729 652.351 312.907 cv
647.869 320.47 li
647.799 320.588 647.674 320.653 647.546 320.653 cv
cp
f
678.638 177.332 mo
678.559 177.332 678.479 177.307 678.411 177.255 cv
678.289 177.162 666.109 167.91 661.463 166.267 cv
661.268 166.198 661.166 165.983 661.235 165.788 cv
661.304 165.592 661.522 165.493 661.713 165.56 cv
666.469 167.242 678.362 176.275 678.866 176.659 cv
679.03 176.784 679.062 177.02 678.937 177.184 cv
678.863 177.281 678.75 177.332 678.638 177.332 cv
cp
.407843 .462745 .666667 rgb
f
665.228 160.988 mo
665.083 160.988 664.907 161.025 664.692 161.128 cv
664.277 161.327 664.041 161.62 663.969 162.023 cv
663.687 163.612 665.878 166.484 667.283 168.067 cv
667.242 165.806 666.913 161.926 665.665 161.121 cv
665.564 161.056 665.424 160.988 665.228 160.988 cv
cp
667.658 169.399 mo
667.559 169.399 667.461 169.359 667.389 169.286 cv
667.201 169.092 662.766 164.514 663.23 161.892 cv
663.345 161.243 663.728 160.758 664.368 160.452 cv
665.149 160.078 665.725 160.267 666.072 160.491 cv
668.132 161.821 668.049 168.298 668.033 169.032 cv
668.029 169.183 667.936 169.317 667.795 169.373 cv
667.75 169.391 667.704 169.399 667.658 169.399 cv
cp
f
710.655 135.586 mo
710.655 135.586 703.561 144.818 703.869 148.481 cv
704.177 152.144 706.828 150.293 706.828 150.293 cv
706.828 150.293 705.229 154.396 706.897 155.256 cv
708.566 156.116 709.813 153.431 709.813 153.431 cv
709.813 153.431 709.801 156.972 711.802 157.046 cv
713.803 157.121 721.951 147.546 722.104 144.718 cv
722.258 141.89 718.712 142.624 718.712 142.624 cv
718.712 142.624 719.583 138.208 717.971 137.274 cv
716.357 136.34 713.989 138.665 713.989 138.665 cv
713.989 138.665 714.233 132.702 710.655 135.586 cv
cp
.698039 .403922 .337255 rgb
f
711.851 154.206 mo
711.851 154.206 710.129 163.66 715.457 163.612 cv
726.608 163.512 721.991 146.207 721.991 146.207 cv
711.851 154.206 li
cp
f
713.487 182.816 mo
713.379 182.816 713.272 182.77 713.198 182.68 cv
709.997 178.796 710.388 164.283 710.405 163.667 cv
710.411 163.46 710.582 163.299 710.791 163.303 cv
710.998 163.309 711.161 163.482 711.155 163.689 cv
711.15 163.837 710.754 178.536 713.776 182.203 cv
713.908 182.363 713.886 182.599 713.726 182.731 cv
713.656 182.789 713.571 182.816 713.487 182.816 cv
cp
.407843 .462745 .666667 rgb
f
706.827 150.668 mo
706.764 150.668 706.7 150.653 706.642 150.619 cv
706.462 150.517 706.398 150.288 706.501 150.108 cv
712.563 139.473 li
712.667 139.292 712.896 139.23 713.075 139.333 cv
713.255 139.436 713.318 139.665 713.216 139.844 cv
707.153 150.479 li
707.084 150.601 706.957 150.668 706.827 150.668 cv
cp
0 0 0 rgb
f
710.824 153.813 mo
710.757 153.813 710.689 153.796 710.629 153.758 cv
710.452 153.65 710.396 153.419 710.504 153.243 cv
716.375 143.642 li
716.483 143.464 716.716 143.409 716.891 143.518 cv
717.067 143.625 717.123 143.856 717.016 144.033 cv
711.145 153.634 li
711.073 153.75 710.95 153.813 710.824 153.813 cv
cp
f
689.726 125.875 mo
689.436 125.875 689.133 125.861 688.813 125.832 cv
684.934 125.475 681.075 122.853 680.914 122.741 cv
680.743 122.624 680.699 122.391 680.816 122.22 cv
680.934 122.049 681.167 122.006 681.337 122.123 cv
681.375 122.149 685.2 124.746 688.882 125.085 cv
692.756 125.443 694.088 123.271 694.143 123.179 cv
694.247 123.001 694.478 122.939 694.654 123.044 cv
694.833 123.147 694.895 123.375 694.792 123.554 cv
694.733 123.656 693.414 125.875 689.726 125.875 cv
cp
.407843 .462745 .666667 rgb
f
328.41 329.132 mo
328.41 339.146 li
345.042 347.922 li
354.016 341.628 li
354.016 327.381 li
328.41 329.132 li
cp
.866667 .521569 .478431 rgb
f
367.146 324.947 mo
367.146 334.962 li
383.779 343.737 li
392.752 337.443 li
392.752 323.196 li
367.146 324.947 li
cp
f
369.646 360.978 mo
367.917 360.961 366.5 359.504 366.424 357.658 cv
366.123 350.366 364.556 334.059 365.886 334.004 cv
367.583 333.935 384.81 337.886 384.81 337.886 cv
384.81 337.886 384.881 327.763 391.986 329.288 cv
397.438 330.459 403.952 336.628 406.688 339.436 cv
407.556 340.326 408.637 340.928 409.817 341.171 cv
414.894 342.221 428.887 345.778 429.389 353.187 cv
430.002 362.243 426.324 361.356 424.626 361.426 cv
423.17 361.485 381.436 361.09 369.646 360.978 cv
cp
.321569 .380392 .6 rgb
f
399.318 120.729 mo
399.318 120.729 428.645 151.763 421.203 172.959 cv
415.709 188.609 400.076 189.498 391.38 186.218 cv
382.685 182.938 385.658 140.042 385.658 140.042 cv
399.318 120.729 li
cp
.25098 .313726 .498039 rgb
f
397.818 186.001 mo
397.818 186.001 417.702 240.235 417.702 257.108 cv
417.702 273.98 401.506 331.608 401.506 331.608 cv
365.06 331.608 li
378.496 199.571 li
397.818 186.001 li
cp
.968627 .701961 .411765 rgb
f
537.158 93.2559 mo
537.158 93.2559 549.393 89.9639 558.493 101.109 cv
567.593 112.253 561.938 125.973 547.521 125.579 cv
533.104 125.185 529.751 110.451 529.751 110.451 cv
537.158 93.2559 li
cp
0 0 0 rgb
f
347.231 182.956 mo
347.231 182.956 339.79 203.947 339.79 216.641 cv
339.79 229.335 340.228 259.974 339.79 267.415 cv
339.353 274.856 324.47 331.608 324.47 331.608 cv
368.443 333.467 li
368.443 333.467 382.755 277.92 384.252 265.227 cv
385.749 252.533 382.567 207.449 382.567 207.449 cv
397.818 190.998 li
368.443 180.75 li
347.231 182.956 li
cp
.968627 .701961 .411765 rgb
f
544.363 320.812 mo
548.774 339.325 li
572.444 331.337 li
568.697 312.474 li
544.363 320.812 li
cp
1 .694118 .572549 rgb
f
492.207 318.045 mo
487.149 336.393 li
511.739 340.801 li
517.547 322.468 li
492.207 318.045 li
cp
f
505.781 180.902 mo
479.501 316.093 li
520.509 328.807 li
527.655 300.088 li
535.488 327.981 li
578.039 316.092 li
578.039 316.092 561.508 222.031 557.762 208.079 cv
554.016 194.126 551.533 178.496 551.533 178.496 cv
505.781 180.902 li
cp
.639216 .482353 .564706 rgb
f
374.139 115.836 mo
374.139 115.836 359.049 115.8 353.359 122.231 cv
347.669 128.662 340.767 190.405 343.415 193.552 cv
346.258 196.932 384.874 197.11 393.19 195.714 cv
401.506 194.318 401.506 194.318 401.506 194.318 cv
401.506 194.318 403.368 123.04 399.318 120.729 cv
394.165 117.787 374.139 115.836 374.139 115.836 cv
cp
.25098 .313726 .498039 rgb
f
371.086 185.126 mo
371.086 185.126 371.086 217.954 369.773 219.486 cv
368.459 221.019 360.221 224.813 360.221 224.813 cv
359.924 208.324 li
363.208 184.47 li
371.086 185.126 li
cp
.490196 .639216 .858824 rgb
f
528.903 191.771 mo
528.903 191.771 536.246 224.916 538.507 225.762 cv
540.767 226.607 569.984 219.189 572.344 217.96 cv
574.704 216.729 566.371 182.695 566.371 182.695 cv
528.903 191.771 li
cp
.937255 .643137 .34902 rgb
f
533.401 191.496 mo
533.401 191.496 540.727 224.104 542.986 224.936 cv
545.247 225.767 574.467 218.452 576.827 217.24 cv
579.188 216.029 570.873 182.545 570.873 182.545 cv
533.401 191.496 li
cp
.968627 .701961 .411765 rgb
f
358.611 172.433 mo
358.611 172.433 384.655 147.921 387.281 133.477 cv
389.907 119.033 395.16 159.739 395.16 159.739 cv
364.301 181.406 li
358.611 172.433 li
cp
.572549 .705882 .917647 rgb
f
480.09 326.038 mo
479.878 326.153 li
479.886 326.114 479.954 326.072 480.09 326.038 cv
cp
.996078 .988235 .898039 rgb
f
518.503 354.195 mo
518.355 358.335 517.837 361.348 516.676 361.583 cv
511.535 362.618 460.417 364.994 457.772 364.326 cv
455.127 363.647 447.042 363.259 447.09 358.229 cv
447.107 357.256 447.489 356.34 448.1 355.514 cv
450.626 352.041 457.077 349.902 457.077 349.902 cv
485.756 332.813 li
485.756 332.813 485.867 331.425 485.993 329.889 cv
486.155 327.987 488.19 326.869 489.87 327.756 cv
502.793 334.525 li
514.972 329.21 li
515.923 328.589 517.191 329.195 517.297 330.331 cv
517.793 335.51 518.755 346.703 518.503 354.195 cv
cp
.25098 .313726 .498039 rgb
f
584.807 349.537 mo
583.368 350.547 577.368 351.453 569.998 352.209 cv
555.277 353.72 535.135 354.645 535.135 354.645 cv
544.915 335.659 li
544.915 335.659 544.449 334.349 543.949 332.893 cv
543.329 331.097 544.75 329.242 546.641 329.376 cv
561.199 330.365 li
570.194 320.599 li
570.821 319.645 572.227 319.687 572.78 320.68 cv
575.098 324.815 579.772 333.362 582.687 340.11 cv
584.75 344.874 585.93 348.743 584.807 349.537 cv
cp
f
363.191 95.999 mo
363.191 95.999 363.551 102.491 366.474 102.79 cv
369.396 103.087 373.696 99.3945 373.696 99.3945 cv
371.681 92.0879 li
363.191 95.999 li
cp
0 0 0 rgb
f
372.331 108.191 mo
372.421 118.375 li
372.421 118.375 374.283 121.286 380.245 121.717 cv
384.687 122.038 386.236 121.021 386.236 121.021 cv
385.572 115.869 li
384.917 110.845 li
374.139 108.574 li
372.331 108.191 li
cp
.866667 .521569 .478431 rgb
f
374.139 108.574 mo
374.167 108.852 374.275 109.179 374.443 109.554 cv
376.768 114.621 383.007 115.662 385.572 115.869 cv
384.917 110.845 li
374.139 108.574 li
cp
0 0 0 rgb
f
386.981 87.6128 mo
386.981 87.6128 392.439 100.333 390.396 107.446 cv
388.352 114.558 381.867 113.394 377.992 111.991 cv
374.116 110.587 372.329 108.193 372.329 108.193 cv
372.329 108.193 368.692 109.399 366.288 106.009 cv
363.883 102.619 365.403 98.7544 367.48 97.8799 cv
369.559 97.0059 372.012 98.5181 372.012 98.5181 cv
370.105 94.8193 li
370.105 94.8193 378.354 76.1401 386.981 87.6128 cv
cp
.866667 .521569 .478431 rgb
f
371.681 103.989 mo
371.606 103.989 371.531 103.966 371.465 103.92 cv
366.848 100.661 li
366.679 100.542 366.638 100.308 366.758 100.139 cv
366.877 99.9697 367.11 99.9292 367.28 100.049 cv
371.897 103.308 li
372.066 103.427 372.107 103.661 371.987 103.83 cv
371.915 103.934 371.798 103.989 371.681 103.989 cv
cp
0 0 0 rgb
f
367.499 103.969 mo
367.333 103.969 367.182 103.859 367.137 103.691 cv
367.083 103.491 367.202 103.285 367.402 103.232 cv
370.417 102.427 li
370.62 102.374 370.822 102.493 370.875 102.693 cv
370.929 102.893 370.81 103.099 370.61 103.152 cv
367.596 103.957 li
367.563 103.965 367.531 103.969 367.499 103.969 cv
cp
f
378.496 93.0288 mo
378.417 93.0288 378.337 93.0039 378.27 92.9526 cv
378.104 92.8276 378.072 92.5923 378.197 92.4272 cv
379.549 90.644 381.376 90.9497 382.152 91.3618 cv
382.335 91.4585 382.404 91.6841 382.309 91.8667 cv
382.213 92.0498 381.987 92.1206 381.803 92.0254 cv
381.733 91.9897 380.092 91.1675 378.795 92.8804 cv
378.721 92.9775 378.609 93.0288 378.496 93.0288 cv
cp
f
388.369 92.4629 mo
388.286 92.4629 388.203 92.4355 388.133 92.3789 cv
387.035 91.4888 385.897 92.1401 385.85 92.1689 cv
385.67 92.2729 385.441 92.2153 385.336 92.0381 cv
385.231 91.8604 385.288 91.6318 385.464 91.5254 cv
385.53 91.4854 387.092 90.5688 388.605 91.7969 cv
388.766 91.9272 388.791 92.1631 388.66 92.3242 cv
388.586 92.4155 388.478 92.4629 388.369 92.4629 cv
cp
f
351.017 185.455 mo
351.017 185.455 334.4 184.59 332.082 186.164 cv
329.763 187.738 324.5 204.448 325.638 206.732 cv
326.776 209.018 326.776 209.018 326.776 209.018 cv
326.776 209.018 322.762 220.995 324.003 221.971 cv
325.244 222.946 356.662 225.412 360.221 224.813 cv
363.781 224.215 368.54 185.952 368.54 185.952 cv
351.017 185.455 li
cp
.572549 .705882 .917647 rgb
f
386.583 103.292 mo
386.551 103.292 386.518 103.288 386.485 103.279 cv
386.285 103.226 386.167 103.02 386.22 102.82 cv
386.873 100.392 385.174 96.7646 385.157 96.7285 cv
385.068 96.5415 385.148 96.3179 385.335 96.229 cv
385.522 96.1396 385.747 96.2197 385.835 96.4072 cv
385.91 96.5659 387.667 100.323 386.945 103.014 cv
386.9 103.182 386.748 103.292 386.583 103.292 cv
cp
0 0 0 rgb
f
388.367 97.356 mo
388.203 97.356 388.053 97.248 388.006 97.083 cv
387.348 94.7529 li
387.292 94.5537 387.407 94.3462 387.606 94.29 cv
387.807 94.2349 388.013 94.3501 388.069 94.5488 cv
388.728 96.8789 li
388.784 97.0781 388.668 97.2856 388.469 97.3418 cv
388.435 97.3516 388.4 97.356 388.367 97.356 cv
cp
f
381.923 97.5391 mo
381.76 97.5391 381.609 97.4312 381.563 97.2661 cv
380.904 94.9365 li
380.848 94.7373 380.964 94.5298 381.163 94.4736 cv
381.366 94.418 381.57 94.5337 381.626 94.7324 cv
382.284 97.062 li
382.34 97.2612 382.225 97.4688 382.025 97.5249 cv
381.991 97.5347 381.957 97.5391 381.923 97.5391 cv
cp
f
387.708 89.4595 mo
387.708 89.4595 386.955 88.4429 384.415 88.4482 cv
381.874 88.4536 380.407 90.2559 380.407 90.2559 cv
380.407 90.2559 380.194 94.8613 376.76 97.1641 cv
373.326 99.4673 372.012 98.5181 372.012 98.5181 cv
369.499 97.6475 li
367.628 94.0024 li
374.807 86.1265 li
383.435 82.4438 li
387.708 87.1963 li
387.708 89.4595 li
cp
f
384.055 106.25 mo
383.383 106.25 381.459 106.075 380.545 104.169 cv
380.455 103.983 380.534 103.759 380.721 103.669 cv
380.909 103.579 381.131 103.659 381.221 103.845 cv
382.102 105.682 384.128 105.502 384.214 105.495 cv
384.419 105.474 384.604 105.624 384.625 105.83 cv
384.646 106.035 384.497 106.219 384.292 106.241 cv
384.287 106.241 384.2 106.25 384.055 106.25 cv
cp
f
330.849 363.617 mo
329.12 363.601 327.704 362.144 327.627 360.298 cv
327.327 353.006 325.759 336.698 327.09 336.644 cv
328.787 336.574 346.014 340.525 346.014 340.525 cv
346.014 340.525 346.085 330.402 353.19 331.928 cv
358.641 333.099 365.155 339.268 367.891 342.075 cv
368.76 342.966 369.84 343.567 371.021 343.812 cv
376.098 344.86 390.091 348.418 390.592 355.826 cv
391.206 364.884 387.527 363.996 385.83 364.065 cv
384.374 364.125 342.639 363.73 330.849 363.617 cv
cp
.360784 .411765 .647059 rgb
f
469.844 161.53 mo
469.844 161.53 456.09 163.861 447.457 162.371 cv
438.823 160.88 436.227 158.423 436.269 157.112 cv
436.312 155.801 441.923 155.529 441.923 155.529 cv
441.923 155.529 433.849 153.905 433.993 151.032 cv
434.136 148.16 441.384 148.798 441.384 148.798 cv
441.384 148.798 435.857 146.449 437.386 144.429 cv
438.915 142.409 452.116 144.703 452.116 144.703 cv
452.116 144.703 446.014 141.427 447.175 139.849 cv
448.336 138.271 458.148 139.245 461.362 141.317 cv
464.576 143.39 468.072 147.642 468.072 147.642 cv
469.844 161.53 li
cp
1 .694118 .572549 rgb
f
462.79 152.931 mo
462.756 152.931 462.721 152.926 462.687 152.916 cv
453.61 150.307 451.831 145.041 451.759 144.817 cv
451.696 144.621 451.804 144.41 452.001 144.347 cv
452.199 144.283 452.409 144.392 452.473 144.588 cv
452.49 144.639 454.233 149.706 462.894 152.195 cv
463.093 152.252 463.208 152.46 463.15 152.659 cv
463.103 152.824 462.953 152.931 462.79 152.931 cv
cp
0 0 0 rgb
f
450.802 159.147 mo
450.608 159.147 450.444 158.997 450.429 158.8 cv
449.328 144.357 li
449.312 144.151 449.467 143.971 449.673 143.955 cv
449.872 143.948 450.06 144.094 450.076 144.301 cv
451.177 158.744 li
451.192 158.95 451.038 159.13 450.831 159.146 cv
450.822 159.146 450.812 159.147 450.802 159.147 cv
cp
f
510.92 123.053 mo
510.92 123.053 496.121 141.129 489.176 142.596 cv
482.232 144.062 466.218 141.554 466.218 141.554 cv
461.92 171.728 li
461.92 171.728 477.413 178.475 493.825 177.297 cv
504.593 176.524 511.049 173.043 511.049 173.043 cv
510.92 123.053 li
cp
.360784 .411765 .647059 rgb
f
489.138 143.758 mo
488.255 146.217 486.998 150.518 487.92 151.767 cv
488.028 151.913 488.227 152.1 488.699 152.064 cv
489.106 152.031 489.413 151.851 489.635 151.514 cv
490.612 150.036 489.787 146.061 489.138 143.758 cv
cp
488.58 152.819 mo
487.912 152.819 487.526 152.497 487.316 152.212 cv
485.806 150.167 488.515 143.239 488.828 142.456 cv
488.887 142.31 489.042 142.228 489.188 142.221 cv
489.345 142.226 489.482 142.328 489.532 142.478 cv
489.627 142.764 491.846 149.528 490.261 151.927 cv
489.908 152.461 489.403 152.759 488.761 152.812 cv
488.698 152.817 488.638 152.819 488.58 152.819 cv
cp
.25098 .313726 .498039 rgb
f
504.309 182.575 mo
504.309 182.575 505.186 130.167 509.794 124.339 cv
514.401 118.512 520.237 118.317 527.653 117.417 cv
535.069 116.515 545.491 117.743 549.255 119.364 cv
553.019 120.985 556.434 181.497 554.305 183.096 cv
552.175 184.694 518.936 189.291 504.309 182.575 cv
cp
.360784 .411765 .647059 rgb
f
505.56 174.615 mo
505.542 174.615 505.523 174.613 505.504 174.611 cv
505.299 174.58 505.158 174.389 505.188 174.184 cv
507.141 161.175 li
506.911 160.476 505.613 156.087 506.757 149.108 cv
508.208 140.252 513.685 133.626 513.741 133.561 cv
513.871 133.402 514.108 133.38 514.268 133.514 cv
514.427 133.646 514.449 133.883 514.316 134.042 cv
514.261 134.106 508.915 140.582 507.497 149.229 cv
506.307 156.49 507.862 160.969 507.878 161.014 cv
507.899 161.072 507.905 161.135 507.896 161.196 cv
505.93 174.295 li
505.902 174.481 505.743 174.615 505.56 174.615 cv
cp
.25098 .313726 .498039 rgb
f
519.248 198.633 mo
528.594 195.393 li
530.131 194.86 530.945 193.183 530.413 191.646 cv
521.653 166.375 li
521.12 164.838 519.442 164.024 517.906 164.557 cv
508.559 167.797 li
507.022 168.33 506.208 170.008 506.741 171.544 cv
515.5 196.815 li
516.033 198.352 517.71 199.166 519.248 198.633 cv
cp
.572549 .705882 .917647 rgb
f
516.852 119.303 mo
516.852 119.303 519.994 161.033 542.995 174.684 cv
565.996 188.334 553.127 167.312 553.127 167.312 cv
553.127 167.312 547.667 167.838 536.423 155.927 cv
525.179 144.016 522.405 118.056 522.405 118.056 cv
516.852 119.303 li
cp
.968627 .701961 .411765 rgb
f
516.321 199.647 mo
525.668 196.407 li
527.205 195.875 528.019 194.197 527.486 192.66 cv
518.727 167.39 li
518.194 165.853 516.516 165.039 514.979 165.572 cv
505.632 168.812 li
504.096 169.344 503.282 171.022 503.814 172.559 cv
512.574 197.829 li
513.106 199.366 514.784 200.18 516.321 199.647 cv
cp
0 0 0 rgb
f
523.781 172.483 mo
524.952 175.859 li
524.952 175.859 516.136 180.041 516.227 181.934 cv
516.317 183.827 519.608 184.954 519.608 184.954 cv
519.608 184.954 519.024 189.055 519.701 190.362 cv
520.377 191.669 522.841 198.11 526.704 198.72 cv
530.567 199.329 543.591 189.272 543.591 189.272 cv
540.71 174.354 li
540.71 174.354 525.398 171.869 523.781 172.483 cv
cp
1 .694118 .572549 rgb
f
521.815 177.799 mo
521.645 177.799 521.492 177.684 521.451 177.512 cv
521.402 177.311 521.526 177.108 521.727 177.06 cv
531.51 174.698 li
531.711 174.651 531.915 174.773 531.962 174.975 cv
532.011 175.176 531.887 175.378 531.686 175.427 cv
521.903 177.789 li
521.874 177.796 521.844 177.799 521.815 177.799 cv
cp
0 0 0 rgb
f
541.209 117.598 mo
541.209 117.598 558.319 117.029 574.391 136.025 cv
589.653 154.063 593.176 174.004 577.263 183.038 cv
561.35 192.071 543.192 194.46 543.192 194.46 cv
536.92 170.893 li
553.61 163.53 li
541.209 117.598 li
cp
.360784 .411765 .647059 rgb
f
539.956 169.929 mo
539.823 169.929 539.693 169.857 539.625 169.731 cv
539.527 169.549 539.595 169.322 539.778 169.224 cv
539.928 169.143 554.941 161.082 565.949 157.581 cv
566.146 157.52 566.357 157.627 566.419 157.824 cv
566.482 158.021 566.373 158.232 566.175 158.295 cv
555.235 161.775 540.283 169.803 540.133 169.884 cv
540.077 169.915 540.016 169.929 539.956 169.929 cv
cp
.25098 .313726 .498039 rgb
f
561.467 152.706 mo
560.569 152.706 559.765 153.001 559.073 153.588 cv
557.051 155.3 556.401 159.04 556.208 160.685 cv
559.334 158.397 563.533 154.751 563.173 153.342 cv
563.072 152.943 562.459 152.792 561.963 152.735 cv
561.795 152.716 561.63 152.706 561.467 152.706 cv
cp
555.758 161.844 mo
555.696 161.844 555.633 161.829 555.578 161.797 cv
555.452 161.729 555.376 161.594 555.383 161.45 cv
555.396 161.207 555.719 155.447 558.586 153.017 cv
559.569 152.185 560.736 151.838 562.049 151.99 cv
563.111 152.111 563.734 152.504 563.901 153.157 cv
564.526 155.61 557.408 160.767 555.974 161.776 cv
555.91 161.821 555.834 161.844 555.758 161.844 cv
cp
f
518.791 102.428 mo
518.791 102.428 515.313 98.73 516.182 92.8784 cv
516.771 88.9111 518.506 87.5977 518.506 87.5977 cv
518.506 87.5977 515.721 82.2515 523.707 82.4248 cv
531.692 82.5986 538.234 81.917 541.792 88.7856 cv
543.888 92.832 543.054 101.622 543.054 101.622 cv
518.791 102.428 li
cp
0 0 0 rgb
f
536.434 108.666 mo
536.377 118.41 li
536.377 118.41 534.603 121.201 528.9 121.631 cv
524.651 121.952 523.319 119.763 523.319 119.763 cv
524.397 111.242 li
534.704 109.038 li
536.434 108.666 li
cp
1 .694118 .572549 rgb
f
536.422 108.071 mo
536.396 108.337 536.293 108.651 536.133 109.01 cv
533.924 113.865 526.24 115.846 523.786 116.051 cv
524.397 111.242 li
536.422 108.071 li
cp
0 0 0 rgb
f
522.354 89.0176 mo
522.354 89.0176 517.169 101.205 519.146 108.005 cv
521.122 114.805 527.323 113.672 531.028 112.318 cv
534.732 110.964 536.435 108.668 536.435 108.668 cv
536.435 108.668 539.918 109.812 542.209 106.561 cv
544.5 103.31 543.035 99.6157 541.044 98.7852 cv
539.053 97.9546 536.709 99.4087 536.709 99.4087 cv
538.523 95.8638 li
538.523 95.8638 530.577 78.0146 522.354 89.0176 cv
cp
1 .694118 .572549 rgb
f
536.709 99.4087 mo
536.709 99.4087 531.512 100.563 527.775 94.8252 cv
524.039 89.0879 524.325 86.6968 524.325 86.6968 cv
520.829 92.7612 li
520.829 92.7612 519.941 88.6201 521.553 85.938 cv
523.165 83.2563 524.901 83.7725 524.901 83.7725 cv
536.462 86.4258 li
539.669 95.5898 li
536.709 99.4087 li
cp
0 0 0 rgb
f
523.057 104.421 mo
522.899 104.421 522.752 104.321 522.701 104.163 cv
521.857 101.586 523.639 98.9219 523.715 98.8096 cv
523.833 98.6392 524.064 98.5933 524.236 98.7104 cv
524.408 98.8267 524.453 99.0596 524.336 99.231 cv
524.32 99.2554 522.686 101.707 523.414 103.93 cv
523.478 104.126 523.371 104.338 523.173 104.403 cv
523.135 104.416 523.096 104.421 523.057 104.421 cv
cp
f
537.313 105.081 mo
537.222 105.081 537.132 105.048 537.06 104.982 cv
536.907 104.843 536.896 104.605 537.036 104.453 cv
540.275 100.905 li
540.417 100.753 540.653 100.742 540.805 100.881 cv
540.958 101.021 540.969 101.258 540.83 101.411 cv
537.59 104.958 li
537.516 105.04 537.415 105.081 537.313 105.081 cv
cp
f
540.787 104.087 mo
540.737 104.084 538.451 103.776 538.451 103.776 cv
538.246 103.748 538.101 103.56 538.128 103.354 cv
538.156 103.149 538.349 103.006 538.55 103.033 cv
540.836 103.341 li
541.042 103.369 541.186 103.557 541.159 103.763 cv
541.133 103.951 540.972 104.087 540.787 104.087 cv
cp
f
520.53 94.5283 mo
520.353 94.5283 520.197 94.4038 520.162 94.2246 cv
520.123 94.0215 520.255 93.8247 520.458 93.7852 cv
522.606 93.3691 li
522.816 93.3286 523.005 93.4629 523.045 93.666 cv
523.084 93.8691 522.952 94.0659 522.749 94.1055 cv
520.601 94.5215 li
520.577 94.5264 520.553 94.5283 520.53 94.5283 cv
cp
f
529.514 95.771 mo
529.459 95.771 529.404 95.7593 529.351 95.7339 cv
525.783 94.0122 li
525.596 93.9219 525.518 93.6978 525.608 93.5112 cv
525.698 93.3252 525.922 93.2466 526.109 93.3364 cv
529.677 95.0581 li
529.864 95.1484 529.942 95.3726 529.852 95.5591 cv
529.788 95.6929 529.654 95.771 529.514 95.771 cv
cp
f
520.625 99.5093 mo
520.591 99.5093 520.557 99.5049 520.522 99.4946 cv
520.323 99.438 520.208 99.23 520.265 99.0313 cv
520.84 97.021 li
520.282 96.3633 li
520.148 96.2056 520.167 95.9688 520.325 95.835 cv
520.484 95.7012 520.72 95.7197 520.854 95.8779 cv
521.542 96.6885 li
521.624 96.7842 521.652 96.9136 521.617 97.0342 cv
520.986 99.2373 li
520.939 99.4023 520.789 99.5093 520.625 99.5093 cv
cp
f
526.767 99.98 mo
526.733 99.98 526.699 99.9756 526.664 99.9653 cv
526.464 99.9087 526.349 99.7007 526.407 99.502 cv
526.981 97.4966 li
526.167 96.5845 li
526.03 96.4297 526.043 96.1929 526.199 96.0552 cv
526.354 95.917 526.59 95.9316 526.728 96.0854 cv
527.678 97.1519 li
527.763 97.248 527.793 97.3809 527.758 97.5044 cv
527.127 99.708 li
527.081 99.873 526.93 99.98 526.767 99.98 cv
cp
f
524.823 107.586 mo
524.542 107.586 524.268 107.528 524.007 107.392 cv
523.824 107.296 523.752 107.069 523.849 106.886 cv
523.945 106.703 524.172 106.632 524.355 106.728 cv
525.355 107.248 527.083 105.755 527.666 105.135 cv
527.809 104.984 528.045 104.977 528.196 105.119 cv
528.346 105.261 528.354 105.498 528.212 105.649 cv
527.998 105.877 526.34 107.586 524.823 107.586 cv
cp
f
529.259 122.015 mo
529.134 122.015 529.009 122.012 528.882 122.006 cv
524.755 121.811 523.112 120.091 523.044 120.018 cv
522.903 119.866 522.912 119.629 523.064 119.488 cv
523.214 119.348 523.452 119.356 523.592 119.506 cv
523.617 119.532 525.138 121.078 528.917 121.257 cv
532.902 121.452 536.074 118.185 536.105 118.151 cv
536.249 118.001 536.486 117.996 536.635 118.139 cv
536.785 118.282 536.791 118.52 536.648 118.669 cv
536.513 118.81 533.404 122.015 529.259 122.015 cv
cp
.25098 .313726 .498039 rgb
f
527.656 300.456 mo
527.462 300.456 527.3 300.306 527.289 300.109 cv
521.686 205.564 li
506.338 201.116 li
506.143 201.06 506.031 200.855 506.087 200.66 cv
506.144 200.465 506.349 200.354 506.543 200.409 cv
522.141 204.93 li
522.291 204.973 522.397 205.105 522.406 205.262 cv
528.023 300.066 li
528.036 300.27 527.88 300.443 527.677 300.455 cv
527.67 300.456 527.663 300.456 527.656 300.456 cv
cp
.968627 .701961 .411765 rgb
f
538.003 313.862 mo
537.843 313.862 537.697 313.758 537.65 313.597 cv
537.593 313.401 537.706 313.197 537.901 313.141 cv
575.543 302.219 li
575.737 302.164 575.943 302.274 576 302.47 cv
576.056 302.665 575.944 302.869 575.749 302.926 cv
538.106 313.848 li
538.072 313.857 538.038 313.862 538.003 313.862 cv
cp
f
522.976 314.361 mo
522.944 314.361 522.911 314.357 522.878 314.348 cv
491.573 305.718 li
491.376 305.664 491.262 305.462 491.315 305.266 cv
491.37 305.07 491.573 304.951 491.768 305.009 cv
523.074 313.639 li
523.27 313.692 523.385 313.895 523.331 314.091 cv
523.286 314.254 523.138 314.361 522.976 314.361 cv
cp
f
584.807 349.537 mo
584.807 349.537 561.584 371.228 557.898 372.008 cv
554.211 372.778 518.954 375.434 518.221 373.189 cv
517.51 371.003 519.06 368.28 521.474 365.587 cv
526.456 360.03 535.135 354.645 535.135 354.645 cv
569.152 343.035 li
576.521 346.09 li
584.807 349.537 li
cp
.25098 .313726 .498039 rgb
f
518.503 354.195 mo
518.355 358.335 517.837 361.348 516.676 361.583 cv
511.535 362.618 460.417 364.994 457.772 364.326 cv
455.127 363.647 447.042 363.259 447.09 358.229 cv
447.107 357.256 447.489 356.34 448.1 355.514 cv
450.822 355.865 458.511 356.7 470.378 356.797 cv
483.286 356.907 510.892 354.792 518.503 354.195 cv
cp
.639216 .482353 .564706 rgb
f
584.807 349.537 mo
584.807 349.537 561.584 371.228 557.898 372.008 cv
554.211 372.778 518.954 375.434 518.221 373.189 cv
517.51 371.003 519.06 368.28 521.474 365.587 cv
530.152 365.161 552.494 363.968 556.321 362.966 cv
558.443 362.404 564.231 357.498 569.998 352.209 cv
572.247 350.15 574.494 348.033 576.521 346.09 cv
579.063 343.668 581.261 341.522 582.687 340.11 cv
584.75 344.874 585.93 348.743 584.807 349.537 cv
cp
f
541.188 343.27 mo
540.987 343.27 540.82 343.109 540.813 342.907 cv
540.806 342.7 540.968 342.526 541.175 342.52 cv
549.554 342.241 li
549.804 342.247 549.935 342.397 549.942 342.604 cv
549.949 342.811 549.787 342.984 549.58 342.991 cv
541.201 343.27 li
541.196 343.27 541.192 343.27 541.188 343.27 cv
cp
.360784 .411765 .647059 rgb
f
486.171 339.882 mo
486.105 339.882 486.038 339.864 485.977 339.827 cv
480.226 336.313 li
480.049 336.204 479.993 335.974 480.101 335.797 cv
480.208 335.619 480.439 335.564 480.616 335.672 cv
486.367 339.187 li
486.544 339.295 486.6 339.525 486.492 339.702 cv
486.421 339.818 486.298 339.882 486.171 339.882 cv
cp
f
364.612 101.984 mo
362.827 100.167 361.354 95.6851 361.712 93.1626 cv
361.785 92.6538 li
361.785 92.6538 358.83 92.3325 359.815 88.3936 cv
360.8 84.4541 365.823 79.2017 373.661 77.2319 cv
381.499 75.2622 387.708 87.1963 387.708 87.1963 cv
387.708 87.1963 381.153 86.853 376.229 90.5776 cv
371.305 94.3022 369.499 97.6475 369.499 97.6475 cv
364.612 101.984 li
cp
.639216 .482353 .564706 rgb
f
422.056 169.602 mo
376.699 169.602 li
375.74 169.602 374.963 168.825 374.963 167.866 cv
374.963 163.689 li
374.963 162.73 375.74 161.953 376.699 161.953 cv
422.056 161.953 li
423.015 161.953 423.792 162.73 423.792 163.689 cv
423.792 167.866 li
423.792 168.825 423.015 169.602 422.056 169.602 cv
cp
.898039 .619608 0 rgb
f
368.443 165.242 mo
366.763 186.154 li
366.763 186.154 378.053 190.146 385.644 189.751 cv
393.235 189.357 406.095 183.29 404.142 181.005 cv
402.556 179.149 399.874 180.526 399.874 180.526 cv
399.874 180.526 406.253 177.779 402.473 176.16 cv
398.692 174.541 387.016 177.333 387.016 177.333 cv
374.993 175.214 li
374.139 165.242 li
368.443 165.242 li
cp
.866667 .521569 .478431 rgb
f
419.357 154.459 mo
383.035 154.459 li
382.076 154.459 381.299 153.682 381.299 152.723 cv
381.299 144.311 li
381.299 143.352 382.076 142.575 383.035 142.575 cv
419.357 142.575 li
420.316 142.575 421.094 143.352 421.094 144.311 cv
421.094 152.723 li
421.094 153.682 420.316 154.459 419.357 154.459 cv
cp
.937255 .643137 .34902 rgb
f
420.086 169.602 mo
374.729 169.602 li
373.771 169.602 372.993 168.825 372.993 167.866 cv
372.993 163.689 li
372.993 162.73 373.771 161.953 374.729 161.953 cv
420.086 161.953 li
421.045 161.953 421.822 162.73 421.822 163.689 cv
421.822 167.866 li
421.822 168.825 421.045 169.602 420.086 169.602 cv
cp
.968627 .701961 .411765 rgb
f
422.646 161.953 mo
380.403 161.953 li
379.444 161.953 378.667 161.175 378.667 160.216 cv
378.667 156.04 li
378.667 155.081 379.444 154.303 380.403 154.303 cv
422.646 154.303 li
423.605 154.303 424.382 155.081 424.382 156.04 cv
424.382 160.216 li
424.382 161.175 423.605 161.953 422.646 161.953 cv
cp
.407843 .713726 .847059 rgb
f
422.466 176.897 mo
375.387 176.897 li
374.428 176.897 373.651 176.12 373.651 175.161 cv
373.651 170.984 li
373.651 170.025 374.428 169.248 375.387 169.248 cv
422.466 169.248 li
423.425 169.248 424.203 170.025 424.203 170.984 cv
424.203 175.161 li
424.203 176.12 423.425 176.897 422.466 176.897 cv
cp
1 .933333 .741176 rgb
f
415.217 142.739 mo
386.191 142.739 li
385.232 142.739 384.455 141.961 384.455 141.002 cv
384.455 137.375 li
384.455 136.416 385.232 135.638 386.191 135.638 cv
415.217 135.638 li
416.176 135.638 416.954 136.416 416.954 137.375 cv
416.954 141.002 li
416.954 141.961 416.176 142.739 415.217 142.739 cv
cp
.407843 .713726 .847059 rgb
f
420.676 161.953 mo
378.434 161.953 li
377.475 161.953 376.697 161.175 376.697 160.216 cv
376.697 156.04 li
376.697 155.081 377.475 154.303 378.434 154.303 cv
420.676 154.303 li
421.635 154.303 422.413 155.081 422.413 156.04 cv
422.413 160.216 li
422.413 161.175 421.635 161.953 420.676 161.953 cv
cp
1 1 1 rgb
f
419.029 135.638 mo
387.302 135.638 li
386.343 135.638 385.565 134.861 385.565 133.902 cv
385.565 127.088 li
385.565 126.129 386.343 125.352 387.302 125.352 cv
419.029 125.352 li
419.988 125.352 420.766 126.129 420.766 127.088 cv
420.766 133.902 li
420.766 134.861 419.988 135.638 419.029 135.638 cv
cp
.937255 .643137 .34902 rgb
f
417.388 154.459 mo
381.065 154.459 li
380.106 154.459 379.329 153.682 379.329 152.723 cv
379.329 144.311 li
379.329 143.352 380.106 142.575 381.065 142.575 cv
417.388 142.575 li
418.347 142.575 419.124 143.352 419.124 144.311 cv
419.124 152.723 li
419.124 153.682 418.347 154.459 417.388 154.459 cv
cp
.968627 .701961 .411765 rgb
f
420.496 176.897 mo
373.417 176.897 li
372.458 176.897 371.681 176.12 371.681 175.161 cv
371.681 170.984 li
371.681 170.025 372.458 169.248 373.417 169.248 cv
420.496 169.248 li
421.455 169.248 422.233 170.025 422.233 170.984 cv
422.233 175.161 li
422.233 176.12 421.455 176.897 420.496 176.897 cv
cp
1 1 1 rgb
f
389.851 184.135 mo
389.647 184.135 389.48 183.973 389.476 183.769 cv
389.472 183.562 389.636 183.39 389.843 183.385 cv
391.995 183.338 400.883 179.807 400.973 179.771 cv
401.164 179.693 401.384 179.788 401.46 179.98 cv
401.537 180.173 401.443 180.391 401.25 180.467 cv
400.88 180.615 392.146 184.085 389.859 184.135 cv
389.856 184.135 389.854 184.135 389.851 184.135 cv
cp
0 0 0 rgb
f
363.191 117.188 mo
363.191 117.188 317.467 133.54 320.969 165.242 cv
324.47 196.944 368.443 189.941 368.443 189.941 cv
369.006 163.05 li
355.547 156.848 li
363.191 117.188 li
cp
.25098 .313726 .498039 rgb
f
429.958 165.242 mo
429.958 165.242 436.523 162.147 432.9 159.853 cv
429.821 157.903 414.934 161.989 413.762 163.522 cv
412.449 165.242 417.702 167.18 417.702 167.18 cv
417.702 167.18 410.261 167.954 410.479 170.631 cv
410.698 173.308 416.826 172.959 416.826 172.959 cv
416.826 172.959 411.136 173.804 413.105 177.51 cv
415.075 181.216 429.738 177.788 431.271 175.876 cv
432.803 173.965 430.395 172.959 430.395 172.959 cv
430.395 172.959 432.583 171.834 432.912 168.96 cv
433.24 166.086 429.958 165.242 429.958 165.242 cv
cp
.866667 .521569 .478431 rgb
f
413.248 142.739 mo
384.222 142.739 li
383.263 142.739 382.485 141.961 382.485 141.002 cv
382.485 137.375 li
382.485 136.416 383.263 135.638 384.222 135.638 cv
413.248 135.638 li
414.207 135.638 414.984 136.416 414.984 137.375 cv
414.984 141.002 li
414.984 141.961 414.207 142.739 413.248 142.739 cv
cp
1 1 1 rgb
f
417.06 135.638 mo
385.332 135.638 li
384.373 135.638 383.596 134.861 383.596 133.902 cv
383.596 127.088 li
383.596 126.129 384.373 125.352 385.332 125.352 cv
417.06 125.352 li
418.019 125.352 418.796 126.129 418.796 127.088 cv
418.796 133.902 li
418.796 134.861 418.019 135.638 417.06 135.638 cv
cp
.968627 .701961 .411765 rgb
f
356.861 210.231 mo
356.851 210.231 326.766 209.393 326.766 209.393 cv
326.559 209.387 326.395 209.214 326.401 209.007 cv
326.407 208.8 326.574 208.649 326.786 208.643 cv
356.871 209.481 li
357.078 209.487 357.242 209.66 357.236 209.867 cv
357.23 210.07 357.063 210.231 356.861 210.231 cv
cp
1 1 1 rgb
f
419.124 166.529 mo
418.937 166.529 418.775 166.391 418.752 166.201 cv
418.726 165.995 418.872 165.808 419.078 165.782 cv
428.379 164.62 li
428.585 164.597 428.772 164.74 428.797 164.945 cv
428.823 165.151 428.677 165.338 428.472 165.364 cv
419.17 166.526 li
419.155 166.528 419.139 166.529 419.124 166.529 cv
cp
0 0 0 rgb
f
416.826 173.464 mo
416.621 173.464 416.454 173.299 416.451 173.094 cv
416.449 172.886 416.615 172.717 416.822 172.714 cv
428.421 172.584 li
428.621 172.542 428.797 172.748 428.8 172.955 cv
428.803 173.163 428.637 173.332 428.43 173.334 cv
416.831 173.464 li
416.829 173.464 416.828 173.464 416.826 173.464 cv
cp
f
371.682 329.507 mo
371.652 329.507 371.623 329.504 371.593 329.496 cv
371.391 329.447 371.268 329.244 371.317 329.043 cv
371.449 328.501 384.493 274.682 384.08 262.895 cv
383.667 251.053 383.26 214.59 383.256 214.223 cv
383.255 214.093 383.321 213.971 383.432 213.901 cv
392.245 208.376 li
392.422 208.266 392.652 208.319 392.762 208.494 cv
392.872 208.67 392.819 208.901 392.644 209.011 cv
384.009 214.425 li
384.042 217.436 384.433 251.505 384.83 262.869 cv
385.246 274.758 372.585 327.002 372.045 329.221 cv
372.004 329.392 371.851 329.507 371.682 329.507 cv
cp
.25098 .313726 .498039 rgb
f
365.358 162.328 mo
365.321 162.328 365.284 162.322 365.246 162.311 cv
365.081 162.258 348.611 157.106 341.772 156.263 cv
341.567 156.238 341.421 156.051 341.446 155.845 cv
341.472 155.64 341.659 155.492 341.864 155.519 cv
348.771 156.37 365.305 161.542 365.471 161.595 cv
365.668 161.657 365.778 161.867 365.716 162.065 cv
365.666 162.225 365.518 162.328 365.358 162.328 cv
cp
.968627 .701961 .411765 rgb
f
345.045 150.337 mo
344.999 150.337 344.953 150.338 344.907 150.34 cv
344.397 150.36 344.186 150.477 344.159 150.571 cv
343.915 151.438 347.561 154.541 351.373 157.18 cv
350.554 155.03 348.386 150.337 345.045 150.337 cv
cp
352.099 158.503 mo
352.027 158.503 351.954 158.482 351.891 158.44 cv
349.772 157.026 342.902 152.265 343.438 150.367 cv
343.574 149.883 344.059 149.622 344.877 149.591 cv
349.868 149.403 352.355 157.67 352.459 158.022 cv
352.503 158.173 352.449 158.336 352.321 158.43 cv
352.255 158.479 352.177 158.503 352.099 158.503 cv
cp
f
382.161 122.276 mo
376.724 122.276 371.147 118.854 370.888 118.693 cv
370.712 118.583 370.658 118.353 370.768 118.177 cv
370.876 118.001 371.108 117.945 371.284 118.056 cv
371.352 118.098 378.143 122.264 383.784 121.409 cv
383.99 121.375 384.18 121.519 384.21 121.724 cv
384.242 121.928 384.101 122.12 383.896 122.15 cv
383.324 122.237 382.743 122.276 382.161 122.276 cv
cp
f
416.022 125.416 mo
387.461 125.416 li
386.549 125.416 385.81 124.676 385.81 123.763 cv
385.81 119.139 li
385.81 118.227 386.549 117.487 387.461 117.487 cv
416.022 117.487 li
416.935 117.487 417.674 118.227 417.674 119.139 cv
417.674 123.763 li
417.674 124.676 416.935 125.416 416.022 125.416 cv
cp
.407843 .713726 .847059 rgb
f
414.053 125.416 mo
385.492 125.416 li
384.58 125.416 383.84 124.676 383.84 123.763 cv
383.84 119.139 li
383.84 118.227 384.58 117.487 385.492 117.487 cv
414.053 117.487 li
414.965 117.487 415.705 118.227 415.705 119.139 cv
415.705 123.763 li
415.705 124.676 414.965 125.416 414.053 125.416 cv
cp
1 1 1 rgb
f
361.712 93.5376 mo
361.649 93.5376 361.585 93.5215 361.526 93.4883 cv
361.347 93.3853 361.284 93.1563 361.387 92.9766 cv
362.865 90.3916 li
362.967 90.2114 363.196 90.1489 363.377 90.252 cv
363.557 90.355 363.619 90.584 363.517 90.7637 cv
362.038 93.3486 li
361.969 93.4697 361.842 93.5376 361.712 93.5376 cv
cp
.968627 .701961 .411765 rgb
f
1161.14 366.695 mo
1159.91 366.695 1158.94 365.73 1158.94 364.54 cv
1158.94 257.354 li
1163.29 257.354 li
1163.29 364.54 li
1163.29 365.73 1162.33 366.695 1161.14 366.695 cv
cp
.360784 .411765 .647059 rgb
f
1177.83 259.967 mo
1134.02 259.967 li
1134.02 242.986 li
1177.83 242.986 li
1181.16 242.986 1183.87 245.691 1183.87 249.027 cv
1183.87 253.926 li
1183.87 257.262 1181.16 259.967 1177.83 259.967 cv
cp
.25098 .313726 .498039 rgb
f
1166.56 183.629 mo
1166.56 183.629 1174.89 204.454 1166.56 215.557 cv
1158.23 226.659 1145.99 226.254 1145.99 226.254 cv
1141.17 213.869 li
1166.56 183.629 li
cp
.968627 .701961 .411765 rgb
f
1097.07 326.363 mo
1096.96 340.032 li
1124.23 337.433 li
1124.23 326.363 li
1097.07 326.363 li
cp
.956863 .517647 .384314 rgb
f
1054.9 324.58 mo
1054.78 338.248 li
1082.06 335.649 li
1082.06 324.58 li
1054.9 324.58 li
cp
f
1051.42 336.453 mo
1051.42 336.453 1017.46 358.784 1015.82 363.477 cv
1014.19 368.168 1019.09 370.028 1021.37 370.241 cv
1023.66 370.454 1080.55 366.423 1080.55 366.423 cv
1085.38 349.102 li
1085.38 349.102 1084.57 334.426 1083.99 333.99 cv
1083.42 333.555 1052.72 334.021 1052.72 334.021 cv
1051.42 336.453 li
cp
.937255 .643137 .34902 rgb
f
1095.49 333.99 mo
1095.49 333.99 1070.79 356.373 1069.92 360.965 cv
1069.05 365.556 1071.66 367.842 1073.29 368.495 cv
1074.93 369.147 1107.17 368.821 1116.03 368.495 cv
1124.89 368.168 1126.45 362.238 1127.3 357.04 cv
1128.15 351.841 1124.89 334.021 1124.89 334.021 cv
1095.49 333.99 li
cp
.968627 .701961 .411765 rgb
f
1108.99 349.021 mo
1108.96 349.021 1108.94 349.02 1108.91 349.014 cv
1093.27 345.67 li
1093.1 345.634 1092.98 345.486 1092.98 345.314 cv
1092.98 345.143 1093.09 344.993 1093.26 344.953 cv
1109.96 340.987 li
1096.94 340.399 li
1096.74 340.39 1096.58 340.219 1096.59 340.016 cv
1096.6 339.813 1096.73 339.65 1096.97 339.665 cv
1112.61 340.371 li
1112.8 340.38 1112.95 340.521 1112.96 340.704 cv
1112.98 340.886 1112.86 341.054 1112.68 341.096 cv
1095.01 345.292 li
1109.07 348.295 li
1109.27 348.338 1109.39 348.532 1109.35 348.731 cv
1109.31 348.903 1109.16 349.021 1108.99 349.021 cv
cp
1 1 1 rgb
f
1052.07 349.021 mo
1035.46 349.021 li
1035.25 349.021 1035.09 348.857 1035.09 348.654 cv
1035.09 348.451 1035.25 348.287 1035.46 348.287 cv
1050.52 348.287 li
1044.28 345.155 li
1044.13 345.08 1044.05 344.913 1044.09 344.749 cv
1044.12 344.585 1044.27 344.466 1044.43 344.46 cv
1056.27 344.029 li
1047.18 339.494 li
1047 339.403 1046.93 339.183 1047.02 339.001 cv
1047.11 338.818 1047.33 338.745 1047.51 338.836 cv
1057.89 344.015 li
1058.04 344.09 1058.12 344.257 1058.09 344.422 cv
1058.05 344.586 1057.91 344.705 1057.74 344.711 cv
1045.89 345.143 li
1052.23 348.326 li
1052.39 348.402 1052.46 348.573 1052.43 348.739 cv
1052.39 348.904 1052.24 349.021 1052.07 349.021 cv
cp
f
1019.5 362.455 mo
1019.31 362.455 1019.15 362.305 1019.14 362.108 cv
1019.13 361.906 1019.28 361.732 1019.48 361.721 cv
1069.9 358.848 li
1070.11 358.86 1070.27 358.991 1070.28 359.194 cv
1070.29 359.396 1070.14 359.57 1069.94 359.582 cv
1019.52 362.455 li
1019.52 362.455 1019.51 362.455 1019.5 362.455 cv
cp
f
1106.99 358.909 mo
1093.83 358.909 1075.8 358.464 1072.79 358.387 cv
1072.59 358.382 1072.43 358.213 1072.43 358.01 cv
1072.44 357.811 1072.6 357.652 1072.8 357.652 cv
1091.21 358.122 1119.14 358.522 1120.68 357.695 cv
1122.8 356.556 1125.35 354.412 1125.38 354.391 cv
1125.54 354.259 1125.77 354.279 1125.9 354.434 cv
1126.03 354.589 1126.01 354.82 1125.85 354.951 cv
1125.75 355.042 1123.22 357.167 1121.03 358.344 cv
1120.23 358.769 1114.38 358.909 1106.99 358.909 cv
cp
f
1078.72 225.57 mo
1078.72 225.57 1048.68 242.333 1044.11 251.15 cv
1039.53 259.967 1046.61 331.807 1046.61 331.807 cv
1086.14 328.737 li
1087.54 290.335 li
1110.61 229.598 li
1078.72 225.57 li
cp
.407843 .713726 .847059 rgb
f
1147.95 216.917 mo
1147.95 216.917 1151.7 235.966 1151.7 242.333 cv
1151.7 248.701 1132.61 265.518 1132.61 265.518 cv
1131.98 328.867 li
1087.7 328.867 li
1087.7 328.867 1084.26 263.232 1084.35 256.538 cv
1084.43 249.844 1112.35 222.88 1112.35 222.88 cv
1147.95 216.917 li
cp
f
1038.88 161.187 mo
1038.88 161.187 1040.75 166.225 1046.61 169.84 cv
1052.48 173.456 1056.02 173.759 1056.02 173.759 cv
1061.58 168.534 li
1050.23 145.782 li
1038.88 161.187 li
cp
.956863 .517647 .384314 rgb
f
1032.21 126.8 mo
1015.79 160.247 li
1037.77 169.554 li
1053.44 135.914 li
1032.21 126.8 li
cp
.447059 .517647 .717647 rgb
f
1036.48 128.609 mo
1020.06 162.057 li
1042.03 171.363 li
1057.7 137.723 li
1036.48 128.609 li
cp
.360784 .411765 .647059 rgb
f
1061.58 162.656 mo
1061.58 162.656 1058.8 151.88 1057.66 149.595 cv
1056.51 147.309 1049 141.876 1047.04 143.123 cv
1045.08 144.37 1050.42 149.986 1050.42 149.986 cv
1050.42 149.986 1049.82 158.901 1051.62 162.656 cv
1053.41 166.412 1057.82 167.718 1057.82 167.718 cv
1061.58 162.656 li
cp
.956863 .517647 .384314 rgb
f
1063.87 156.097 mo
1050.42 176.589 li
1050.42 176.589 1056.45 191.345 1072.19 197.488 cv
1081.11 200.971 1092.43 199.012 1092.43 199.012 cv
1092.43 220.346 li
1092.43 220.346 1106.64 224.047 1125.66 223.176 cv
1144.68 222.306 1149.25 218.169 1149.25 218.169 cv
1149.25 218.169 1152.74 152.207 1149.25 149.595 cv
1145.77 146.982 1128.26 143.935 1115.35 147.2 cv
1102.45 150.465 1100.61 155.254 1100.61 155.254 cv
1100.61 155.254 1090.91 162.438 1081.33 163.527 cv
1071.75 164.616 1063.87 156.097 1063.87 156.097 cv
cp
.639216 .482353 .564706 rgb
f
1117.98 123.906 mo
1117.98 123.906 1110.72 114.924 1113.77 111.361 cv
1116.82 107.797 1121.53 111.361 1121.53 111.361 cv
1121.53 111.361 1121.79 107.144 1126.49 107.579 cv
1131.18 108.015 1134.02 113.021 1134.02 113.021 cv
1134.02 113.021 1138.15 108.885 1140.98 113.021 cv
1143.81 117.158 1141.85 123.906 1141.85 123.906 cv
1141.85 123.906 1145.12 123.423 1144.25 127.257 cv
1143.38 131.09 1138.24 135.042 1138.24 135.042 cv
1117.98 123.906 li
cp
0 0 0 rgb
f
1133.88 138.048 mo
1134.02 148.177 li
1134.02 148.177 1132.23 151.113 1126.31 151.675 cv
1121.9 152.093 1120.33 151.116 1120.33 151.116 cv
1120.88 145.978 li
1121.42 140.967 li
1132.09 138.469 li
1133.88 138.048 li
cp
.956863 .517647 .384314 rgb
f
1132.09 138.469 mo
1132.07 138.746 1131.97 139.074 1131.81 139.45 cv
1129.61 144.541 1123.43 145.715 1120.88 145.978 cv
1121.42 140.967 li
1132.09 138.469 li
cp
0 0 0 rgb
f
1118.85 117.909 mo
1118.85 117.909 1113.71 130.681 1115.9 137.708 cv
1118.09 144.736 1124.51 143.434 1128.33 141.952 cv
1132.16 140.471 1133.88 138.05 1133.88 138.05 cv
1133.88 138.05 1137.52 139.168 1139.84 135.744 cv
1142.16 132.319 1140.56 128.509 1138.47 127.686 cv
1136.39 126.863 1133.98 128.421 1133.98 128.421 cv
1135.79 124.7 li
1135.79 124.7 1127.17 106.308 1118.85 117.909 cv
cp
.956863 .517647 .384314 rgb
f
1134.42 133.849 mo
1134.31 133.849 1134.2 133.797 1134.13 133.7 cv
1134.01 133.537 1134.04 133.307 1134.2 133.186 cv
1138.72 129.842 li
1138.89 129.723 1139.12 129.755 1139.24 129.919 cv
1139.36 130.083 1139.32 130.313 1139.16 130.433 cv
1134.64 133.777 li
1134.57 133.825 1134.5 133.849 1134.42 133.849 cv
cp
0 0 0 rgb
f
1138.58 133.736 mo
1138.55 133.736 1138.52 133.733 1138.49 133.726 cv
1135.48 132.993 li
1135.28 132.945 1135.16 132.746 1135.21 132.549 cv
1135.26 132.352 1135.45 132.229 1135.65 132.279 cv
1138.67 133.012 li
1138.87 133.06 1138.99 133.258 1138.94 133.456 cv
1138.9 133.624 1138.75 133.736 1138.58 133.736 cv
cp
f
1127.14 123.638 mo
1126.99 123.638 1126.85 123.544 1126.79 123.394 cv
1126.07 121.375 1124.27 121.665 1124.19 121.679 cv
1123.99 121.708 1123.8 121.581 1123.76 121.381 cv
1123.73 121.182 1123.86 120.992 1124.06 120.956 cv
1124.92 120.798 1126.74 121.053 1127.48 123.146 cv
1127.55 123.338 1127.45 123.548 1127.26 123.616 cv
1127.22 123.63 1127.18 123.638 1127.14 123.638 cv
cp
f
1117.57 122.758 mo
1117.47 122.758 1117.36 122.714 1117.29 122.628 cv
1117.16 122.474 1117.18 122.242 1117.33 122.11 cv
1117.72 121.781 1118.9 120.781 1119.38 121.316 cv
1119.51 121.468 1119.5 121.701 1119.34 121.835 cv
1119.24 121.929 1119.09 121.952 1118.97 121.902 cv
1118.88 121.923 1118.56 122.036 1117.81 122.671 cv
1117.74 122.729 1117.65 122.758 1117.57 122.758 cv
cp
f
1119.41 132.371 mo
1119.29 132.371 1119.19 132.321 1119.11 132.227 cv
1117.52 130.137 1120.63 126.788 1120.76 126.646 cv
1120.9 126.498 1121.13 126.49 1121.28 126.63 cv
1121.43 126.769 1121.43 127.001 1121.29 127.149 cv
1120.51 127.988 1118.69 130.456 1119.7 131.781 cv
1119.82 131.942 1119.79 132.173 1119.63 132.296 cv
1119.56 132.347 1119.48 132.371 1119.41 132.371 cv
cp
f
1117.68 127.625 mo
1117.65 127.625 1117.62 127.621 1117.59 127.612 cv
1117.39 127.562 1117.27 127.361 1117.33 127.165 cv
1117.93 124.833 li
1117.98 124.636 1118.18 124.515 1118.38 124.569 cv
1118.57 124.62 1118.69 124.82 1118.64 125.017 cv
1118.04 127.349 li
1117.99 127.515 1117.84 127.625 1117.68 127.625 cv
cp
f
1124.09 127.663 mo
1124.06 127.663 1124.03 127.659 1124 127.651 cv
1123.8 127.6 1123.69 127.4 1123.74 127.204 cv
1124.34 124.872 li
1124.39 124.676 1124.59 124.552 1124.79 124.608 cv
1124.98 124.659 1125.1 124.859 1125.05 125.056 cv
1124.45 127.387 li
1124.41 127.553 1124.26 127.663 1124.09 127.663 cv
cp
f
1117.82 120.786 mo
1117.82 120.786 1118.9 118.734 1121.42 118.683 cv
1123.95 118.632 1125.45 120.392 1125.45 120.392 cv
1125.45 120.392 1124.4 124.661 1127.86 126.875 cv
1131.33 129.089 1133.98 128.421 1133.98 128.421 cv
1136.46 127.5 li
1138.24 123.833 li
1130.92 116.16 li
1121.53 111.361 li
1116.83 115.742 li
1117.82 120.786 li
cp
f
1122.09 136.373 mo
1122 136.373 1121.94 136.369 1121.94 136.369 cv
1121.74 136.352 1121.59 136.175 1121.61 135.974 cv
1121.62 135.772 1121.77 135.62 1122 135.636 cv
1122.08 135.643 1124.11 135.776 1124.95 133.926 cv
1125.03 133.741 1125.25 133.659 1125.43 133.743 cv
1125.62 133.826 1125.7 134.044 1125.62 134.229 cv
1124.71 136.227 1122.67 136.373 1122.09 136.373 cv
cp
f
1124.09 205.543 mo
1124.09 205.543 1112.24 207.284 1109.85 208.155 cv
1107.46 209.025 1105.71 214.468 1105.71 214.468 cv
1105.71 214.468 1098.31 219.91 1098.09 220.781 cv
1097.88 221.652 1102.88 227.313 1102.88 227.313 cv
1118.34 228.292 li
1118.34 228.292 1129.08 227.095 1132.09 219.258 cv
1135.1 211.42 1124.09 205.543 1124.09 205.543 cv
cp
.956863 .517647 .384314 rgb
f
1138.58 146.54 mo
1138.58 146.54 1133.02 157.595 1132.09 173.759 cv
1131.16 189.923 1136.68 198.903 1136.68 198.903 cv
1142.72 191.188 li
1142.72 191.188 1140.49 180.597 1142.45 168.188 cv
1144.41 155.779 1147.95 149.595 1147.95 149.595 cv
1147.95 149.595 1143.15 144.902 1138.58 146.54 cv
cp
.968627 .701961 .411765 rgb
f
1101.56 223.247 mo
1101.49 223.247 1101.41 223.224 1101.34 223.175 cv
1101.18 223.053 1101.15 222.823 1101.27 222.66 cv
1101.42 222.452 1105.13 217.54 1110.5 215.782 cv
1110.69 215.718 1110.9 215.823 1110.96 216.017 cv
1111.02 216.209 1110.92 216.417 1110.72 216.479 cv
1105.58 218.164 1101.89 223.051 1101.86 223.1 cv
1101.78 223.196 1101.67 223.247 1101.56 223.247 cv
cp
0 0 0 rgb
f
1106.09 226.621 mo
1106.01 226.621 1105.93 226.598 1105.87 226.549 cv
1105.7 226.428 1105.67 226.197 1105.79 226.034 cv
1105.95 225.826 1109.65 220.914 1115.02 219.156 cv
1115.21 219.092 1115.42 219.197 1115.48 219.391 cv
1115.55 219.583 1115.44 219.791 1115.25 219.854 cv
1110.1 221.54 1106.42 226.424 1106.38 226.474 cv
1106.31 226.57 1106.2 226.621 1106.09 226.621 cv
cp
f
1090.64 203.196 mo
1090.44 203.196 1090.27 203.042 1090.26 202.843 cv
1089.61 191.639 1094.64 175.281 1094.69 175.118 cv
1094.75 174.919 1094.96 174.811 1095.16 174.87 cv
1095.35 174.932 1095.47 175.142 1095.4 175.339 cv
1095.35 175.502 1090.37 191.732 1091.01 202.8 cv
1091.02 203.006 1090.87 203.184 1090.66 203.195 cv
1090.65 203.196 1090.64 203.196 1090.64 203.196 cv
cp
.360784 .411765 .647059 rgb
f
1149.25 149.595 mo
1149.25 149.595 1171.46 164.833 1170.15 188.127 cv
1168.84 211.42 1134.02 225.57 1134.02 225.57 cv
1120.03 203.267 li
1141.17 186.697 li
1149.25 149.595 li
cp
.639216 .482353 .564706 rgb
f
1124.34 152.172 mo
1121.37 152.172 1119.09 151.396 1118.98 151.356 cv
1118.78 151.289 1118.68 151.075 1118.75 150.879 cv
1118.81 150.683 1119.03 150.583 1119.22 150.647 cv
1119.26 150.659 1122.55 151.775 1126.26 151.303 cv
1130.09 150.815 1134.75 147.889 1134.79 147.86 cv
1134.96 147.749 1135.2 147.8 1135.31 147.976 cv
1135.42 148.151 1135.37 148.383 1135.19 148.494 cv
1135 148.618 1130.35 151.538 1126.36 152.047 cv
1125.66 152.135 1124.99 152.172 1124.34 152.172 cv
cp
.360784 .411765 .647059 rgb
f
1054.09 165.201 mo
1054.01 165.201 1053.92 165.172 1053.86 165.114 cv
1048.07 160.241 1049.97 150.333 1050.06 149.914 cv
1050.1 149.716 1050.29 149.584 1050.49 149.626 cv
1050.69 149.666 1050.82 149.859 1050.78 150.058 cv
1050.76 150.157 1048.88 159.96 1054.33 164.553 cv
1054.48 164.683 1054.5 164.915 1054.37 165.07 cv
1054.3 165.156 1054.2 165.201 1054.09 165.201 cv
cp
0 0 0 rgb
f
1102.88 225.57 mo
1050.47 225.57 li
1039.76 195.689 li
1039.41 194.71 1040.14 193.678 1041.18 193.678 cv
1090.4 193.678 li
1091.03 193.678 1091.6 194.077 1091.81 194.675 cv
1102.88 225.57 li
cp
.25098 .313726 .498039 rgb
f
1106.09 214.236 mo
1105.96 214.236 1105.84 214.174 1105.77 214.061 cv
1105.67 213.888 1105.72 213.662 1105.89 213.556 cv
1112.83 209.311 li
1113 209.206 1113.23 209.26 1113.33 209.433 cv
1113.44 209.605 1113.39 209.831 1113.21 209.938 cv
1106.28 214.183 li
1106.22 214.219 1106.15 214.236 1106.09 214.236 cv
cp
0 0 0 rgb
f
1082.25 164.825 mo
1081.93 167.151 1081.67 170.834 1082.63 172.137 cv
1082.83 172.397 1083.05 172.539 1083.33 172.57 cv
1083.6 172.601 1083.7 172.512 1083.77 172.422 cv
1084.45 171.505 1083.34 167.689 1082.25 164.825 cv
cp
1083.43 173.325 mo
1083.37 173.325 1083.31 173.322 1083.25 173.315 cv
1082.76 173.261 1082.35 173.014 1082.03 172.582 cv
1080.42 170.395 1081.67 163.642 1081.73 163.356 cv
1081.76 163.193 1081.89 163.07 1082.06 163.053 cv
1082.22 163.033 1082.38 163.128 1082.44 163.281 cv
1082.99 164.582 1085.65 171.16 1084.37 172.871 cv
1084.21 173.085 1083.92 173.325 1083.43 173.325 cv
cp
.360784 .411765 .647059 rgb
f
1121.97 203.196 mo
1121.87 203.196 1121.77 203.158 1121.7 203.082 cv
1121.56 202.933 1121.56 202.695 1121.71 202.552 cv
1121.84 202.428 1134.57 190.147 1140.98 186.374 cv
1141.16 186.271 1141.39 186.328 1141.5 186.506 cv
1141.6 186.685 1141.54 186.915 1141.36 187.02 cv
1135.03 190.749 1122.36 202.968 1122.23 203.091 cv
1122.16 203.161 1122.06 203.196 1121.97 203.196 cv
cp
f
1146.82 179.74 mo
1146.72 179.74 1146.62 179.755 1146.51 179.787 cv
1144.75 180.283 1142.47 184.351 1141.26 186.86 cv
1143.71 185.194 1147.66 182.16 1147.7 180.531 cv
1147.71 180.278 1147.6 180.084 1147.37 179.921 cv
1147.2 179.8 1147.02 179.74 1146.82 179.74 cv
cp
1140.38 188.269 mo
1140.29 188.269 1140.2 188.239 1140.13 188.179 cv
1140.01 188.072 1139.97 187.896 1140.03 187.746 cv
1140.17 187.424 1143.46 179.868 1146.3 179.065 cv
1146.85 178.911 1147.35 178.993 1147.8 179.307 cv
1148.24 179.615 1148.46 180.044 1148.45 180.549 cv
1148.39 183.198 1141.38 187.706 1140.58 188.211 cv
1140.51 188.25 1140.45 188.269 1140.38 188.269 cv
cp
f
1052.08 217.284 mo
1051.93 217.284 1051.79 217.19 1051.74 217.039 cv
1045.39 199.025 li
1045.32 198.833 1045.42 198.624 1045.62 198.556 cv
1045.81 198.49 1046.02 198.59 1046.08 198.781 cv
1052.43 216.795 li
1052.5 216.986 1052.4 217.196 1052.21 217.264 cv
1052.17 217.277 1052.12 217.284 1052.08 217.284 cv
cp
.407843 .462745 .666667 rgb
f
1117.57 146.711 mo
1117.57 146.711 1107.71 148.838 1106.17 150.317 cv
1104.62 151.795 1104.62 151.795 1104.62 151.795 cv
1104.62 151.795 1098.98 158.526 1096.24 167.718 cv
1093.51 176.909 1093.22 182.063 1093.22 182.063 cv
1093.22 182.063 1114.26 147.444 1117.57 146.711 cv
cp
.968627 .701961 .411765 rgb
f
1086.38 303.405 mo
1086.18 303.405 1086.02 303.259 1086 303.064 cv
1085.84 301.265 1081.94 258.921 1082.59 253.716 cv
1083.25 248.433 1099.64 230.436 1100.33 229.672 cv
1100.47 229.519 1100.71 229.51 1100.86 229.647 cv
1101.02 229.787 1101.03 230.024 1100.89 230.178 cv
1100.72 230.363 1083.97 248.761 1083.34 253.81 cv
1082.7 258.935 1086.71 302.556 1086.75 302.996 cv
1086.77 303.202 1086.62 303.385 1086.41 303.403 cv
1086.4 303.404 1086.39 303.405 1086.38 303.405 cv
cp
.25098 .313726 .498039 rgb
f
1125.77 265.1 mo
1123.51 265.1 1121.67 265.483 1121.39 266.57 cv
1121.31 266.896 1121.42 267.005 1121.48 267.051 cv
1122.43 267.937 1127.43 266.764 1131.12 265.61 cv
1129.41 265.314 1127.47 265.1 1125.77 265.1 cv
cp
1122.92 268.092 mo
1122.04 268.092 1121.34 267.951 1120.97 267.603 cv
1120.74 267.393 1120.5 267.012 1120.66 266.385 cv
1121.56 262.851 1131.55 264.905 1132.69 265.151 cv
1132.85 265.187 1132.97 265.328 1132.98 265.496 cv
1132.99 265.664 1132.89 265.818 1132.73 265.872 cv
1131.43 266.316 1126.04 268.092 1122.92 268.092 cv
cp
f
1117.31 231.013 mo
1051.07 231.013 li
1049.87 231.013 1048.89 230.038 1048.89 228.836 cv
1048.89 227.748 li
1048.89 226.545 1049.87 225.57 1051.07 225.57 cv
1117.31 225.57 li
1118.81 225.57 1120.03 226.789 1120.03 228.292 cv
1120.03 229.795 1118.81 231.013 1117.31 231.013 cv
cp
0 0 0 rgb
f
678.638 120.576 mo
675.917 120.576 673.702 118.362 673.702 115.64 cv
673.702 114.377 674.178 113.176 675.043 112.256 cv
675.187 112.106 675.424 112.099 675.574 112.24 cv
675.725 112.382 675.732 112.62 675.59 112.77 cv
674.856 113.55 674.452 114.569 674.452 115.64 cv
674.452 117.948 676.33 119.826 678.638 119.826 cv
680.947 119.826 682.824 117.948 682.824 115.64 cv
682.824 113.332 680.947 111.454 678.638 111.454 cv
678.431 111.454 678.263 111.286 678.263 111.079 cv
678.263 110.872 678.431 110.704 678.638 110.704 cv
681.359 110.704 683.574 112.918 683.574 115.64 cv
683.574 118.362 681.359 120.576 678.638 120.576 cv
cp
1 1 1 rgb
f
680.144 103.096 mo
680.144 103.096 682.168 102.662 684.128 100.164 cv
686.089 97.6665 685.672 93.4443 685.672 93.4443 cv
685.672 93.4443 687.89 94.3335 690.489 94.3335 cv
693.089 94.3335 694.801 92.917 694.801 92.917 cv
694.801 92.917 697.256 91.1113 696.783 88.1113 cv
696.311 85.1113 693.045 85.7778 693.045 85.7778 cv
693.045 85.7778 690.255 83.6665 685.672 83.7778 cv
681.089 83.8887 679.709 86.4443 679.709 86.4443 cv
679.709 86.4443 675.621 86.584 674.077 88.5698 cv
672.533 90.5557 672.533 93.4346 672.533 93.4346 cv
672.533 93.4346 670.693 93.9922 670.113 97.8291 cv
669.533 101.667 673.776 105.007 673.776 105.007 cv
673.776 105.007 675.866 101.636 680.144 103.096 cv
cp
0 0 0 rgb
f
674.474 90.4326 mo
674.474 90.4326 668.448 79.2104 663.201 85.2104 cv
657.276 91.9858 669.313 99.3218 672.979 95.5439 cv
676.646 91.7661 674.474 90.4326 674.474 90.4326 cv
cp
f
210.169 121.188 mo
210.169 121.188 208.2 110.27 201.614 112.051 cv
198.518 112.888 203.675 118.68 203.675 118.68 cv
195.014 115.368 li
195.014 115.368 185.158 112.62 183.198 113.478 cv
181.237 114.335 184.465 117.532 184.465 117.532 cv
184.465 117.532 177.446 115.425 178.431 118.847 cv
179.416 122.269 184.218 124.236 184.218 124.236 cv
184.218 124.236 177.357 121.805 178.907 125.814 cv
179.744 127.982 194.83 137.116 204.997 136.791 cv
215.163 136.465 211.905 128.444 211.905 128.444 cv
210.169 121.188 li
cp
1 .670588 .580392 rgb
f
187.999 126.408 mo
187.893 126.408 187.787 126.363 187.713 126.276 cv
187.578 126.118 187.596 125.88 187.754 125.745 cv
196.482 118.288 li
196.64 118.153 196.878 118.17 197.013 118.329 cv
197.148 118.487 197.13 118.725 196.972 118.86 cv
188.244 126.317 li
188.173 126.378 188.086 126.408 187.999 126.408 cv
cp
0 0 0 rgb
f
206.347 130.659 mo
206.192 130.648 203.261 130.388 201.898 127.985 cv
200.766 125.988 201.086 123.167 202.851 119.602 cv
202.942 119.416 203.166 119.337 203.355 119.432 cv
203.541 119.524 203.618 119.75 203.525 119.936 cv
201.881 123.261 201.553 125.842 202.55 127.608 cv
203.711 129.663 206.35 129.905 206.377 129.907 cv
206.584 129.924 206.738 130.105 206.721 130.313 cv
206.705 130.51 206.541 130.659 206.347 130.659 cv
cp
f
212.662 125.927 mo
199.494 137.441 li
199.494 137.441 205.168 165.918 218.423 173.785 cv
231.678 181.651 242.947 174.347 242.947 174.347 cv
229.529 139.403 li
212.662 125.927 li
cp
.639216 .482353 .564706 rgb
f
232.72 183.504 mo
234.583 138.852 li
288.986 143.975 li
288.541 187.985 li
232.72 183.504 li
cp
.572549 .705882 .917647 rgb
f
221.032 138.852 mo
221.032 138.852 235.428 111.075 257.189 109.485 cv
278.951 107.895 292.803 113.912 298.2 140.329 cv
302.887 163.272 290.385 178.695 290.385 178.695 cv
267.233 159.787 li
221.032 138.852 li
cp
f
268.101 100.862 mo
268.443 111.808 li
268.443 111.808 266.798 113.414 260.853 113.978 cv
256.424 114.398 254.703 112.068 254.703 112.068 cv
255.047 108.827 li
255.589 103.794 li
266.304 101.285 li
268.101 100.862 li
cp
1 .670588 .580392 rgb
f
266.304 101.285 mo
266.282 101.563 266.181 101.892 266.021 102.271 cv
263.813 107.383 257.604 108.563 255.047 108.827 cv
255.589 103.794 li
266.304 101.285 li
cp
0 0 0 rgb
f
253.007 80.6353 mo
253.007 80.6353 247.84 93.4629 250.041 100.521 cv
252.241 107.58 258.692 106.271 262.532 104.784 cv
266.371 103.295 268.103 100.864 268.103 100.864 cv
268.103 100.864 271.762 101.987 274.088 98.5474 cv
276.414 95.1074 274.81 91.2813 272.715 90.4546 cv
270.62 89.6279 268.203 91.1929 268.203 91.1929 cv
270.024 87.4556 li
270.024 87.4556 261.369 68.9829 253.007 80.6353 cv
cp
1 .670588 .580392 rgb
f
268.648 96.6445 mo
268.535 96.6445 268.423 96.5928 268.351 96.4946 cv
268.229 96.3311 268.264 96.1001 268.428 95.979 cv
272.967 92.6211 li
273.132 92.5 273.362 92.5342 273.483 92.6982 cv
273.604 92.8618 273.57 93.0928 273.406 93.2139 cv
268.867 96.5718 li
268.801 96.6206 268.724 96.6445 268.648 96.6445 cv
cp
0 0 0 rgb
f
272.825 96.5313 mo
272.796 96.5313 272.766 96.5278 272.737 96.5205 cv
269.708 95.7842 li
269.51 95.7363 269.389 95.5366 269.437 95.3384 cv
269.485 95.1406 269.687 95.0195 269.883 95.0674 cv
272.912 95.8037 li
273.109 95.8516 273.231 96.0513 273.183 96.2495 cv
273.142 96.418 272.991 96.5313 272.825 96.5313 cv
cp
f
261.333 86.3887 mo
261.181 86.3887 261.039 86.2944 260.985 86.1436 cv
260.261 84.1162 258.446 84.4058 258.37 84.4209 cv
258.169 84.4551 257.978 84.3223 257.942 84.1226 cv
257.907 83.9224 258.039 83.7314 258.238 83.6948 cv
259.103 83.5366 260.93 83.7935 261.68 85.8955 cv
261.749 86.0874 261.648 86.2983 261.457 86.3672 cv
261.416 86.3818 261.374 86.3887 261.333 86.3887 cv
cp
f
251.722 85.5049 mo
251.617 85.5049 251.513 85.4604 251.44 85.3745 cv
251.309 85.2192 251.328 84.9863 251.483 84.8545 cv
251.873 84.5229 253.056 83.5142 253.535 84.0571 cv
253.67 84.2095 253.656 84.4429 253.503 84.5776 cv
253.397 84.6719 253.25 84.6934 253.126 84.646 cv
253.036 84.666 252.711 84.7798 251.96 85.417 cv
251.891 85.4761 251.806 85.5049 251.722 85.5049 cv
cp
f
254.19 95.1606 mo
254.079 95.1606 253.969 95.1104 253.896 95.0151 cv
252.315 92.9434 254.792 89.5835 254.898 89.4414 cv
255.02 89.2778 255.25 89.2446 255.415 89.3672 cv
255.578 89.4888 255.611 89.7202 255.489 89.8833 cv
255.467 89.9136 253.239 92.938 254.483 94.5679 cv
254.606 94.7295 254.575 94.9614 254.413 95.085 cv
254.346 95.1357 254.268 95.1606 254.19 95.1606 cv
cp
f
251.834 90.3926 mo
251.803 90.3926 251.772 90.3887 251.741 90.3809 cv
251.544 90.3296 251.425 90.1284 251.476 89.9312 cv
252.081 87.5894 li
252.132 87.3916 252.335 87.2744 252.531 87.3242 cv
252.728 87.3755 252.847 87.5767 252.796 87.7739 cv
252.191 90.1157 li
252.148 90.2822 251.998 90.3926 251.834 90.3926 cv
cp
f
258.002 91.2026 mo
257.972 91.2026 257.94 91.1987 257.91 91.1909 cv
257.712 91.1396 257.594 90.9385 257.645 90.7412 cv
258.25 88.3994 li
258.301 88.2017 258.504 88.0845 258.7 88.1343 cv
258.897 88.1855 259.016 88.3867 258.965 88.584 cv
258.359 90.9258 li
258.316 91.0923 258.167 91.2026 258.002 91.2026 cv
cp
f
251.975 83.5244 mo
251.975 83.5244 253.052 81.4639 255.59 81.4126 cv
258.127 81.3608 259.633 83.1284 259.633 83.1284 cv
259.633 83.1284 258.578 87.417 262.06 89.6406 cv
265.541 91.8638 268.203 91.1929 268.203 91.1929 cv
270.694 90.2671 li
272.48 86.5845 li
266.304 77.9165 li
254.189 74.0576 li
251.975 83.5244 li
cp
f
242.947 141.009 mo
242.947 141.009 241.901 132.589 240.562 129.449 cv
239.222 126.308 235.428 117.172 233.866 118.616 cv
232.303 120.059 235.205 128.094 233.866 128.54 cv
232.526 128.987 220.474 114.925 218.688 116.264 cv
216.903 117.604 224.715 129.449 224.715 129.449 cv
224.715 129.449 219.135 140.556 220.028 143.587 cv
220.92 146.619 229.529 151.697 229.529 151.697 cv
239.892 149.297 li
242.947 141.009 li
cp
1 .670588 .580392 rgb
f
226.501 132.724 mo
226.374 132.724 226.251 132.66 226.18 132.545 cv
224.394 129.646 li
224.285 129.469 224.34 129.237 224.517 129.128 cv
224.695 129.02 224.927 129.075 225.036 129.251 cv
226.821 132.149 li
226.93 132.327 226.875 132.559 226.698 132.668 cv
226.636 132.706 226.568 132.724 226.501 132.724 cv
cp
0 0 0 rgb
f
250.537 86.0898 mo
249.027 86.0898 247.709 87.4468 247.545 89.2295 cv
247.371 91.103 248.536 92.748 250.142 92.8965 cv
251.751 93.0537 253.193 91.6411 253.366 89.7676 cv
253.54 87.894 252.375 86.249 250.77 86.1006 cv
250.692 86.0933 250.614 86.0898 250.537 86.0898 cv
cp
250.374 93.6572 mo
250.274 93.6572 250.173 93.6528 250.072 93.6436 cv
248.055 93.4565 246.586 91.4453 246.798 89.1602 cv
247.009 86.8745 248.813 85.1685 250.839 85.3535 cv
252.856 85.5405 254.325 87.5518 254.113 89.8369 cv
253.913 92.0078 252.267 93.6572 250.374 93.6572 cv
cp
1 1 1 rgb
f
259.759 87.5825 mo
258.965 87.5825 258.204 87.8569 257.585 88.3706 cv
256.884 88.9531 256.452 89.7734 256.368 90.6812 cv
256.284 91.5889 256.559 92.4746 257.141 93.1758 cv
257.724 93.877 258.544 94.3096 259.452 94.3931 cv
261.32 94.5679 262.991 93.1826 263.164 91.3091 cv
263.248 90.4019 262.973 89.5156 262.391 88.8149 cv
261.808 88.1138 260.987 87.6812 260.08 87.5977 cv
259.973 87.5874 259.866 87.5825 259.759 87.5825 cv
cp
259.773 95.1582 mo
259.643 95.1582 259.513 95.1519 259.382 95.1401 cv
258.275 95.0376 257.274 94.5103 256.564 93.6553 cv
255.854 92.7998 255.519 91.7192 255.621 90.6118 cv
255.724 89.5049 256.251 88.5039 257.106 87.7935 cv
257.962 87.083 259.045 86.749 260.149 86.8506 cv
261.256 86.9531 262.257 87.4805 262.967 88.3354 cv
263.678 89.1904 264.013 90.2715 263.911 91.3784 cv
263.808 92.4854 263.281 93.4863 262.426 94.1968 cv
261.671 94.8237 260.741 95.1582 259.773 95.1582 cv
cp
f
256.19 90.1309 mo
256.138 90.1309 256.085 90.1201 256.035 90.0972 cv
255.72 89.9541 254.708 89.6069 254.208 89.8833 cv
254.026 89.9839 253.798 89.9194 253.698 89.7378 cv
253.597 89.5566 253.662 89.3286 253.843 89.228 cv
254.762 88.7148 256.188 89.3418 256.347 89.415 cv
256.535 89.501 256.618 89.7231 256.532 89.9116 cv
256.469 90.0493 256.333 90.1309 256.19 90.1309 cv
cp
f
263.538 91.7188 mo
263.414 91.7188 263.292 91.6572 263.221 91.5449 cv
263.109 91.3701 263.161 91.1387 263.336 91.0273 cv
265.91 89.3901 271.122 89.8232 271.343 89.8438 cv
271.549 89.8618 271.702 90.0435 271.684 90.25 cv
271.666 90.4565 271.477 90.6055 271.277 90.5908 cv
271.228 90.5874 266.097 90.1606 263.738 91.6602 cv
263.676 91.6997 263.606 91.7188 263.538 91.7188 cv
cp
f
254.025 109.907 mo
254.025 109.907 248.533 110.444 245.003 113.188 cv
244.195 113.817 246.366 147.901 260.142 158.868 cv
275.924 171.434 262.364 160 262.364 160 cv
262.364 160 253.681 130.529 254.025 109.907 cv
cp
.968627 .701961 .411765 rgb
f
1254.74 99.7983 mo
1254.15 103.01 1251.84 105.278 1249.58 104.865 cv
1247.31 104.451 1245.96 101.512 1246.54 98.2998 cv
1247.13 95.0879 1249.44 92.8193 1251.7 93.2334 cv
1253.97 93.6475 1255.32 96.5864 1254.74 99.7983 cv
cp
.407843 .713726 .847059 rgb
f
1222.72 175.903 mo
1215.46 209.209 li
1215.46 209.209 1210.22 228.033 1210.22 232.548 cv
1210.22 237.063 1218.45 243.335 1218.45 243.335 cv
1220.02 235.898 li
1220.02 235.898 1219.35 231.752 1220.33 228.525 cv
1221.32 225.299 1223.12 229.221 1223.12 229.221 cv
1230.48 220.489 li
1243.22 182.225 li
1222.72 175.903 li
cp
.698039 .403922 .337255 rgb
f
1287.84 322.03 mo
1287.84 347.37 li
1259.56 347.37 li
1258.92 323.63 li
1287.84 322.03 li
cp
f
1230.49 324.663 mo
1220.71 348.041 li
1194.62 337.129 li
1203.19 314.98 li
1230.49 324.663 li
cp
f
1231.61 191.503 mo
1197.39 318.901 li
1197.39 318.901 1233.89 333.554 1235.55 333.176 cv
1237.21 332.798 1249.25 277.279 1249.25 277.279 cv
1249.25 277.279 1250.07 333.232 1249.92 333.554 cv
1249.78 333.874 1290.34 334.056 1292.85 332.934 cv
1295.35 331.812 1287.25 194.132 1287.25 194.132 cv
1231.61 191.503 li
cp
.25098 .313726 .498039 rgb
f
1313.44 164.522 mo
1313.44 164.522 1305.75 135.494 1289.39 124.139 cv
1273.02 112.783 1242.69 115.344 1235.29 121.717 cv
1228.25 127.763 1218.59 160.542 1218.59 160.542 cv
1231.28 173.234 li
1229.22 192.588 li
1288.5 196.429 li
1288.39 165.163 li
1313.44 164.522 li
cp
.968627 .701961 .411765 rgb
f
1214.49 363.742 mo
1216.28 364.205 1218.16 363.19 1218.79 361.43 cv
1221.25 354.473 1227.67 339.161 1226.32 338.74 cv
1224.59 338.202 1205.72 337.244 1205.72 337.244 cv
1205.72 337.244 1208.63 327.45 1200.87 326.955 cv
1194.92 326.575 1186.41 330.727 1182.77 332.68 cv
1181.61 333.299 1180.32 333.58 1179.04 333.488 cv
1173.51 333.096 1158.07 332.653 1155.37 339.668 cv
1152.07 348.243 1156.11 348.405 1157.83 348.942 cv
1159.32 349.403 1202.34 360.585 1214.49 363.742 cv
cp
.572549 .705882 .917647 rgb
f
1286.16 367.968 mo
1288.01 367.896 1289.47 366.387 1289.49 364.531 cv
1289.56 357.201 1290.68 340.777 1289.26 340.766 cv
1287.44 340.751 1269.16 345.271 1269.16 345.271 cv
1269.16 345.271 1268.74 335.109 1261.19 336.87 cv
1255.41 338.221 1248.65 344.624 1245.83 347.53 cv
1244.93 348.453 1243.79 349.092 1242.54 349.374 cv
1237.15 350.591 1222.31 354.613 1222.03 362.067 cv
1221.68 371.181 1225.58 370.171 1227.4 370.187 cv
1228.96 370.199 1273.56 368.461 1286.16 367.968 cv
cp
f
1266.26 107.163 mo
1266.4 117.312 li
1266.4 117.312 1264.61 120.254 1258.68 120.816 cv
1254.26 121.236 1252.9 118.342 1252.9 118.342 cv
1253.24 115.108 li
1253.78 110.088 li
1264.47 107.585 li
1266.26 107.163 li
cp
.698039 .403922 .337255 rgb
f
1264.47 107.585 mo
1264.45 107.862 1264.35 108.191 1264.19 108.568 cv
1261.99 113.668 1255.79 114.845 1253.24 115.108 cv
1253.78 110.088 li
1264.47 107.585 li
cp
0 0 0 rgb
f
1251.21 86.9849 mo
1251.21 86.9849 1246.05 99.7817 1248.25 106.823 cv
1250.44 113.864 1256.88 112.56 1260.71 111.075 cv
1264.54 109.59 1266.27 107.165 1266.27 107.165 cv
1266.27 107.165 1269.92 108.286 1272.24 104.854 cv
1274.56 101.422 1272.96 97.6055 1270.87 96.7808 cv
1268.78 95.9561 1266.37 97.5171 1266.37 97.5171 cv
1268.18 93.7891 li
1268.18 93.7891 1259.55 75.3613 1251.21 86.9849 cv
cp
.698039 .403922 .337255 rgb
f
1266.81 102.962 mo
1266.7 102.962 1266.58 102.91 1266.51 102.811 cv
1266.38 102.644 1266.42 102.409 1266.59 102.286 cv
1271.12 98.936 li
1271.28 98.814 1271.52 98.8472 1271.64 99.0142 cv
1271.76 99.1807 1271.73 99.4155 1271.56 99.5386 cv
1267.03 102.889 li
1266.97 102.938 1266.89 102.962 1266.81 102.962 cv
cp
0 0 0 rgb
f
1270.98 102.85 mo
1270.95 102.85 1270.92 102.846 1270.89 102.839 cv
1267.87 102.104 li
1267.67 102.056 1267.54 101.853 1267.59 101.652 cv
1267.64 101.45 1267.84 101.328 1268.04 101.376 cv
1271.07 102.11 li
1271.27 102.159 1271.39 102.362 1271.34 102.563 cv
1271.3 102.735 1271.15 102.85 1270.98 102.85 cv
cp
f
1259.51 92.8413 mo
1259.36 92.8413 1259.21 92.7456 1259.16 92.5923 cv
1258.44 90.5776 1256.64 90.8677 1256.56 90.8784 cv
1256.36 90.9165 1256.16 90.7783 1256.12 90.5752 cv
1256.09 90.3716 1256.22 90.1777 1256.42 90.1406 cv
1257.29 89.9834 1259.12 90.2397 1259.87 92.3403 cv
1259.93 92.5356 1259.83 92.75 1259.64 92.8193 cv
1259.6 92.8345 1259.55 92.8413 1259.51 92.8413 cv
cp
f
1249.92 91.8501 mo
1249.82 91.8501 1249.71 91.8052 1249.64 91.7178 cv
1249.5 91.5601 1249.52 91.3232 1249.68 91.1895 cv
1250.07 90.8579 1251.26 89.8506 1251.74 90.394 cv
1251.88 90.5493 1251.86 90.7866 1251.71 90.9233 cv
1251.6 91.0186 1251.45 91.0405 1251.33 90.9932 cv
1251.23 91.0142 1250.91 91.1299 1250.17 91.7607 cv
1250.1 91.8208 1250.01 91.8501 1249.92 91.8501 cv
cp
f
1251.54 102.482 mo
1251.46 102.482 1251.38 102.456 1251.31 102.401 cv
1250.21 101.523 1249.69 100.547 1249.76 99.5005 cv
1249.91 97.3369 1252.59 95.7349 1252.71 95.6675 cv
1252.88 95.5635 1253.12 95.6216 1253.22 95.8003 cv
1253.33 95.9785 1253.27 96.2085 1253.09 96.314 cv
1253.06 96.3281 1250.63 97.7852 1250.51 99.5547 cv
1250.45 100.34 1250.88 101.1 1251.78 101.814 cv
1251.94 101.943 1251.96 102.179 1251.83 102.341 cv
1251.76 102.434 1251.65 102.482 1251.54 102.482 cv
cp
f
1281.75 119.81 mo
1281.75 119.81 1279.81 134.749 1281.21 144.74 cv
1282.71 155.413 1287.25 171.269 1287.25 171.269 cv
1284.75 174.912 li
1284.75 174.912 1280.67 172.768 1278.37 169.317 cv
1275.54 165.053 1270.59 152.087 1270.55 136.254 cv
1270.53 123.27 1272.23 117.056 1272.23 117.056 cv
1272.23 117.056 1279.72 117.727 1281.75 119.81 cv
cp
.639216 .482353 .564706 rgb
f
1250.59 116.438 mo
1250.59 116.438 1245.89 121.294 1241.55 131.583 cv
1237.22 141.871 1233.1 161.362 1233.1 161.362 cv
1233.1 161.362 1234.81 128.303 1237.64 121.531 cv
1239.87 116.187 1250.59 116.438 1250.59 116.438 cv
cp
f
1250.04 96.7256 mo
1250 96.7256 1249.97 96.7217 1249.94 96.7139 cv
1249.74 96.6621 1249.62 96.4575 1249.67 96.2568 cv
1250.28 93.9204 li
1250.33 93.7202 1250.54 93.604 1250.73 93.6509 cv
1250.93 93.7026 1251.05 93.9072 1251 94.1079 cv
1250.4 96.4443 li
1250.36 96.6133 1250.2 96.7256 1250.04 96.7256 cv
cp
0 0 0 rgb
f
1256.46 97.1421 mo
1256.43 97.1421 1256.4 97.1382 1256.37 97.1304 cv
1256.17 97.0781 1256.04 96.8735 1256.1 96.6733 cv
1256.7 94.3374 li
1256.75 94.1362 1256.96 94.019 1257.16 94.0679 cv
1257.36 94.1201 1257.48 94.3247 1257.43 94.5249 cv
1256.82 96.8608 li
1256.78 97.0303 1256.63 97.1421 1256.46 97.1421 cv
cp
f
1265.35 180.216 mo
1242.38 194.232 li
1241.55 194.742 1240.25 194.527 1239.48 193.754 cv
1208.45 162.477 li
1207.69 161.703 1207.74 160.662 1208.58 160.153 cv
1231.54 146.137 li
1232.38 145.627 1233.67 145.841 1234.44 146.615 cv
1265.47 177.892 li
1266.24 178.666 1266.18 179.707 1265.35 180.216 cv
cp
.301961 .615686 .756863 rgb
f
1262.66 181.846 mo
1239.7 195.862 li
1238.86 196.372 1237.56 196.157 1236.8 195.383 cv
1205.77 164.106 li
1205 163.333 1205.05 162.292 1205.89 161.783 cv
1228.85 147.767 li
1229.69 147.257 1230.99 147.471 1231.76 148.245 cv
1262.78 179.522 li
1263.55 180.296 1263.5 181.336 1262.66 181.846 cv
cp
.407843 .713726 .847059 rgb
f
1264.3 155.038 mo
1263.11 153.591 1261.31 152.795 1259.43 152.91 cv
1256.37 153.098 1251.75 153.457 1250.69 153.951 cv
1249.06 154.706 1245.36 157.682 1245.36 157.682 cv
1246.88 159.84 li
1246.88 159.84 1232.82 167.184 1233.95 170.08 cv
1234.73 172.052 1240.97 169.228 1240.97 169.228 cv
1240.97 169.228 1234.73 172.686 1235.81 174.849 cv
1236.9 177.011 1244.94 173.607 1244.94 173.607 cv
1244.94 173.607 1238.74 177.586 1242.03 178.564 cv
1245.32 179.542 1267.73 173.382 1268.91 166.783 cv
1269.68 162.442 1266.54 157.745 1264.3 155.038 cv
cp
.698039 .403922 .337255 rgb
f
1246.35 160.022 mo
1246.22 160.022 1246.1 159.96 1246.03 159.846 cv
1245.92 159.669 1245.97 159.438 1246.15 159.329 cv
1249.73 157.101 li
1249.91 156.991 1250.14 157.045 1250.25 157.221 cv
1250.36 157.397 1250.3 157.628 1250.13 157.738 cv
1246.54 159.966 li
1246.48 160.004 1246.42 160.022 1246.35 160.022 cv
cp
0 0 0 rgb
f
1239.87 169.99 mo
1239.73 169.99 1239.6 169.918 1239.54 169.792 cv
1239.44 169.609 1239.51 169.382 1239.69 169.284 cv
1249.08 164.247 li
1249.26 164.149 1249.49 164.217 1249.58 164.4 cv
1249.68 164.583 1249.61 164.81 1249.43 164.908 cv
1240.04 169.945 li
1239.99 169.976 1239.93 169.99 1239.87 169.99 cv
cp
f
1243.83 174.709 mo
1243.7 174.709 1243.57 174.638 1243.5 174.513 cv
1243.4 174.331 1243.47 174.104 1243.65 174.004 cv
1253.18 168.824 li
1253.36 168.727 1253.59 168.793 1253.69 168.975 cv
1253.79 169.157 1253.72 169.384 1253.54 169.483 cv
1244.01 174.664 li
1243.95 174.694 1243.89 174.709 1243.83 174.709 cv
cp
f
1311.6 164.57 mo
1311.6 164.57 1316.78 184.255 1298.74 186.927 cv
1280.71 189.599 1264.47 171.59 1264.47 171.59 cv
1262.22 153.439 li
1297.91 164.919 li
1311.6 164.57 li
cp
.698039 .403922 .337255 rgb
f
1249.25 277.654 mo
1249.05 277.653 1248.88 277.485 1248.88 277.278 cv
1249.04 215.599 li
1234.14 209.955 li
1233.95 209.882 1233.85 209.665 1233.92 209.472 cv
1234 209.277 1234.21 209.18 1234.41 209.254 cv
1249.55 214.989 li
1249.7 215.045 1249.79 215.185 1249.79 215.341 cv
1249.63 277.28 li
1249.63 277.487 1249.46 277.654 1249.25 277.654 cv
cp
.639216 .482353 .564706 rgb
f
1188.49 336.286 mo
1188.46 336.286 1188.43 336.282 1188.4 336.274 cv
1178.94 333.852 li
1178.74 333.8 1178.62 333.596 1178.67 333.396 cv
1178.72 333.194 1178.92 333.071 1179.13 333.125 cv
1188.58 335.548 li
1188.79 335.6 1188.91 335.804 1188.86 336.004 cv
1188.81 336.174 1188.66 336.286 1188.49 336.286 cv
cp
.968627 .701961 .411765 rgb
f
1242.54 349.749 mo
1242.34 349.749 1242.17 349.59 1242.16 349.387 cv
1242.16 349.18 1242.32 349.007 1242.53 348.999 cv
1252.96 348.637 li
1253.17 348.63 1253.34 348.792 1253.34 348.999 cv
1253.35 349.206 1253.19 349.379 1252.98 349.387 cv
1242.55 349.749 li
1242.55 349.749 1242.54 349.749 1242.54 349.749 cv
cp
f
1220.33 228.9 mo
1220.17 228.9 1220.02 228.791 1219.97 228.624 cv
1219.86 228.21 1217.25 218.438 1221.78 215.017 cv
1221.95 214.894 1222.18 214.925 1222.31 215.091 cv
1222.43 215.256 1222.4 215.491 1222.23 215.616 cv
1218.1 218.73 1220.67 228.33 1220.7 228.427 cv
1220.75 228.626 1220.63 228.832 1220.43 228.887 cv
1220.4 228.896 1220.37 228.9 1220.33 228.9 cv
cp
0 0 0 rgb
f
1254.87 105.208 mo
1254.68 105.208 1254.52 105.076 1254.5 104.891 cv
1254.46 104.687 1254.6 104.495 1254.81 104.463 cv
1254.83 104.46 1256.77 104.135 1257.67 102.414 cv
1257.77 102.23 1258 102.16 1258.17 102.255 cv
1258.36 102.351 1258.43 102.577 1258.33 102.761 cv
1257.26 104.826 1255.02 105.19 1254.92 105.204 cv
1254.9 105.207 1254.88 105.208 1254.87 105.208 cv
cp
f
1265.2 99.5835 mo
1265.2 99.5835 1266.27 94.5234 1266.4 94.0532 cv
1266.53 93.5835 1262.87 87.9165 1256.76 87.0835 cv
1250.73 86.2598 1250.85 87.9395 1250.85 87.9395 cv
1250.85 87.9395 1249.31 79.4165 1250.34 78.75 cv
1251.37 78.0835 1252.03 79.3335 1252.03 79.3335 cv
1252.03 79.3335 1253.24 75.0835 1256.43 75.5835 cv
1258.95 75.9775 1259.51 78.5835 1259.51 78.5835 cv
1259.51 78.5835 1260.45 75.1665 1263.87 76.5 cv
1267.28 77.8335 1270.45 86.1665 1270.45 86.1665 cv
1270.45 86.1665 1274.12 85.5835 1274.78 88.6665 cv
1275.45 91.75 1272.75 98.646 1272.75 98.646 cv
1272.75 98.646 1271.76 96.624 1269.03 97 cv
1266.3 97.376 1265.2 99.5835 1265.2 99.5835 cv
cp
f
1258.38 120.921 mo
1254.19 120.921 1251.32 118.527 1251.27 118.488 cv
1251.11 118.354 1251.09 118.118 1251.23 117.96 cv
1251.36 117.801 1251.6 117.785 1251.76 117.917 cv
1252.03 118.149 1258.49 123.489 1266.16 117.025 cv
1266.32 116.892 1266.55 116.911 1266.69 117.07 cv
1266.82 117.229 1266.8 117.465 1266.64 117.598 cv
1263.65 120.12 1260.79 120.921 1258.38 120.921 cv
cp
.25098 .313726 .498039 rgb
f
1272.24 101.357 mo
1271.66 104.569 1269.35 106.837 1267.08 106.424 cv
1264.82 106.01 1263.47 103.07 1264.05 99.8584 cv
1264.64 96.6465 1266.95 94.3784 1269.21 94.7925 cv
1271.47 95.2061 1272.83 98.1455 1272.24 101.357 cv
cp
.407843 .713726 .847059 rgb
f
1273.35 101.56 mo
1272.77 104.772 1270.46 107.041 1268.19 106.626 cv
1265.93 106.213 1264.58 103.273 1265.16 100.062 cv
1265.75 96.8496 1268.06 94.5815 1270.32 94.9951 cv
1272.58 95.4092 1273.94 98.3486 1273.35 101.56 cv
cp
1 1 1 rgb
f
1269.26 83.4404 mo
1269.26 83.4404 1271.62 90.1455 1269.47 96.3506 cv
1267.31 102.556 1271.87 99.5835 1271.87 99.5835 cv
1271.87 99.5835 1274.32 89.4365 1269.26 83.4404 cv
cp
f
255.811 99.1157 mo
256.188 99.4692 256.825 99.9312 257.351 99.6567 cv
257.875 99.3857 258.054 98.6172 258.1 98.0298 cv
255.811 99.1157 li
cp
257.003 100.481 mo
255.903 100.481 254.952 99.2886 254.904 99.228 cv
254.834 99.1396 254.809 99.0249 254.834 98.9155 cv
254.86 98.8062 254.935 98.7148 255.036 98.6665 cv
258.315 97.1108 li
258.426 97.0596 258.553 97.0645 258.658 97.125 cv
258.763 97.186 258.832 97.2949 258.841 97.416 cv
258.848 97.5063 258.997 99.6362 257.69 100.312 cv
257.459 100.431 257.228 100.481 257.003 100.481 cv
cp
0 0 0 rgb
f
198.792 138.527 mo
207.016 133.028 li
208.367 132.124 208.73 130.295 207.827 128.943 cv
192.96 106.71 li
192.056 105.358 190.227 104.995 188.875 105.899 cv
180.651 111.397 li
179.299 112.302 178.936 114.131 179.84 115.483 cv
194.707 137.716 li
195.611 139.068 197.44 139.431 198.792 138.527 cv
cp
.25098 .313726 .498039 rgb
f
201.367 136.806 mo
209.59 131.307 li
210.942 130.403 211.305 128.574 210.401 127.222 cv
195.535 104.988 li
194.63 103.636 192.801 103.273 191.449 104.177 cv
183.226 109.676 li
181.874 110.58 181.511 112.409 182.415 113.761 cv
197.281 135.994 li
198.186 137.346 200.015 137.709 201.367 136.806 cv
cp
0 0 0 rgb
f
205.429 130.898 mo
205.429 131.698 204.78 132.347 203.98 132.347 cv
203.18 132.347 202.531 131.698 202.531 130.898 cv
202.531 130.098 203.18 129.449 203.98 129.449 cv
204.78 129.449 205.429 130.098 205.429 130.898 cv
cp
.25098 .313726 .498039 rgb
f
203.374 111.869 mo
203.374 111.869 194.712 112.776 196.408 116.729 cv
197.2 118.574 203.675 118.68 203.675 118.68 cv
203.675 118.68 202.531 124.327 206.346 126.729 cv
209.803 128.905 210.954 127.421 210.954 127.421 cv
210.954 127.421 209.205 115.745 203.374 111.869 cv
cp
1 .670588 .580392 rgb
f
269.795 342.999 mo
269.728 342.999 269.659 342.98 269.597 342.942 cv
269.153 342.666 258.71 336.119 258.761 332.158 cv
258.771 331.34 259.191 330.681 260.01 330.2 cv
260.685 329.805 261.453 329.718 262.293 329.941 cv
265.346 330.757 268.763 335.595 270.35 338.085 cv
270.096 335.438 269.9 330.933 271.361 330.019 cv
271.686 329.814 272.239 329.683 273.032 330.212 cv
276.675 332.644 275.291 341.577 275.23 341.956 cv
275.198 342.16 275.009 342.297 274.801 342.267 cv
274.596 342.234 274.457 342.042 274.49 341.837 cv
274.503 341.749 275.86 333.001 272.616 330.835 cv
272.061 330.465 271.834 330.608 271.759 330.654 cv
270.615 331.37 270.863 336.574 271.289 339.687 cv
271.313 339.864 271.208 340.035 271.038 340.093 cv
270.866 340.148 270.68 340.079 270.591 339.923 cv
270.544 339.841 265.852 331.669 262.1 330.666 cv
261.451 330.492 260.892 330.553 260.39 330.847 cv
259.805 331.19 259.518 331.622 259.511 332.168 cv
259.473 335.107 267.065 340.482 269.994 342.306 cv
270.169 342.415 270.223 342.646 270.114 342.822 cv
270.042 342.937 269.92 342.999 269.795 342.999 cv
cp
.25098 .313726 .498039 rgb
f
212.444 342.278 mo
212.403 342.278 212.361 342.271 212.32 342.257 cv
211.826 342.083 200.213 337.952 199.406 334.074 cv
199.239 333.272 199.506 332.538 200.201 331.893 cv
200.774 331.36 201.514 331.118 202.374 331.146 cv
205.532 331.281 209.915 335.265 212.003 337.352 cv
211.183 334.822 210.016 330.467 211.245 329.258 cv
211.517 328.989 212.03 328.741 212.918 329.085 cv
217 330.671 217.583 339.692 217.606 340.075 cv
217.618 340.282 217.46 340.46 217.254 340.472 cv
217.048 340.487 216.87 340.327 216.857 340.12 cv
216.852 340.031 216.283 331.196 212.646 329.784 cv
212.025 329.543 211.833 329.731 211.77 329.793 cv
210.809 330.739 212.178 335.766 213.266 338.712 cv
213.329 338.88 213.263 339.069 213.109 339.162 cv
212.955 339.256 212.757 339.227 212.637 339.094 cv
212.573 339.023 206.223 332.062 202.342 331.896 cv
201.673 331.87 201.139 332.045 200.712 332.441 cv
200.216 332.903 200.029 333.387 200.14 333.922 cv
200.739 336.799 209.315 340.403 212.569 341.55 cv
212.764 341.618 212.867 341.833 212.798 342.028 cv
212.744 342.182 212.599 342.278 212.444 342.278 cv
cp
f
260.451 155.168 mo
260.4 155.168 260.348 155.158 260.298 155.136 cv
260.109 155.051 260.024 154.829 260.109 154.64 cv
266.281 140.855 li
266.366 140.667 266.588 140.582 266.776 140.667 cv
266.965 140.751 267.05 140.973 266.965 141.162 cv
260.793 154.947 li
260.731 155.086 260.594 155.168 260.451 155.168 cv
cp
f
273.187 183.129 mo
273.187 183.129 277.941 193.584 288.274 192.421 cv
294.366 191.735 295.076 188.81 295.076 188.81 cv
295.076 184.575 li
295.076 184.575 280.629 188.966 275.233 179.76 cv
271.192 172.865 273.187 183.129 273.187 183.129 cv
cp
.968627 .701961 .411765 rgb
f
260.644 114.342 mo
257.046 114.342 254.391 113.203 254.347 113.183 cv
254.157 113.1 254.072 112.878 254.155 112.689 cv
254.238 112.5 254.46 112.415 254.649 112.497 cv
254.719 112.528 261.725 115.523 268.246 111.489 cv
268.424 111.38 268.654 111.436 268.762 111.611 cv
268.871 111.787 268.817 112.018 268.641 112.127 cv
265.887 113.83 263.054 114.342 260.644 114.342 cv
cp
.25098 .313726 .498039 rgb
f
267.233 159.787 mo
242.947 141.009 li
229.529 151.697 li
229.529 151.697 241.214 180.879 258.576 185.901 cv
275.938 190.923 288.986 177.552 288.986 177.552 cv
267.233 159.787 li
cp
.639216 .482353 .564706 rgb
f
137.089 189.023 mo
137.089 189.023 142.972 209.39 141.243 213.558 cv
139.513 217.725 130.837 215.381 130.837 215.381 cv
127.257 190.945 li
137.089 189.023 li
cp
.866667 .521569 .478431 rgb
f
101.584 114.949 mo
101.584 114.949 110.895 108 126.419 131.261 cv
136.092 145.755 144.814 195.975 144.814 195.975 cv
144.814 195.975 136.478 200.996 129.007 200.052 cv
121.537 199.108 121.537 199.108 121.537 199.108 cv
89.0483 129.467 li
84.2432 116.975 li
101.584 114.949 li
cp
.639216 .482353 .564706 rgb
f
101.841 117.251 mo
101.841 117.251 114.339 121.303 119.149 141.333 cv
125.128 166.234 120.422 192.667 120.422 192.667 cv
120.422 192.667 110.643 192.413 95.0957 189.725 cv
79.5483 187.037 77.4004 186.73 77.4004 186.73 cv
88.1865 113.949 li
101.841 117.251 li
cp
.937255 .643137 .34902 rgb
f
128.125 310.118 mo
123.79 332.884 li
108.873 341.254 li
95.1006 336.566 li
97.3057 310.118 li
128.125 310.118 li
cp
.776471 .458824 .443137 rgb
f
93.5649 337.229 mo
101.548 352.477 li
106.6 362.134 li
106.6 362.134 156.41 364.025 158.935 362.134 cv
161.46 360.242 161.46 354.889 158.935 352.675 cv
156.41 350.472 126.775 334.392 126.775 334.392 cv
126.775 334.392 126.775 329.974 124.931 329.548 cv
123.077 329.123 110.799 334.392 110.799 334.392 cv
96.4692 329.529 li
93.5649 337.229 li
cp
.937255 .643137 .34902 rgb
f
101.549 312.908 mo
98.1138 336.566 li
72.7007 336.566 li
71.6294 312.908 li
101.549 312.908 li
cp
.866667 .521569 .478431 rgb
f
65.8223 358.038 mo
65.8223 360.771 67.4966 364.556 73.3896 365.813 cv
79.2729 367.081 110.052 365.813 111.007 364.764 cv
111.518 364.215 111.84 361.982 112.029 359.978 cv
112.237 357.849 111.707 355.702 110.534 353.914 cv
97.9351 334.703 li
97.9351 334.703 94.4639 331.138 87.71 331.762 cv
80.9565 332.396 77.5703 334.703 77.5703 334.703 cv
77.5703 334.703 73.2192 332.414 71.7436 333.474 cv
70.5234 334.354 67.6382 348.514 66.2671 355.182 cv
65.9829 356.553 65.8223 357.575 65.8223 358.038 cv
cp
.968627 .701961 .411765 rgb
f
127.197 178.928 mo
127.197 178.928 134.546 213.779 138.244 240.052 cv
141.941 266.324 144.016 308.951 141.611 310.536 cv
139.206 312.12 110.979 314.068 110.979 314.068 cv
110.979 314.068 101.464 317.676 85.0342 317.234 cv
73.1103 316.914 63.4126 314.121 63.4126 314.121 cv
63.4126 314.121 65.8223 202.272 77.4004 178.985 cv
84.4165 164.873 127.197 178.928 127.197 178.928 cv
cp
.407843 .713726 .847059 rgb
f
82.0713 306.325 mo
75.7353 306.325 69.1157 305.83 63.5181 304.343 cv
63.3179 304.29 63.1987 304.084 63.2519 303.884 cv
63.3052 303.685 63.5112 303.565 63.7104 303.618 cv
80.2417 308.01 105.858 303.655 106.114 303.611 cv
106.316 303.577 106.512 303.713 106.548 303.916 cv
106.583 304.12 106.446 304.314 106.242 304.35 cv
106.07 304.38 94.6274 306.325 82.0713 306.325 cv
cp
.360784 .411765 .647059 rgb
f
119.892 305.056 mo
117.298 305.056 114.769 304.857 112.566 304.346 cv
112.365 304.299 112.239 304.098 112.286 303.896 cv
112.333 303.694 112.534 303.568 112.736 303.615 cv
122.135 305.801 137.741 302.122 137.898 302.086 cv
138.099 302.032 138.302 302.16 138.35 302.363 cv
138.398 302.564 138.274 302.767 138.073 302.814 cv
137.951 302.844 128.57 305.056 119.892 305.056 cv
cp
f
82.1855 346.396 mo
82.022 346.396 81.8716 346.289 81.8237 346.125 cv
81.7656 345.925 81.8809 345.716 82.0806 345.658 cv
89.0332 343.638 97.0996 345.57 97.4385 345.653 cv
97.6406 345.703 97.7642 345.907 97.7148 346.109 cv
97.666 346.312 97.4648 346.435 97.2598 346.386 cv
97.1782 346.365 89.0478 344.42 82.2905 346.381 cv
82.2554 346.392 82.2202 346.396 82.1855 346.396 cv
cp
1 1 1 rgb
f
81.0166 342.001 mo
80.853 342.001 80.7026 341.894 80.6548 341.729 cv
80.5967 341.529 80.7119 341.32 80.9116 341.263 cv
87.8652 339.242 95.9292 341.175 96.269 341.258 cv
96.4712 341.308 96.5947 341.512 96.5454 341.714 cv
96.4966 341.916 96.2959 342.039 96.0903 341.99 cv
96.0088 341.97 87.8789 340.024 81.1216 341.985 cv
81.0864 341.996 81.0513 342.001 81.0166 342.001 cv
cp
f
128.125 341.631 mo
127.929 341.631 127.764 341.479 127.75 341.281 cv
127.735 341.073 127.891 340.894 128.098 340.878 cv
137.97 340.164 li
138.174 340.158 138.358 340.305 138.373 340.513 cv
138.388 340.721 138.232 340.9 138.025 340.916 cv
128.153 341.63 li
128.144 341.63 128.134 341.631 128.125 341.631 cv
cp
f
124.125 337.605 mo
123.935 337.605 123.771 337.461 123.751 337.268 cv
123.73 337.061 123.88 336.875 124.087 336.854 cv
130.691 336.172 li
130.896 336.158 131.083 336.302 131.104 336.508 cv
131.125 336.715 130.975 336.9 130.768 336.922 cv
124.165 337.604 li
124.151 337.604 124.139 337.605 124.125 337.605 cv
cp
f
107.144 101.176 mo
107.144 101.176 107.606 92.6816 106.805 86.6816 cv
106.262 82.6138 98.9941 80.3696 98.9941 80.3696 cv
98.9941 80.3696 85.2295 80.9863 83.4087 85.2793 cv
81.5879 89.5723 83.0425 96.0459 83.0425 96.0459 cv
107.144 101.176 li
cp
0 0 0 rgb
f
88.5908 105.7 mo
88.5019 115.671 li
88.5019 115.671 90.2744 118.553 96.1035 119.079 cv
100.445 119.471 101.841 117.251 101.841 117.251 cv
100.867 108.517 li
90.3545 106.106 li
88.5908 105.7 li
cp
.988235 .639216 .592157 rgb
f
88.6118 105.092 mo
88.6343 105.365 88.7349 105.687 88.8926 106.057 cv
91.0796 111.057 98.9121 113.2 101.42 113.447 cv
100.867 108.517 li
88.6118 105.092 li
cp
0 0 0 rgb
f
103.292 85.8101 mo
103.292 85.8101 108.414 98.3579 106.289 105.285 cv
104.165 112.212 97.8364 110.959 94.0669 109.518 cv
90.2974 108.077 88.5893 105.702 88.5893 105.702 cv
88.5893 105.702 85.0083 106.82 82.7134 103.459 cv
80.4184 100.098 81.9736 96.3408 84.0229 95.5215 cv
86.0723 94.7017 88.4482 96.2251 88.4482 96.2251 cv
86.646 92.5708 li
86.646 92.5708 95.0459 74.4282 103.292 85.8101 cv
cp
.866667 .521569 .478431 rgb
f
88.4482 96.2251 mo
88.4482 96.2251 93.749 97.4834 97.6587 91.6699 cv
101.568 85.8564 101.311 83.4058 101.311 83.4058 cv
104.796 89.6631 li
104.796 89.6631 105.767 85.4395 104.159 82.6714 cv
102.55 79.9033 100.766 80.4048 100.766 80.4048 cv
88.8975 82.9453 li
85.478 92.2729 li
88.4482 96.2251 li
cp
0 0 0 rgb
f
102.346 101.553 mo
102.172 101.553 102.016 101.431 101.979 101.254 cv
101.935 101.051 102.065 100.851 102.268 100.808 cv
102.862 100.681 103.222 100.424 103.371 100.021 cv
103.823 98.7871 102.323 96.4448 101.707 95.6465 cv
101.58 95.4819 101.61 95.2456 101.775 95.1182 cv
101.939 94.9907 102.175 95.021 102.303 95.1865 cv
102.556 95.5137 104.753 98.439 104.078 100.28 cv
103.836 100.937 103.28 101.362 102.425 101.544 cv
102.398 101.55 102.372 101.553 102.346 101.553 cv
cp
f
87.7515 102.011 mo
87.6475 102.011 87.5439 101.969 87.4697 101.885 cv
84.209 98.207 li
84.0708 98.0513 84.085 97.813 84.2407 97.6753 cv
84.397 97.5381 84.6352 97.5522 84.7725 97.707 cv
88.0332 101.385 li
88.1714 101.541 88.1572 101.779 88.0015 101.917 cv
87.9297 101.98 87.8403 102.011 87.7515 102.011 cv
cp
f
84.2114 100.943 mo
84.0234 100.943 83.8608 100.803 83.8379 100.611 cv
83.813 100.405 83.9604 100.217 84.167 100.192 cv
86.5102 99.9116 li
86.7095 99.8813 86.9048 100.034 86.9292 100.241 cv
86.9541 100.447 86.8066 100.635 86.6001 100.66 cv
84.2568 100.94 li
84.2417 100.942 84.2266 100.943 84.2114 100.943 cv
cp
f
105.083 91.4688 mo
105.057 91.4688 105.031 91.4658 105.005 91.4604 cv
102.813 91.0024 li
102.61 90.96 102.479 90.7603 102.522 90.5566 cv
102.564 90.3525 102.768 90.2241 102.968 90.2651 cv
105.159 90.7231 li
105.363 90.7656 105.493 90.9653 105.451 91.1689 cv
105.414 91.3467 105.257 91.4688 105.083 91.4688 cv
cp
f
95.8711 92.6045 mo
95.729 92.6045 95.5928 92.5234 95.5288 92.3862 cv
95.4414 92.1973 95.5234 91.9736 95.7119 91.8857 cv
99.3892 90.1782 li
99.5767 90.0923 99.8013 90.1724 99.8896 90.3613 cv
99.977 90.5503 99.895 90.7739 99.7065 90.8618 cv
96.0293 92.5693 li
95.978 92.5928 95.9238 92.6045 95.8711 92.6045 cv
cp
f
104.909 96.564 mo
104.743 96.564 104.59 96.4531 104.545 96.2852 cv
103.933 94.021 li
103.9 93.8994 103.93 93.7695 104.013 93.6748 cv
104.73 92.8564 li
104.867 92.7002 105.106 92.6855 105.261 92.8213 cv
105.418 92.958 105.434 93.1963 105.296 93.3525 cv
104.712 94.019 li
105.272 96.0889 li
105.327 96.2896 105.208 96.4961 105.007 96.5508 cv
104.974 96.5596 104.941 96.564 104.909 96.564 cv
cp
f
98.124 96.9526 mo
97.958 96.9526 97.8057 96.8418 97.7602 96.6738 cv
97.1484 94.4097 li
97.1147 94.2852 97.1475 94.1519 97.2349 94.0571 cv
98.2226 92.9805 li
98.3638 92.8271 98.6025 92.8174 98.7544 92.9575 cv
98.9077 93.0981 98.918 93.3364 98.7773 93.4893 cv
97.9297 94.4136 li
98.4878 96.4775 li
98.542 96.6782 98.4228 96.8853 98.2222 96.9395 cv
98.1894 96.9482 98.1562 96.9526 98.124 96.9526 cv
cp
f
95.2139 182.766 mo
98.4541 184.786 102.304 182.766 102.304 182.766 cv
102.304 182.766 112.134 168.226 117.074 149.146 cv
117.154 148.846 117.224 148.545 117.294 148.246 cv
118.264 144.396 119.014 140.375 119.434 136.255 cv
119.474 135.986 119.494 135.726 119.524 135.456 cv
119.974 130.605 120.244 126.565 120.364 123.206 cv
118.746 121.494 li
117.608 120.29 116.369 119.184 115.043 118.189 cv
112.88 116.565 li
112.78 118.166 112.634 121.406 112.454 123.206 cv
112.124 126.536 111.644 130.166 110.954 133.956 cv
110.004 139.105 108.664 144.545 106.754 149.906 cv
106.554 150.486 106.344 151.065 106.124 151.646 cv
97.6738 173.875 93.5337 176.536 93.5337 176.536 cv
93.5337 176.536 91.6641 180.536 95.2139 182.766 cv
cp
1 .788235 .580392 rgb
f
88.1865 113.949 mo
88.1865 113.949 72.6479 114.331 56.5889 134.664 cv
40.5298 154.998 47.7275 172.202 67.7939 180.322 cv
87.8603 188.441 108.576 189.814 108.576 189.814 cv
111.535 161.425 li
93.688 156.34 li
93.688 156.34 95.2744 124.264 88.1865 113.949 cv
cp
.639216 .482353 .564706 rgb
f
116.111 171.542 mo
110.144 135.382 li
85.0049 134.176 li
84.1738 134.136 83.5034 134.849 83.5947 135.676 cv
87.625 172.293 li
116.111 171.542 li
cp
.490196 .639216 .858824 rgb
f
86.4614 134.246 mo
90.6641 172.442 li
101.147 172.161 li
113.234 171.853 li
119.149 171.692 li
118.849 169.899 li
116.71 156.941 li
114.174 141.554 li
113.381 136.766 li
113.262 136.044 112.654 135.503 111.923 135.468 cv
86.4614 134.246 li
cp
.572549 .705882 .917647 rgb
f
124.962 172.294 mo
119.587 143.443 li
97.5273 142.384 li
97.1094 142.364 96.7764 142.729 96.8335 143.143 cv
101.535 177.058 li
124.962 172.294 li
cp
.25098 .313726 .498039 rgb
f
100.219 142.512 mo
102.225 157.016 li
105.022 177.228 li
108.708 176.48 li
114.023 175.395 li
128.459 172.456 li
123.308 144.818 li
123.176 144.109 122.575 143.585 121.855 143.55 cv
100.219 142.512 li
cp
.360784 .411765 .647059 rgb
f
120.68 162.564 mo
120.68 162.564 132.018 162.098 130.135 165.308 cv
128.251 168.518 118.972 166.969 118.972 166.969 cv
113.35 165.851 li
120.68 162.564 li
cp
.866667 .521569 .478431 rgb
f
103.317 191.257 mo
103.317 191.257 104.97 216.81 103.719 218.144 cv
102.469 219.477 96.2324 219.921 96.2324 219.921 cv
92.6743 206.81 li
100.247 187.531 li
103.317 191.257 li
cp
.968627 .701961 .411765 rgb
f
103.321 187.587 mo
103.321 187.587 101.135 205.477 100.024 205.477 cv
98.9131 205.477 61.3574 198.587 60.4687 197.699 cv
59.5796 196.81 62.6909 178.365 64.2466 177.921 cv
65.8022 177.477 100.913 183.921 100.913 183.921 cv
103.321 187.587 li
cp
1 .788235 .580392 rgb
f
62.9131 195.921 mo
62.9131 195.921 59.4883 211.477 60.312 212.144 cv
61.1352 212.81 94.6626 219.921 96.2324 219.921 cv
97.8022 219.921 100.247 200.587 100.247 200.587 cv
62.9131 195.921 li
cp
f
108.883 165.847 mo
108.883 165.847 114.07 163.389 116.564 162.863 cv
118.927 162.365 120.68 162.564 120.68 162.564 cv
121.287 166.232 li
121.287 166.232 129.297 168.387 134.866 171.514 cv
140.435 174.641 139.272 177.185 139.272 177.185 cv
139.272 177.185 142.791 179.693 141.161 181.174 cv
139.53 182.656 133.64 180.813 133.64 180.813 cv
133.64 180.813 141.024 184.027 137.831 185.563 cv
134.637 187.1 127.806 186.252 127.806 186.252 cv
127.806 186.252 112.752 188.129 108.073 182.706 cv
103.395 177.282 108.883 165.847 108.883 165.847 cv
cp
.866667 .521569 .478431 rgb
f
138.948 177.193 mo
138.901 177.193 138.853 177.186 138.806 177.169 cv
127.381 173.266 li
127.152 173.188 127.03 172.938 127.108 172.709 cv
127.186 172.48 127.434 172.357 127.665 172.437 cv
139.089 176.34 li
139.318 176.418 139.44 176.667 139.362 176.896 cv
139.3 177.079 139.13 177.193 138.948 177.193 cv
cp
0 0 0 rgb
f
134.409 181.47 mo
134.361 181.47 134.313 181.462 134.266 181.445 cv
127.106 178.971 li
126.877 178.892 126.756 178.642 126.835 178.414 cv
126.914 178.185 127.165 178.063 127.392 178.143 cv
134.552 180.617 li
134.781 180.696 134.902 180.946 134.823 181.174 cv
134.76 181.355 134.59 181.47 134.409 181.47 cv
cp
f
79.1977 149.283 mo
111.684 158.304 li
110.168 189.891 li
110.168 189.891 71.9829 186.883 58.2373 175.058 cv
44.4917 163.232 64.6558 148.163 64.6558 148.163 cv
79.1977 149.283 li
cp
.639216 .482353 .564706 rgb
f
75.0898 148.363 mo
73.9936 148.363 72.9028 148.507 71.8745 148.86 cv
70.6645 149.275 70.5073 149.663 70.4878 149.771 cv
70.4507 149.979 70.6904 150.209 70.8364 150.329 cv
72.4531 151.648 78.8096 152.791 84.3603 150.908 cv
82.7871 150.11 78.9038 148.363 75.0898 148.363 cv
cp
77.9316 152.655 mo
74.5542 152.655 71.5928 151.918 70.3603 150.913 cv
69.7529 150.417 69.6914 149.946 69.7461 149.639 cv
69.8545 149.033 70.4707 148.545 71.6304 148.147 cv
77.5942 146.103 85.1499 150.46 85.4687 150.646 cv
85.5928 150.719 85.6645 150.856 85.6538 151 cv
85.6431 151.143 85.5513 151.268 85.4175 151.321 cv
83.0356 152.27 80.375 152.655 77.9316 152.655 cv
cp
1 1 1 rgb
f
96.7256 119.693 mo
93.2563 119.693 89.8262 118.062 89.603 117.954 cv
89.4155 117.863 89.3374 117.638 89.4282 117.451 cv
89.5181 117.264 89.7436 117.184 89.9311 117.276 cv
90.0112 117.314 98.0395 121.129 101.555 117.008 cv
101.691 116.85 101.928 116.83 102.085 116.965 cv
102.244 117.1 102.263 117.338 102.128 117.496 cv
100.711 119.158 98.7119 119.693 96.7256 119.693 cv
cp
f
110.979 314.443 mo
110.952 314.443 110.924 314.44 110.896 314.435 cv
110.694 314.389 110.567 314.188 110.613 313.986 cv
116.67 286.935 115.711 203.936 115.701 203.101 cv
115.699 202.95 115.786 202.814 115.923 202.753 cv
125.331 198.567 li
125.519 198.484 125.741 198.567 125.826 198.757 cv
125.91 198.946 125.825 199.168 125.636 199.252 cv
116.454 203.338 li
116.508 208.398 117.256 287.75 111.344 314.15 cv
111.305 314.325 111.15 314.443 110.979 314.443 cv
cp
.360784 .411765 .647059 rgb
f
106.411 85.436 mo
106.411 85.436 99.9082 78.7524 92.1997 88.3545 cv
84.4907 97.957 89.1997 104.083 89.1997 104.083 cv
89.1997 104.083 93.8413 113.307 102.805 109.892 cv
108.866 107.583 106.805 86.6816 106.805 86.6816 cv
106.805 86.6816 112.698 103.564 108.116 114.949 cv
103.533 126.333 91.7095 125.32 86.1211 123.327 cv
80.5327 121.333 77.4004 116.833 77.4004 116.833 cv
80.4497 113.447 li
80.4497 113.447 75.5498 90.687 82.5625 83.0317 cv
89.7671 75.1665 103.366 75.6665 106.411 85.436 cv
cp
f
100.531 105.038 mo
99.3618 105.038 98.519 104.291 98.187 103.792 cv
98.0718 103.62 98.1182 103.388 98.29 103.272 cv
98.4634 103.157 98.6963 103.202 98.8125 103.373 cv
98.8501 103.428 99.7412 104.702 101.293 104.146 cv
101.492 104.075 101.704 104.178 101.774 104.373 cv
101.845 104.569 101.743 104.785 101.547 104.854 cv
101.187 104.983 100.847 105.038 100.531 105.038 cv
cp
0 0 0 rgb
f
107.783 112 mo
112.88 116.565 li
112.88 116.565 110.516 122.903 100.149 123.327 cv
89.7827 123.75 107.783 112 107.783 112 cv
cp
.360784 .411765 .647059 rgb
f
100.95 122.875 mo
100.804 122.875 100.666 122.79 100.605 122.647 cv
100.524 122.457 100.612 122.236 100.803 122.155 cv
100.854 122.133 106.006 119.882 107.761 114.826 cv
107.83 114.63 108.044 114.528 108.239 114.594 cv
108.435 114.663 108.538 114.876 108.47 115.072 cv
106.603 120.449 101.32 122.75 101.097 122.845 cv
101.049 122.865 100.999 122.875 100.95 122.875 cv
cp
.639216 .482353 .564706 rgb
f
98.4692 120.05 mo
87.2607 120.05 80.2798 113.8 80.1963 113.724 cv
80.0439 113.584 80.0332 113.347 80.1728 113.194 cv
80.3135 113.042 80.5498 113.031 80.7026 113.17 cv
80.8008 113.26 90.6748 122.08 105.783 118.405 cv
105.982 118.354 106.187 118.479 106.236 118.68 cv
106.285 118.882 106.162 119.084 105.961 119.133 cv
103.298 119.781 100.792 120.05 98.4692 120.05 cv
cp
f
102.71 119.478 mo
90.7676 119.478 80.2671 106.077 80.1528 105.929 cv
80.0264 105.766 80.0566 105.53 80.2202 105.403 cv
80.3852 105.276 80.6196 105.308 80.7466 105.471 cv
80.8682 105.628 93.041 121.157 105.793 118.402 cv
105.996 118.362 106.195 118.487 106.239 118.69 cv
106.282 118.893 106.154 119.092 105.951 119.136 cv
104.864 119.37 103.781 119.478 102.71 119.478 cv
cp
f
91.2998 203.66 mo
91.2773 203.66 91.2549 203.658 91.2324 203.654 cv
63.4346 198.609 li
63.2309 198.572 63.0957 198.377 63.1323 198.173 cv
63.1699 197.97 63.3682 197.838 63.5683 197.871 cv
91.3662 202.916 li
91.5698 202.953 91.7051 203.148 91.6684 203.353 cv
91.6352 203.533 91.4775 203.66 91.2998 203.66 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2112.w037.n003.99B.p1.99-temp_01.eps)
%%CreationDate: 12/24/2021 3:21 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj27oo07Uera".M4X;-U,%:0Kgd2("Z3c?!3$\SoZC+.B55;nd]094Xa^bDVO%R9Gk5\)M[p$DD\u%8>ZW_-GMl#_'C@.YT
%Pa5L[1bGPnNgA,mpO=tTcUrOmZaWLqUOTir[C#mkl2-2lcdrNk8m#rt2JRrMg!&!h[753tQ2;.m;d7'eI1i@4L?3ICHYTr.'[E[R
%G/HLI09sHJ>,)_;;GK\kTR"JH?T"f!%=m%;^/6JHgVn,uqM3%L$@Udl:Y[1DZQHVZZrWVqa,9S^Y/V7['_1)9qn;L+e8.!o<iK-u
%300ri%7_c$&*ndo5_IHDo\UX:R*(136+bp8eYKdYk[eNnKcq404*<fWgrlCJFT,'7s2d@YlN![Z(3TQ4D)V.rYDnd7Z=KQ_h)sgR
%U]IaDZKYjdFjL@?!+_*+#oXk<Q$PH(L!3E7dkZ)]dEqA1r[)ARgu4!Bj(<DjGDPp`T:rePh[feEWn(Gf#euYAn&q\C@8I@OMUU6J
%CVTM*38,)e&gR).?Fq18?<'WM,+lb,?Pp(K.u%VDW#B3[*.Z"J,2maqiZMp)L+O%o>.G)k/>p/+/DKR7B(.$]1nt*MURc^54fBCl
%EYn,%D&Yl8a36N':Y_[UVK?0(;nCpk&bB7ghF8/7Mq.;6$R8)]\DYsk$0G!XFBY[sl^FT)BWEGi7o()#@TRGQ,N[$#*^A](If/D"
%XdnV%C5(1D(#:jlD08>m->r4L3=a?gQ/cUU!Z_`2W1NRaZ;jeTC-H;7!1UDkm.r*;qP2#%"\gpMr,s(Xp3lkajW^X;iid(U;q&[_
%VCA.?YB+pPju@&:3-[q=p$j!G*+s[_)V"N/L?RXT\*nB^ha]K[7l.fpD`#Z!cn(MNf3AfXjDnq?^5c"@f,]XYYHO_;qRUd37E^j*
%75CcgMQY@iVFfV6#L.c8I\ReMMQiAlJ/!I-%?SGF`]YN$F9Z(HNH[Vp^G1ra983XKps$>/"i.n]ZO0E<"_\+in/H5qf)^f>`/>F(
%$S@'3paobTHU0o_0<:<4H1;KIU*fFAc%%$f@jkc]?nS'#`o.)i!QU#F65o(s*:Y!:J=ssaI]LEiK\pGI*:[7#.H2PiPnd]P8/?I?
%OX*AsP9gS'd7f?4d71>V"F0IB1mqLdNn>[QU46hY"="cfK%sWcQ]H\BI\W=P3cGeE88%ii)^%]-,:S[18]W9#LnmQ#*!o=bGJ&/4
%)%h`s8L!!uojrP<H^S#ma,>uq'B(=^8$clX).!N/cfLd&]I9dN[d[T/,X\[)58!"[p.HLm*bfOocQZh@ofsccdXePHEqc^n7@N,q
%G!tXK2mB08SD:eNP%_DRP,"FV@-O]WRO4U;RrN^&rsV7YlMd&uQ6l"3J)qbp[qu.gs2mRXQ1s+Lo$?pg^#sNMpXHro<^,gJQ%,j8
%o"P!&r_`E;?9m>]no&A>hKT"B5HXNQfm3&u^P0Gn5'eT+JYQZ8/=U=>?!kp(fDCJ#m$_5>Ij(>sf_&%cN`T@:QbE;MG>He3fO's3
%?gIPIB-/YDrScGMMK+,ppAYQY'?pG_iql`*Iu/03M:8(5S*9O[S:,@4+f'22!$4lrqD<,(=a_^Y0&)bfcRrV\Y`IerpCHNND*rIG
%'lh?A[P8Kj?LkUA`k(+=_W-m4.Hku&.8(m!1i)0,L^_&h0^&[f[gi8uk54uCjtGZiqRUN3,Q=Fed;5D^HC:*#WA%Rm2-O&lj^V!4
%+WA$fEujQ.>f_,:N9/7(^!*3g6nHrHb5il-*Shs!qn'AHT8i1X<g<2/OLjE!jlV,*5CA!'mM^B"%Xf&O1"b%peBJj5g'9Ms=oC[@
%V>7L"#+Po52ldT<CtBO9)`Qr]>H8PGWBp;LE"2j/L7&G-4%r?'4A["A2I4`ZAMe7fE0$+i8,se=:<obgf#XrfIHH.D-!PDPN[rZF
%0e5k40Kr@gU$b'LC`Tm555)h!`]@.WBYsKpArd8H$sF^)kRTQ]Y/XXVI376=@Oe.:<"MqQF)Hqq,fV`:VRgCtcR-#8?:UeqT!8c`
%QLf/"p7=gAG?p]U4eaa+d_d?91g81Df1>6id`@4UPmga$,\A[7SnDOM7rrc^h9e?Cjtt%6\SJlG46m*XZeo#lSng=sbffh"]aT^W
%E1Q3dB8r:LcXdQSe.iHY1tHM_8/UH(%bY*Jcub,#:>[Z+;UOJqWejt-I^%lMPDBi3N+J,@-r+?%G7D&$=Ggrb1Z9RQ6oJ\@!bli/
%cC2Z`U4gX#A;s1Joh(e;qu'_D/WqL_4X2cEM(n[M);O%jWBm+)DdhEB/YgWW$]rhD-.uC!HOisSEkrnQ1!(62_Mk-=(.].DZC:1@
%01kqB<t_L?!=h,o2P((&Rfe:6qFMRU5U_a]`Al`Z1:.BMlfb!r%9`=gfO,r"Aa>o7fhc89!Ai`XXFq/a`l09fC<///KDr./E-o!O
%`Q!IK"aAVI@NGX4TT'O]c(a/de0g$i(Kl9K'/`H1gj8GgcJg=JJLuJT/<L><0X/=e0MZdl<_;"`JtXM$1*@M1nZ9fFnSEg;.b9bO
%ElB12F<^P$;!<PNkHGucj'6CFMKG?+f`aN(NNDP\]:3G'@@9r-dR6JJ\#M,ePMLuG\rL&b2urIm=Wm*EF$]_7M%`>:k.ZX%XH93^
%q"h&uUbG1Q*AW2<Nk'[Z6;8I9%7c?R3i&tq=9d_"@uch+-c!FU/"djT<MBUn_p=4jn+STA3J*K5h?W:GF4f#hFrDBaaIA@:irW`K
%Wf1RkGp%EGRh-6D?q8`jD\*T0CRN^[B5qK0]/cSnU$'8?&eQ,3Fr`mT;pDJ])FPmp`WH&QI8`M8GO6I3cAQe3-lP"aW2XDA+aqtI
%+hI<h=c^)LkEo[6!%uKF:fm,92V:\3biZeS.KKV&Lr=r.G0%h/`?gD<S$iH7mYgMp<b(!A#GoE+,TaD?dU]AS@3l*^,FMb9P%K<=
%1qURjXF-^*mt(_\NIF8hB\%!17Nb_AD;mC]8!:.2Oh-+2<>57B3^c0c"+)t>@PQU;aLh[[GO7J8(ZEB,QU0A^$VRG,ZbCCoV*tu-
%STRg<02$n\l^/=(>ii>%Y;L^Y33d@;_q[3Qe7;:T\`$+!3/\UtEYMVh?&&TJ3$bNN*?sna7!eqk'&HVq(eEf0jR'e#?Nl(YpIUH`
%:n%0lSm*6-C%JWg%;WhQj[9G;X7;l;A/ecV4Ge[\<?Zj-O^2H%TLT?'_t(a%7<Xa(ZffiSdE4l\j1QhKA]C/%6()^n8u@;dY.ej?
%>Z9<,I?#C?"(=ab-SKfJGE7Z:dUQDj.n/%VP;_-5g%4^ncA=2,2Tp?ZG@+;:O;gc#G:GM9N$[q3c8p+]j[2L3*:/"mnQG2E_-V6[
%dif1.EnF3(?(WTa0)31tHp;#DJU[4]@7gCR0Rso\0i@7LUu^]eOYh7O,9^VW!2rFZ(_bb>cXX;tI.%ssrghXl_ppRG/qCoY8S9WN
%+)L7s(@9ZG\DK$dK*F;U'j>/H6";(8&q5HTR7YeD>.gOKL>F%<kEo$]'kb8T`K"^GKoPM8G^mPk5$YQ6k;aMYc;%\8NVecI^+@aQ
%:pt;rJr&b\r3J$<_WqqqiL(,-`5puZ+F;)'N\jr[KRUanHq6d2s6]@K`M;j'oKg<$+&[hm)2-d+$PsHn6;+-=Z"dEQ0F[Jtd%M\:
%^7tu9ne[=SY%B@rKHku7oc0]g^J$7&ZlM)L:c(_9Zc\p,QO>\g]LDOk'pM727&,7(+d3CocR-?3a)sef'5`Lhfs>OQU[7WM,@p>5
%/3]58q"/M3"]qS;"`i"g1(]Gd?oU26dZ1*,-59:^+ndN$)^,E]RfE*DNV(<;n_\_dfDn!L?L7N%OY)K)/&V)6+6Dt%Y1f\+,CkRc
%N]LG+Xq3*5nF"KrhRfF?UUoN>l%k7Wa9B.FTa$tpeQkj;b[eXI*0.?&Nn?Cj5IHa+STVH]P1kcj%[F)WmA\:=XqBsc-/KaGLh%_u
%7&V>G,G*&(9Jh&rdn<^bVu3blgaa:8[lN7-BU^[;68?pWkI]+h)R9'7;!Z2V>"qb/,g\Nc?SiV/aN%,ka)JRck(9+qQtT=W+CZMZ
%Z>O$2a^CP*'oaUY<2-W=`>(O?M-;Pc??k/@GGE>Lj_MfY"g_<_""iXJ@sa5m7^!IFa[LZo>kEjW'1K8g>&5GpE6NXiU6B-U1.k5o
%fUms4;5O\iG8,&NAiH#1]%/Zp<P$<8."YEJSZ]Stgd28M@ajaMXEAMd`.iqEY`Nj=U!^J(a_'25GeI";>;au"59Lsd8V+2am3NC4
%%7V/(d?@s+ASJH@]u3oSNJ6]f/0h4!6=<kC^pZuUIj=*?3f"\?MmtIGq=Kq0p3Ug\SD5Kh\3*QZF1fLFP-/%9SMl?HF+O6>miu:"
%1e6?j+W^hJE'CD?Qi&_Sn(D7t$cr@MEQ"<4/s3-kh6/30&B4*!MZq.XI&,2Y<BLd_Kk)g2WIV!.Ak(D"lM/Pm)i0u[Y(+9E+V"i)
%?^K+88tsotL$6D*K%c*,>V$O.9o-1RaM7J&JN1+/=%1gTU+<K'3#*c4@rU;E?0`s@RW<YW-E=(+fS*dsKo:B!L\p0**2pDnC:Y`r
%?]Pl)Re8]loR!DY$AEl"]eu'E'R(6gPJr47R@lD8hTip!(2jLg$?b=7K!20s3(aC\<2`>[d[C#CZ9tMM%]U43Nngeh=KSSG<"VRp
%P.>_4Xs#NaR-NO%MHD2a-\a\:K7M_(.o0#p`J$`l?2SH#PZ>BZ>\0-r*Tg_5p!Z!_!rfLp=?30lfKG%r!jH"9SX($cP&6,\/*No?
%Jh(I=7[.FaWl]"KdV1?)jd_UBZ^OZO$Ggc]B.'uZ5Tm_r=@FdCjN/ZOf_'Yq8q"Y,$?o(Ni,?'E4mnF<2W$LXk][P>^ERCOT<:QJ
%@DM(Sjt]=kbIL_.b(oZZ?p/8UNLeQp(>>2:!_C'jRE^=UAF)#elFm&a,p_dIW0-'A;7_\!5T1=DnbrF7T6P[VqpQ43G)4\<2snmO
%]R05&q@U5Znboukrf,V,?i<RG]uS%'IeS=Pqo,W#l[IZ@&rY!OG,LC6euD/$?D(WeC)&iNJqj`pd=^7EX^!qfT6B,]BDZ,<?2pNZ
%<l'<]m2C*q<Uk=Os8Hq@54aeXbAI+FBqs7^DcBMIs80RACpA.'V@LL1X4A]t%#_*Uj"L%:4uLC,#c/"L6%R%KpRO41TN%Pu@_hYW
%cj3S@.J;f3dGH5JoAN9C;<\Q5d'`/JY["6L#*sF(7bfR#eY&&a%lsf1QG1`o!R[l.,T;E>2i5N_)pLF+Kh()[IH+\_+SJ[,WUTOP
%URG@:QA>nbb][]irU3%QE4/n1DC1c)(R3+>dmd.u.hts_NHXnEF\o-(4*(l,]L0O1BD`?f?9TeirTp=Z/V]87I_4):]CXN%FZ`Wi
%g-5u1!-_Z8?\<5X<V.5b849gK*3tQioLXkS:!D2Q2/FW9E1COn0/-slc-cDcB-%3t_-)Fnjfhp)G(u?mh/QkK"I<`W5:X^]EiE4+
%/iO!f%2u?HTcEM#BXYc.N1jADe4,^_&$/0oQHHV)X]bnPm+D,,>AWXIIFC=G.(`ni8,kR"OeHQFk,1DeOYonqEX'3MI4nS@lbe*o
%3VF&%>k*efEUh1'9@r7BrPPQ!V/cr>7kSpjVj?T'S#ss&=u#*iq,.7>0F!LY=+%B<Res!\Y0r)``83uJ\D7LK=8/\&[a>BWgD%q*
%j^KI9EXO,"ZpFRXk<o/^rIAar%t8@8A]sbQi(0J9/a_$6e^NBPhh#lQ[4N+HBN#?idY-2%7e^g,)-t^'Y"%G&/=iB?&tfjp]I@rc
%+S/A14T;lO'Pd!*`?$hM)P[ts'n07E!H('&7pGDqQ\qoO"=U6mUF^OP&tnci,CW^rF4>#8X5,bLRKebUfe+X,,>l@J@OTT;e(.e1
%Y=;-1?&;Hln/F[7\/LEC]<Y@K"lI0B2C./S`j@@nfiOqk*&PS+7ejAcge=GpII1q[\S>ur<MEmhC':$]%eijH@9cUoKZ<-u%.q^s
%\9cU2&$F?dfYT<)_i:m6^Xd9:_P\"L-ZB6i8R0*sc&(50$]H6+X+u[b,)-6!FIV-_'i2]5Mi;.!@uMAY(J^2O3H^KM?2i2#fQk,U
%!DE7X,dfBcTq!tHjn_iBKQ<8QDA()$6Y-nQNDV*JdKh6t.<!g1c.`lT-.o<=0UPLp9qB4CP?;]8b=uHV8LufWjbC`pX5UOl]RL\2
%CYs'NiLG%k,.^5'(;t=:GVUVn:,7jbmWdp)gqLi6Nao_c+?4&CMYZaGM6H5?jCZE$h\9DVTlIO/p\JM]klj0Yg<F4YW30GXK;7fm
%f1o)0@I'*<hbk1=-F&EH)iQe@i/hKI/`,DdS'3XKMluNQWf3d?UJ,X)IF6ch;8j1_%Q)q"PFrKT(P6[jP[JG$gS6M_JjpW/$HbjH
%r&l@`cRo]lHi0<Sa]KkVDCgB1J-dZ0],WYJ[;*#_<0M"F@$_hM:J6`+g->7627s]Vh(E1UE8\?'&s-eFj5<A?ci7`:IO7>?k7+/Z
%-UZqg`k[)Ha4RMZWiaNVl(Ip'DAi=D<B$0\T/\tYiUeD8B]T,E>Bd`"c0WI;4QRD;$W&I`pqb?^A-*D1FQXJ9Vf=iGBS??Io-=Z`
%DVVV5hk'H%TM]Hp<PhcLAB)bG?XqEpN_pj#jhE3^fV:FWBIgic":+PlCl[Nm"CL?M?sGJ">@HPK"=7us[rXY,nOHY8WUfk5<Bdrs
%Xh<?n_k.65_NPV)^Ra+QJB`m_2ZG!tD<SI.N[^)+h<m>$"GrnY8Q-m+JrREScQmc!^(D&Pm3FS7C3[&kMa($eFX,NQ9B@;<M=RjI
%.W3c%XYoBV\2l<p\Jr@=j>K/JQK3mVM&@8?NFcS3-H>@Q'g=p0EdXt?D0U_GnMV*Q-@56"4E>IP>QoJEA0W'5j\C?Ma=I!:I'u7*
%@Ii&6gRi.()0N,U9B$1P/h!)l;"06^kb:H3Z.s^>+>`SXc`OEd#oM&`q>e_K5P^J\Tc*eIS\50HB=Y@A=q/[P@@;%P:NDm^d,h.o
%b9f3G\NYIp?#Fnrad8IhE_m&3r@V;?I6>!/"JPG^CcSu`L;unO_^.:&*fEQ:OV9G6qkoa;r_!^5e9bM.N@_h<i`8PYDqN(kn8.7<
%AKj.op+8S34[/Qk!AYm<hi^)>4-"NO,hdWpErpR8[&mN4-HOR<KgNE"^>sYl:5sMY&Jj&`7]hiL.ZBkQ'HSV.$S"qEj`7X>\+1!r
%aqsH>nPie=RRlO>]:2-`&TSkR5]_h%'#&'6M;E?Ch@rus2QKk1M$I7s3?3YApY\OC5pO^K'f6R"&CU-hfTH6*@Zm4\Ut&25;(bkd
%+Mi+FKqM]'W[2pQ+P-1^O@nI+`2u<^q)0I;[7TS!J"r,p:b>Z[3<8gRe-^*0`GC7_</Hb@R?8"t(;39cb-(q'P=h'*ICN":-qTL<
%H0)boPpf5,nJ]#;PXIUTa=!N+?[R*J;N#RJgWs`:77i*TaDX;P_Q5'QO2n%3-':hVWC<6)UAU;4ju1_`'Q-i$8ePZ(I`o9%[4$m%
%J5P2gY:)Z(e=qo-ICi4]-qTL<H2DbhCJb^]5%BbmrLKiCj&f6D8C>G1QfEL>?D@#&#q*a]L55;-`#i:(9s3E_h-ZQ4q`BgeF5CmV
%pTGifjDh_5k-j+04h5-9@b6(NXuR0-Q@K)O]/Hp0'>$.<G&=?IOGUS-ES!\5XG%56M,g$I[Hgu'M6f*[eg=F7@b#@S<K!IT*W>+U
%MfCRk#tXQ(:GKoT!-"Z%f2j2@U.,G[0N"U%)YL/YDX!dt]NYkp*8Q>S)#kQ4Me$TP4$eFfXE?0nNEiRPR+f;ZH?i..XOJl80k8uk
%4XjBhiCU"pnb7n6PS2QbTTr;pPs_Y?9qaJUcfK1I](,Z&oT[(!BIVc7hcbnd<p2F>?(hd,J#:qEEp(X7HHc,,>l)mMj4]j#;&QE-
%?`rrTre!/DN1+O(SEMK)a/4#E)*/uaX8I[%r<<r5J)G)Za"%$AC,V_]X41oZo"92#$,/V%[b6705=E)%J\U.HBfo/dY4JIb9cAUg
%Udnp5"`DfVCC.:Tk83(r`rh<=/BUP76P:t2^VT4QY.)T5]NG^_V:JcqCaCfE@q_GIqe.4(%7h-1^Z_2u7sD&^f)LZN)gcNXDpKaj
%NX$0JggeAN!h)79GQ2iYs5&Jl/gohsPOm\Rq=!DBpBEb,anbC=TDu4E`!NZAXX#`rP;D)8N.u5lRI@9UU6!EaDf*u[]ot80;2e9t
%B>.l?nJM-ZhdYj2Un-Si*lc2.,fXNY/O>!4TL(P<X-,,:9u<KQ*]N4t-a7[Z`X,'OqamtamqFuFgX)mkC]+O^jkBI0&Lj&AcW\h+
%Z%0H%'-Pi_@>)$]9Nb9`lY2o/?Q-?>@$2\&AB6)8ZJQmI[kU5s]>D^),7LV'[*s^Z,`SYLg<-m&XW4cM)I[W^ed/8l*l(KJB;:SM
%Rs[`okbcW<\Q"djfo8'd\sM?*+S]*>Zs+>p%pTWLU6[_aG>83]_D8etR!4Fq^#:eB^;RkU-5>c8CK'd:I;^SE+%rkWf#%Rbo8VMt
%P^ks>7uVORJiq62S;^!HH6^,87^?s:b=J\#>4($.oia5c(4t?pPJkWinM3\K>Sje>iap%A0.P3jM&2G2iV^kEnM3\K9G0"B`63WZ
%nP[(HNZY;(r^d0*P!HV86M=Ep1W^c!>R'Fr=H.^Bjd'43nOK0`^.HL)hNps$9<I$CFCD1^*6ga3B=(2-Sr"`=b)cB^'=[@%,]<!<
%'?LW*-^RMc$4d*D9."OuF.D%&1g7NOD7G9K\`5R#(rmnpS8=31UAOtuc#F`LgTRlkNm"bbPM;Gls6g`[^9iA*'PlSR?bQ%]="fQ.
%A\)GKjX7PnD"9R_W,*Ves#>AmjJ3[%Yl$sm9ZWa/;5FEQJlte:26>SHP]=3H>Nio^T:<aWpK(>OUsAG5b5<&cJ6t#Hj20@4"TtO>
%R6Pq>1HnL#6tkTqU"tIHEHP3L\JgI60NfDqVr:@DZ`)Ubcq358gn;:Lhmfmm[us;=pJN_C.AU];g2`Ou=8t"s@uNnHj\54^j5XfI
%nee.'9&;/@@jJm!P/isN0h0\qN!i]7H&T"@as<$&/pWCVOJmtMjKf\eF63Tn.O<):NK$T!"IYAggQP*'BEdMb=t*$#]_&fKU!E-P
%H`p/O?.gC6^EpIS+Pun5K^C]7NSR8_AgY?R4NB`D>]5:&gL7LO,U2PiIoEjWC\t53X)Lq1YU="7FpFja,2qj%4f2ikQ<lD48=WHo
%[7ZV<SX\FL-BfsD')<J*IV$sp]OsdY,l%A,<\90g;7eh>DW/Q#PC%p7_WU(M%8,V,r<KM8qGW6CK6H:b>p`a9B2UE\X?,Y*_rQ-*
%,lAOhlTlkSd]3Nt]5c=X5XuVRlShRa-XF>a7:/WJR?W)Y6HN:Q\Jp`qY9^(%mXhVX=iFTeUsQ]qb8durI"INHYtN&O)/YPVrYoS<
%8M'ThCu-G+qqDBNU:EiPpC#ARK"Y\-c&J<%4c/;JdG-"9Rm_>tXkKcX="0):4I6&K8N8X8k9f0C,b1?WF-CQ\0V!JqWteDL5nY1T
%rE.@Z<O(>R5)JFA-(7IPH".K3-'Psq*REQIlPL6u]0,?_5!cP3`j\Rq\d)RipI^CM9rM?@"2HLp$6t$d`oNl?;);OnkCSY^.@Es)
%ICs'"W=n2HnqQG*9Yn/b>Oq?)3@LE$U]aYt#DH(Aa)[o%DR9#2S0Zpng>/tOXTQDEe=p0\q)A*^cJ1!KXJ?&0P)14^*P/?Zku"d*
%M8)T%ClDQgYJqQ)K9kH<%#&N#<ordR:D+W=pUD[='%DmugPqDi&FL?dAA1f7o@joYh$=qVcOsMK:r_`*2-@M-pPn4_hdM2'9.X4D
%l0E&SE).C[h11o7)m4nCblm/TpfXW(':m*a>2BrW:4bR$_D8etR.63E]j^Xa?fHKI1YHd7rBIh(hAA2:I2YasmTSLs3]8&8`)E%J
%$DZu;7!a%d5CB]YNT$43Di%N,p.rA&%BkIn\'$`m72);,iY2:bI%l%c_\8q]jIDr[IaS+Mq[g4hk<5fY*^NF1I=_>K1'7iQe+8LO
%`:6*fS&->b5(9(k6-bIZf(VC,]QZ0@JMp-&ZV$VK]+)d&0IK(+\s?27=iIqMQD@#jXO5&HU'p"-E%iZ/j(*5D^2/f*k*T\3+8*l5
%\S+_2`A*2s-[Xm0kl-'KD]He+o&Rsua5?-lSc&8XWu+Kd\FMP<EHHkPiCuMFnlsQAfGBJ'#W@lnB%aG\>YK5q/:'q%S!OflNM@Z#
%">jA8gG?jdKO8Am*I2.mV_n)(YZDjdeX5pN,c2c#GiOol\^oEE9J/ii9\e'/qel-[)7M/Q*rA#SG&Hn]ZAT%EfTEpQ@du?]/o`sO
%BOcG3"Oakhb/*JVq=kl%_oOp:\$!++=8&(SL#(Xq#76tH*#jO'-i'e7Z1OrtB>MW"9-&A7)Jj\?&iS<6NSB]4qEl4f3$&F9K&\+e
%(lM(ZO\0R2_[%>2c#33]^0tf_hQ@Xf`mTh$-6^RB.4o\s`U)hWb\gV.o\4<.<c>?)KL6_A&q&%3Wm-_QhkVrX1(Po])1B\U[-P8o
%PPiJY7d/Qe)GO*OItK=Xns1kos,86@`sCk>(33ZC$fb8sq1i!ibqDAOa_p=rd9<s1q(a4Mf`3%0f;cG>$=EP5W8O`8BrN$NjF@3=
%?0BNrq/!OqVVaK5h(l@1CpA.'VH+Z'k#lFLW!9/.,IPuKdMf=c0I<@RJo\DD.X"fL4fHoR9D#i%3#hGYdX3O>(.:^c0'<b<G/=$*
%_*olEkK4Lpi;YZoIq&HVrq60Z=gl`3a3E(-d`30Sg@m)3K2U".-[?!=XF2AAfd8F^S_Yr!lK,8!85&@.=&_V@s5!m/m*W"qC\b,!
%?@'V2IGMC-KgmbBiG6#9];jn\/@n5<3,a9(h/do8Kj`ep'WJ4aqi=p\pcnUo&*cEd'PT:,&Isq_bH;@b`6c)a5.a*@CpcSqAG>j[
%/"_1'7jBip%8IBHV1?RTT:fNZ#QO\9h#dPVG1Y32om2SNUd9?p1PiCpq*hh:e`RJ;IoMGDAIS83`D&Z@oV*5QU@YcZ]0c$T5%p'X
%bT&3'!6>Z,p2"[NM!]XY5/)7pTuNYZjDPM!RqB4Pkg(5S\nTJ1c-9:Y8)JnfF61ObRi:=>.jNutC7;hSa.?8NV(04+m-:T7C.fi.
%%pRd^P6Bs(2nqQiaAsa%:P*8j<]CVn]F9^"&iKWY6LjLNEN*;%F-MX8-)>o$Bgra'hDk+8'FO5>X&f%KAmlsh]Un@lrg"Ns[(Vd$
%s%sA6D?fU@Y_SC88M6ul6Z;\%/r0;Xla^<$gcYBrqV1lqW(F=#.bl($DGg2<Zkir.9/'-7c+(EBfQZB44Dn51G%GfsbW[6Gkbd`[
%9]%e3`%04ob4809h^NpDpamg)`[e*iGl^-!"=5f^X0pYmp`.mhj?d^<-`rq/l1F7o-SK)9e&ZbGC`XnCbMV_M)K#]FDBlEH9%XK.
%jBqk?`VBIZ1"/RV,Y98&Z.?V>FgW3D7EFIsD"-:WpTQ0d5IR>JT9a956$Y,b\'*$plES+u6*23sle&X[/*+#UIO]$<Nb^qUR,V>d
%;gR`=B,RFnfaV4_72Vgmc!!,@L"%m=E4o&80kq(DdIj/`LPf$.ND_L]/H$"S"CZ9G8DEtm9kPW7TR#D/\=d)aeC7A@dpUR*V@uh%
%*YbBrfS$6bQGn/!dr0)loieE>\a2d8gMYP>HU4tQ2S*#CL1PTG'@KE/3g'3&2"*?9En&Q-(fgn;j/;0.4_t[t/+%Ad"?+)H=7c=%
%=t?,pg+Ac*eugC>.DAWlBAhT8fF/_V_ULmH:FihR/@C)i;Rt;7[N40Y4gQqdP`*`heSd`p^WV/1g@;,4S0\=Tm<WN<W6bmP6kZ)o
%Q&;De3XUImDhZHB%We%YWP+B=]\OL#;<Y75DUjR\=*ILI%'FG'W1LGMdkJ16X*4haH_";__Zm9)C6cMe:J#bj?lmnuBm$Pu-#M=;
%oJDSLeOc<RkRpj!V%b@SclCJ1M_ud2QV5j_eSI*Xk@&EC6/uXN<(7p6XVJ`;AH^6l2o)P^m/XdoD2-rbEl+5K,Uc$>gF@.'EVgLf
%2)hr#Y1JO/c.$NVWBt@_>M,l58o`9I35h_30P_K>&Qq\iahe8[9_G5T/X/nNP's,+rZQ\R,tVb[=]2n*4jnsd[&iCY#*A1J-V7)U
%/`B>&)I*H2D3Ais?\CWrlItF4m"a\86&Ppl`5BSa^<%H-GB5f^2f",?$jGp1*H,qJ[:&95HShg_Objm'SS'n4gZ<I/`Z`GU/X&Bc
%N(/aXe/H<13!>GpdWVbCqg".%qn]a\X'KV.M#(7cLmm";R?g?*lkn?qW,*)rULkJ@Tf-Y&G<_>p965ueHPa!;8C82m8_^fM>@Fed
%Y/G.pa8%pZL$>bE=>:i9Q3?<o6@$0^E3,1qF`#EAl(>1RB&Y*&Ep(Rk0iF@?8<<4&eQQ%/;l(u0JZ:gMZ@!cVD#J\8A>7IH^KtRU
%4PEXJih1'1>e>J*1"ApPU<fl'qAaFu870qMmq[:7!i<loq?CIXC9uf-?`t+BaEB.XK9`8d[Gq\_^[TMQ2TbrAd=tAeg1`Nrq3]Fu
%;Z2sgEIR#JF]8F\7as(.Of9+\b?%BmTM;0.$u9*NODMi@Y?:?hGo[IAkI'?0l:EQB1KB'bs(`#\:6]@k/5$?iZ%ud?+.ggf`ROF=
%<5(YFGJ*DihOV*Y9WXk!RMdX0!W1W:.Ra2n7(6%jX'2uIoe$UV)]$fkHVHY"HUYQQSp%R*AA$)5DoC(0`arsL<jD.jZGJ2/-`-B6
%dTd3MV:005`*"$EM;su!Zn.E1G);;I&rKQsTEM!!NFO7S_h8">*O>#@F(,CM&5ONW_U_i[b4b4]E=mBaL;OQi)hlojoL(2inVZOE
%kna^u%h9CkQ4-m!(DG61e*mu]XVWMK`0On:GHn]Zp@)QgL<>KLV<\^(D,SJDIUK:#erbetl9J&e2I6'"(q-^>$C)]q_4E0BIKYoY
%[C^._^@<tt^,hZM<gW]/a4@VUA.R_>[;'qBg..UFm(HeH0lgMS;GaLH@TX,_#e,[rl/lQS6!C^tKhEik:Hd0+OTL%0>/r$ti@+AY
%EJ67=9#<&?j[]dhGGn1lMO@YC7*aPP7Z%>M:oi%Dd6cFD1-2(Ba%<&N]F`2>IDH9CK=cMW_AQ3]0]7]r0fb3ABr5B2ZjWAn"-&k+
%(X/qaN^\\(NqhusalHKVC3.1Km$i2A)B:e;X&Mh\&&OtZe2sUt__J)K1X37V4J78X];O1njh+C#Y+5:AA`Jn:PA,_G>V6.AE>'((
%Qg-Fe'+8fV2;tuS?X'@-G;mhbp/(%I/_P>mD"4(]_PJ"d*VCI##q+8(VHCRLC@a^2a?X"\W"H'`N)F:)U/;48k=tNAii^5=Gef%U
%#E@kWh!Qd/_d;<hoeu5D_c<i!^0C^BHWDmA5D0Xqo$rp7g?A3VL9e8@5&O]WVHBu[:28U`c5`u.j]D_&W*e&u*1%3h>cqYgn2*E,
%mODKfkI,\*,P&RR-XO&&@d,pq41KBjXignf)m#Memk]i\`^T.<5oX#](HRCZqh"?5#K@]PhsN*>RE6`/cXhG'`[dB.P=oXfWu#MP
%i(0`DITC7^]P=,%A_c>^`HIE3-YOQf>*\$OKqkb,)TJbWFLror9V@/(m>#FGcg^=6R'.5aT0#/KcUL'E_KJ#,Q'Xn]dmd/ef9?WB
%7?uKna#:BF7_L\ll=V'aMiT+fHM,Q08V1_R-J]<YG3u&WV:AJ.Q,rCV2E!ZZ*u8g5O&+6hoNL#,ID1#lIf&>kR:"Znk-(ik1Q@0j
%q^5UsS*%k:3o,%_V.ZoCHV]rOT!\FDqUUFohTjmLg%t'ac2,bY5L\lmchV\ZhVG/QHLCSC%I;]:CHFbms(Ik.nYG\q6`1`E)L-Uj
%F[)I`l,Ck>qDI@t?%!>LPnhQ8Tn31'nDi,GH?&[3^Kp_AfQ`Fc/,XS@oN!$nm>a"eGZS"egB,.7H8!N(]pP;+i"*-Mm["T52?+5+
%%qqE0G;IqLo]@2u:$k*73SuaZebs?,?d"_'#>9<b9==AZ]u;>3=Od/qoj$/EMRTeYG&cp@UT\``&^W2g?8^#g)uNa@nS)j#?0O7L
%c^fH2psXNOeBc^+&%&>/#PiO$@r=KEB<Ej=mUd!D2J:Um<ppnon%"Kpa*3j,k>1M0S&rEYS"H'_9M^k,B+?J'Vpf9JI`'qrnorqD
%CS).1]q7N%lZX7C*9VV3e2^WYqp&;:0<Qpu<?<_[4JD3<_i+d-?_&S\hE-37^t>Q/)FU.\.F<D"Lk4bbnE5Jih%u[hIU7mM:G%2f
%4%Jqb`a3l*/doqhbPfJQq-c@[5@&^7DD/V'Hp#$P[PVjkMWQ[l?U$.'+.YW$S#sB7pN6(\o6L"V\Tn.rf=.U,Qpc(Ph1<4Ij;82\
%Zfb]%Q.fr!rPA?MNoRc#*9Kj(T.M^tD/JQ6^-40Z$Yu6tgQ$QW?245:l2:@8oYRA(_c9[95$uV'hg\PKPtm6^$H&unGa-=*c,]8+
%]9Dp<-d17OcBhk-/6HfO^&G$M4^0EUc"B+Ra4gK8p;PeN'B82AL"/WljnnsFET8Y\[p"5Y2HS)qbd$Id2,DG4UTgFFSGOD%-rVdk
%e(gG#m!_$E[]m>TS35']NQ$T!\\#mbD_X&55?[nlk#]%#*q_<iEV(Udo?[($]Y9c)VQ`*E<IFKdS^,!Y89c)aFSbP!(03Jm(cHm4
%j&C>Rqp!ab]k.3b$bLAEROIQoqhTIFlZ4pZqrtb"/2',"cC]FXBG!S&SkW#*IU#WDhp65=mhcGQko#hpGkU*V%5#*%X?B;(4YFKF
%c`c`fde@(LAC:i=VcM:@%mM)3(I,!L8S=&"kL3)%V2&ceZMQDZ2r-0)::KYec1WY8D9kCjSp'NtInI?L;'YHkfeV%U](IVfr$qXo
%]i*dDW6u2h?b>PmO.Pg9+!3[/9g>WB$gH4'HhhdOrU`s5D74F3]tXC:8c%+6rBkm@V`pZ#Z.R@!2hRNno_.=!q=O*VZ]T]^S1UT3
%2n#g[/+(T^oO7X?<;K>Vr`]0SdDIb6oARqE2uVuPq*Y#MJUKb2I(6YX0#"=B8Y6\=D5PWo5q@@IX$'*WQJ[-cf6/oFdpEKd^SY60
%NFu2SNM&El?!lEVRU)JUSXMWeo4i"`pK3ngCsIF"d^Fam.9#-(cnn\pQf[C/hY,d9WKlT1LT*dfK*P=N)K3Acjj*SnVq+)GYbj<B
%DNq%W5<R\gg*poB;g[VmeYuWP_h4qt)@c<^>Fq9Eg.reb*EQq>PEcSeWq;/QW(bf-:=XR%%8>6^qoY=ug2Gc7T!]W3:!]/d?V`?C
%43sdHo;srgc^G6j?6s8[5PVm31AtbPbId$:p@Fj>BD^EZo]GK2LXWjW?<Ye_?QLgp^R^t248mR1:JD)+6";r<h60M%0j]7$Br7qX
%\[1P_D"dMHeB[*<4*U/V:@B`]H?sa)>C#c#Nh(W!\`80!qKh>PMgG4p0!F0Go?>E2hUu(WD;X$YhgB\3F_:I6SI\AK]6Akgl1]Bs
%[U,K[3WIlNhl4)VAnKIAm>!OCbj:hdc'a:Zh%)=<G#4`L>1nUt#MZSGAlc='rL'Qr0@+7=?9FaMflo5JB&6:jhTU?sT7<C\IOR95
%?]I>=cI>VsQ.^76Y\*?q(LPI"Ah3OWbFMh)?/F,hcTWdhk@g=;Vp=7Zfr[3re_,T.q[[>s]mP,g)e^O5p,'/6cW9Y@1UHJfq:Bh'
%S$*Xs/r!#;mTPAf1Nuo,Y'dakqP%TXh:UC6hVJ/"kjdK\V7HHY:[PKj]-knYKtEVpNMF+fo-]T-%IZK,R%DKkpi#:7hcZOtpr.$n
%Xf\e>RG/o)3Hn<UT:PlK+XkPLT@Z$bb,^sef33SW21Kg-/Bfd/(3\lsc-8cMO$>KXo2!-`S+F7[oA]\;kIK49T53[-o;+q^QtH>5
%fsC.ljM*>&bKR\m^?9mfJ%bUOR<<uIR<^0mpN!\Xgj<655M\CR#9WB)QTi-uf;]k)?^RHMrO?6[[A/G@B2chYq9Rd:_Y3qUH/\GI
%S&RcKeXTe;ZK5X5>#Tc#9lkgPBR9?cZ+dJks1r13rVa.dHKkE(TfIQ$mDiN(Ic7WDG/&'Frd&RaH>pU.3:gfld9U)&/nVT-^0Z1a
%5,g+Tg)nPXcQ?J3/Y6VKc5,04n$L<UlMI]B1OEBP4?9HPR`p]-\_!7ebm/GJ_2DC@1?I]Lo$Z$/o>/l7hVRdc=.H^cEp[M3Q?JQu
%k0gkCcTa"D38.#4G<[*`F*$">Re^^p>^L8lle:s]m^..^RX_F[^GKf08e^MH)fqK*NNR3G0Bj#AkKid[5hj^oeQbI+eoN^^qJ>oQ
%R/'q.)TK\,$c\sq>1n._qt/HaF"d.7.#.W%nTApLXuW-3YF:J/s4PWLT3n"umcnlbUOVH`q.90IZ_h'tBJb^VeB0@F%j/<ff(6?Y
%;q@FbG?S&Bp.j(ORWk4o_YLm2mD!hBm&.DLN;[L*BAP6lSnduNqtF@YhS%I[Ni.AUk,ba=m5kQ"qa\qOH*6L]p#"'+pHD]>ld$C!
%Z,8a'o\tjWprGF=MiHFR[opX]ZaKDYHgpB)h0Y8g[Cg^E<jo]iM^Mm0l('2VDhKcerRKT=])Qg<m",0s]L/.V4h/7SYOqPMo()WV
%R`sCDVos"rZhe_,i*i4S=h4-u>[+IR:Y/\=q7Fn:KD`d7Q/_,mG?7t!pA0=u2f1d(P5A.'Y^9F'GS#*Ajr\t6H2%-nio@MYLQCj<
%k9"RHB8)+2LNd&eX?X2=8,&XiBKUU.5Q:Fkqo-7.7n<$V+9IVhV>BQ=`PpX.j%%j`O,nMMS%F`6p&"R*NI'MI=k\/4oH`akGG"6J
%c(psG/*HSAqU<LVX;SZ(A_2fX:U@6#?_:lDg^VP0mli`2ZKf2@=&r\X[DqL0eYglsogWA@VTEDXn!U_fZ2#fWheG=#SK'jWbhm]p
%0':u\m:Q@n:*u2)q"cP2YCGE_?X&tI<*EN!m`hrKqN0"*Q0qZ/Y2=[+V7F=GFQTcFLZbklO*=dPVs3==LJR;+n'faFq/&gso]&VR
%lfm#Tq8P58J!#)DheelJHZQXhkZR"Rq/kZr_2Cf&g%kFs)mA*7EZ8B`ViBm2D.EJ=UMtP<q>S4`a6.)jiM.3147AXl*kqMnpk")-
%T8[E^[5mD-hJPM>1@Rj#k5O3'^!3n$pKtAkp%74oUXEmplekdbf_VnbP29Ma:X?JUcJ&0_fCnk1G3-Pqr(^j>I:Xf+8MbPH:UTZ[
%HsJhK]5*o?e%6Q[5I>Wq>+\tOdiVB>0>7&4eB8k^DMG$6H*ZAPn'*HOC3u#d0CI\j\+FpKZMj(ar_b`QCB*PHhXUTCSb`+JHKrDb
%JTpVY_85R1gs3`Mlf@ik]u&b#X4?qtQ=%>[J+E/1j'_!Hd/NZ65MS;HZupUK]Ct@Zr9D!be%EttT"KCJcC:5Jh)K\ep;VCOn]RDm
%Kt3I-Vrq9<[gShs\8Us\?QHo[ptkMsV1[4<]B-BDa6sN+0A#&\f&epKlR0r(mpDH[TACAK*C'BSs0.UaOII]4qs`RSrodkg@qM%(
%q7*`DI/NNbbPf\H[=bd^aU4R&:HRfb-_F$!]iR^l=0L282Wf,UW:8qciUa^idJfZ:lK=d(]l+X;3uc3^K#^Xs?O-%km-Y,GNSTrA
%.snn?a+qXOh;cMgj1U&Rh)_?G$N!QrIA-@D,:GVI:VRTN(:6Q9Eqk)I[%;&V\GPdOC08c`m%'Ni^(sIe?GC3HS=_nu:JJa^38N8[
%4Z]Fl4+1_TXKJ)\/l`D-b3+aRand^+;L8.Rq0f6R]a;aOMmHX?pp0p.U%5%/](,:FT.Ll*&+`ru]_SBFPTR!?oZD+,H<?S];gD>f
%nmK41q.-QkYMPiAmoJ'.l6!$[-1,..^7/ieSj,#<f?TBu4fB=Rc?+JYs6+O;[ZGr5dsUgP5I/&<h?]tsBepD\Sn(#+2NI49:Rgr3
%-iX-me;a!X=J:VB1SsYIi[YVJDKX.DL:*#k"3,+0lq>N/3[aq*`H1q,TKb;mns7!,]H1%-<NZc_6M_M;*2VqG\_5+>C@,c:0.jJ,
%4\t&$m\+2#5iVGS&SJii`(hJY>/K(lNH2SSWTmY3od_E<__OAWmV[LP.'!*%c%3`-)E8P_V>RY6?CkegL>&Y-CPB)aXV0c3hlH=t
%h-e67p](L&O9/2,^K"K1Ne#)dX^(.e-ANZB>bb!^10WVacL0+fPcC&l8meji";C??Dm"GSUIm581J$O->e>ErX5-%;6h\%@8QQEs
%#=b9GC?]m#'e.)q>3#ORPP2HuEB(Dj(nHfq>.2eV*=&^ki()E[+h8TA?FC7bRY3]3>.)FaVAhs5;X(!!C"6,2=0W!uC`qFVLY!d>
%C-;$4_.dBL''AN)^"GP$ZA.N7j4q>$cGL.r/eH(!H@MXI\6>m@OXeqkNG=$g=$M`uk]h4Voi4K@6Bu\rU$PijR';PFHK).F4,^_@
%V7h2!=mit1N0BLo?_`2t>#;\1?-6KW[^%G/q63Hf))!4kGRP8K(p>PQmZ)T71eO%8TQ0rl?79C;=%W\2$8:Nu?"Sh4Hph*%GrF\<
%7d`lK)ch)8lqsbcFu-rcME;'J-]B\H`Ug`WL:k0OG[\VR98i=]qsqUqWue@PN%'1$*g_E<Au36Lk/,gFgW*.>>.(aC`"LH`h2q7R
%7YJtH$n1e*fqjuEW!'6li2g3EXp1`nV$.<*YNXZJ";Aj$G,=JL&fIS&BVSdRE:jii[bT%qNYM2mPPH7o?0s*.\59J&&aK$CM/*f^
%)-Q1E3$+TPJP2+@V-7M?8l\H[84;C(2cJV[_J6(gI"Q5<eJ+PJH0uK&#onR$9me@5WmNr"#KJSKdQ.e1^RNZTBAal>G,e;4F,K=-
%.)>m:6O#[_9%?n?.fE8M\D_mo-LM:=,p&jc2%3Fi;^Hnj+@qb"l1Y:@XV$!&*6\?.`4^&qi/MKCX+7g7ainK`@X4GD>s%:'W74MK
%X67!>/T^I]&K-TqUK#"^/$ZUl3r2UU_sFjaC6>75`59'1Go9K"Us^%T3]oSWL#3QN-@=)ea&f@:`tc*pi;TX\.,#uOm(p5-^j0@u
%]2aKR*mp9r2Xm)/J"pV#$4._dG96b9QR=1K4KObnbmGB&@9qc@q*ske];)G9$*7Y2h=Y'\2M8'aOAbj\m(,-9=QK0<?!Xmohl`U"
%%52;F2SH?rh)t\os35P!Hk#4MQ%OJ4m9u>l]\:G*cnDM^W3ml`Zm0>bWq-?-(4(Z"p%Y,n2rClrCd#?m0V^Y"CZ&qj>r,dDTGO&4
%\rM=fApiEW/:?ZlSn73C(NRi0nk0'H[l!T&"r3_sropuo2Ic`9fBprZ2JR\]+^M5Rb\^=od68VdHRgKr0,&\(&PpRn]u5O0oE"l\
%j^gdkdaNUrj7n)DA+&ZJ$fNJHkuXPW<j`-KN-bSNYKc0?4Yk\lY"AK3MTdU5aPp"TOaF@`YI/h]YEl>pnOBp>3arG;n3GDeh;P1t
%)o%1o[%r8B62Go@N`D>WC\:?2qDNAq[>Ph#/FKcMGKja7+mND;Y(6CUC(:rq>tRESQ\6kLh;c1t9oudNSq'k2V/P>l=b':kaZrog
%cW^#Nd5Q0Kdkf]Kb@+nmkDk:g2SD#Rc"=6+`^dLdPO+cQ)O?*oNam@C/lp?h*&`q^VY^k)TV[i\[+Pd)Y*6+!ZK$kSn'Wo$%J+1H
%3lrF#=YqrK7`.cbRZT<Uh5,iYblaa<%1UR@AfH8h*kF<[_`'B;:ZF"Ser\9Qbt\.uGr3RIUq7-n<$")Iq%D^I#=M;DNIT.5l>!am
%qq#/VkHP.YTiZ7f.kZ3l;KMH/2m3tHjQ>,(l%@sKTUTHdSft]aY%tF.O'^J1AeOB&-caLD.V<FX.%G:*h#s9X:t*8JXtF5GOldRr
%gB[D2N,Df'TLQpE')+[$,@al:ZlP\(;S"F%p=&WGbhjV'@F>5Sl-]UP$"1:]:UdGiW(l=;^4.:_:6pIArZY>tQL2Q7d_]fp0).:U
%h'.]2cXE34&&QtpCoiH,UU_M4j[8>JWMm"3H@i0Yq%dY?H\AhA6X"<S!LL%=4^u093WsIo&SWbGY3@"3f,8>P9[lN*]F6@q,^%n$
%DVIX<Q3\ck"D$ePOXa17;G'lo"_]p74&FQPJc]JE6IMm-VD`/!7Rgk7,]4Kc0?hcLBE;dMn@59<`&0:]*c^kBE(q!F9[%.22)',m
%_gFiJ)P/D,$rZ(W]dK<?Ri#jc6m,F<ja,jW6*eE^aGt!NjPD'UecE$<_mHs/\WWE10a=fCM^J>*PE:%tm.#V*9brg]#DhLtm_i8V
%*1_ps)8oe)&E],r25qaUZcNXs)T6Z=!]_,cB2Uc+fP#kr:a';>+]-K2'nls:+H?lYD4TI%c_C)&URAj@?-1IG`!M!`L24#ip3"]J
%p%^3pdI=-9DRtFQiKNfo^+`%u,gZ$:NWp^m@*F'.UW[$*.a`eFIts8?ePu,k?%WKI/MgKj:$AD'h#JUOAC>j6.W&S-O4EPKM)5J@
%Y3I8Q(A9>tUlh<(U`UJ8NAKsW`%>RNm=V::!=%]@V##i.Oh()!(k]>1>I"cC4qrXC?:NNef`t+9FPT9-dV)/&,C;uj+C5nf:<Y%B
%#KX8d?XGW0>(l"l,#MI(JMiTYGpF!$fRVJjek%>n].J>G@(.HHdR[CnNTk(\(\.h6j-+0lkQ!L>VQKgKbTrruqAsT";b<_.]S$m(
%Tk4N)eg,PGbI\pX%bXRKH@HTJ2b_\%q[>o\Z$&:S,gqcm"MHL:ijqih-P"Ka9]7X-(IL/=_"AkD+(Ask)]t(Vl'8"o(7?&dK1A@g
%ZqT5bQpZU@@!Of+(?r1TD$S/P=."7dk#1j-nh6/B!DtTj(>R#hJf7r(a:Je9b94hAOQ!K]1PclJ&1'"MeWh[=n^aM<:3rA5V8OA-
%CrgZ$6mFH#"<@e>emB5mY[C`;1>#VG2CU@02hO5!)*rAr't[!mR%=Hj[9:[dEPrTT<D,U,;eHZ0=\jTBqQM*sJB_:WTGEb(LflVD
%,FNT,drbkW/$D40kIAnti7ctQOO[aB'hH_N-i9_9g8YmuP>9WZp;M^;TT;cU\ZXgcp0RIR=CUo%?:<-4$shHPHTF5DJC7b<`1S67
%lbS\afb?;oX^qdZYrs>+,^C6@0L>;Q@?s]9RXf5!o=2!dkmBhUb),u+68`&!fQbMj221]Ukqhe+Q=H;>[^9E'5RX<X@l'4r`aFC^
%L=p<a]&m2?50l#GBUQ_$5V;21$s=Ep*\@le,F";[hQ':#@/aW;+Z&2rG?HbFU5<[/*^r^ZZ/p)$RfXmS-4Z;0(^aefDEl2blcRl!
%TWg2uVV#k7$!T[B]F'nh?)*!h$IjhT`O_8$-*E^,8Re@FC3lPYm+?7hEeC_2>$hm->\KLN8??#@(7sDR@Y,Nf\72K]OQMs[I'#Q)
%%T5#pKRI[HLdnXp@jI):0h,Vc[\Lm:C_[AnB9F)[[[J89/3>apK\R\eIYkuW-<R.e\mpij+ZTc;85.9c5rkNU9EfGn$547eH`F9G
%Oh0XbJ(7g1-O<0G;eL]L#a6f0Z5@,,r!5p/[`WH['13aD[3P.pAWZ"XWfa:Vb0npQ,tq[=\cqht5TY:D$t9l:L.`3':*@JOC5&g+
%W>3i>C^\F6lA_Tsn=G7:Z>;Q8LHsq'=:3!4&E;V_ClCXd:Q$W0;D94s:Ja1u)>//!<jR0P&_;O)!=i4d)5D<tieu^?!D=<h*`*CA
%IRsgt-%YRdQ!j))""oa-VBR&V['Y."@iUB=iVXfVjcG6L\0q7el+AtU"LZ1i+fNXL()l2%G8Ok*jGX-#JoM3nNP^\OqNb[u<-D'(
%[ScgFdLZ^:J.176+Gs>K-3MaUe[uC/8"efcB>J7p%L(]Sf@%l6:)n7:#jCImiBcZ1O:0B&"OD[E1<<97g[[CRa\c$Ckh;p+FX.Gn
%,TS.N!`o9spfJnF)2T9Y'>B/q3f$IbWKXCE?n4YYd%HZh`"Zs#W=0o'<t;,h%!lD,"1;h#c9B.apKKX!1-lITNGOhP;Q7PqnO4:g
%CBj7P3d,q0_DDR@I$YU@0P$f#8Zi(?kD3+CKm\rpBFFCkElMT+!ge5W'^gQg^F(c3YG32ZMB#@Q4/%Y0;2)hS,Ej@p#cnst)(+ma
%#tD;<OWK?93S7#*LqN-`=^BZY=.m-ul-e!hneiAAV`pM+C$)]ue$(-BqDsWF8P2R4PD1-6@iBMNrW4mOM-Y9Ad0snQp\$J#"8jQQ
%L\p@7;]d&,>:U&G1tU=o%(;F/](fLXh#e0>!IHjV0#J\&B)lutO@R&cD]6:;gLjC%4;M':!r65X.57L)RbMmX[3!L(a&WXaWeeqi
%[AOL9`A6'NmdaeJAP$u$n^jQ?&mQ%n6q*7@>eq@r]09\e78aM^(&J/[-3jBMJf'YZ+FfJ><.Kf&8E.Ho2E5agDG)ZW-J%-6NZ,tr
%jhPl`UQ=U\%g<H4+>SYFCs8YDYe6F,!c'P%Yciu'GSg:0ne2$eC$*T8Nh]VY_s?g?q_A$=Rq_)rn.6/glRZHsa/q0W/V%mjRYD5F
%M?5G/?aaaG/=OSV,n<gu0$Fr1D"P(Y\L*;J9%$6Uq?H]e&S7=YLD+b^N_eR]Gd`QD_th)SVUNRDWD0IbJQ*2k;](V;U.GE;XJnp+
%4lsJWOG5)0JiQWc=<sul6QLUb=e?E)b.3L'5*dg5dimR^0VJV,"^2*E;(FaZi90;^V\t4cXS`J*!_**mMjRD_dP[=s#B>:_>;<'D
%D??4q8#YG$A/!uG=uc)="n_1K:$f+6NpNMcF-*OKT8*_dn$%I4A2#S!C*D9'ph'=9?ijlV_b_Ir>lZ(XdSYEebDc:DYWDj5VVuSX
%10'o>bK5,!lLOpA+<:qDG=@*YVD[;9R(QtaN0*Ok%#KVrfQNtL`P_LmHqj[o69N.nil.n@+R89-8:@cc'gZ-p;KLm9`Bi=*j%uI/
%OZ+!s:4mr[4nC."6$R;5QJU5TYYZI_;etfQ/D'7\m6\oo8DiiSRQiJZK+u$8DCFs??)6NI#RqGHMhC$aG+hP+ikonlF?l:Y=F8<@
%`&"X=U@<`;92;=cWa/;b$ZU-kJs6hlVgM36l$QBA_VCGBOM`0g*f:F5C9+E_q2&^@gfBrsGYq)^AbuudM'T"r0bKgWhe"O!%hB5J
%fk_LQ"4eH`09IJhYc>`OdG3iW/,H;:S:0P=L\p(MHG^lU,6*]1e:f+HLF`ui*Co(/^.XT`VtWOfp^-#(Q\UUu2tQ7)Kl]f+M2>/(
%\FR'[,,A(,j4Oha$&>nO&0O0B`:5ID`BsXAbLaR+8*%[2Ye+oeKlf81I`eGa=Z,g_ksB.+)ksI'h&PcW/2]g*"k&M*VMT`f'afVX
%0qC[K?e8:F\F;V7%iZWi\-Vs_hCLhd=KTOdd58dm+0t=L8bRWS6.'9cXl&57eRrmo1aQT8:;of0;?2Ol,'1l3pe;YVRZ]<iC?X]R
%b2<rG8.;2oVOlaXZ2UL9))@ZpD2+gQkd.O;D1PP'%p%1YL[_s2+4A;.OZ&,`6[X%+as^eTh3F7foot`hVA<<t!F1,5BX*39c76$S
%YXQUK((-`Z.)LB>ZY>dt<ajm.3EYi88(!LT<m]GG>uAHH:X<O#Q!DC$8_>a@pOcu((mnP_;$kR,neP9%F[#@=b\A0]))t=`;+2V.
%J]DFA4O4RLrhb_.ZliBPMBj4kP:?q1DH"Cb'PbL&77PDbL:=nUWI,Q[<JJf%+CnQ,),M>F;kIl"6uQ-TVBf>f-OFCtI8.hsm]j@m
%:1iI<Rpkf^a_1>C5fr:L_dIY`BtEVe;=\S%"&c!(j5Bu+1rMZIRX!ahTVWRT(?jaKR7GagGXP.fM""d$OFP.s*P!diU)$DnAbVkU
%3>-6HfgW1qU^)cSjE3H7Q[&P'f*4>20^WBl;\VB:,hXC1b%9:Q*edN>dh]m.*071cM,^B++PLY!opAo[*)Mt\+/OLr.H]j7Y\!jb
%ZgV[_UV6mP-KGr!"?%GZG3e'a_RY?YKhmIk6<*t-<G?\%\<\J`%$(2o,,A#.*&U/Dg<3c'3HT5o&W=4+s%'`[XdR8u+9mKqIM7=\
%J2YI6^(--SqQRnQLs<o9&$GW+Umb"qVY;acqMV5BG!!tCiLqK=lBu,H%8bDpUH%&j1d9W>'!O`taj5PpaAodPg<^EYPDNSr;ZR\+
%*:X5g_iY6ZY[+t34#.%MO,1"c=;K4L:tmiYPs.GV"4)sC&LT8p0s_9=>#F2B0<7/6/Yp+<r7;VK6*r*RPf$u*e[.(-*4Y2^c_<MR
%m8-Tp2/E9G%YnWVnfT`!91VQj-qNf;F;=fpaK&OE+b\0IO75)$ip01G`BFX9Ok/tL?NqYs6KgjYo6aNBq4&6[Fhs7]8J,NS-lq30
%*Jk%i)K2A<6;gc$%``78,QH24KQ%2-,TR903Nb>)%SdU-?!(@B08lkER3#;eoEbb"i%,?(UW<O<`?:D`pn6[LVB2>.9cgYPT?G-$
%J6ft.8n]ar3@FsmW!k)q%WC'k5,<TBr]6?287<dL?EU,j@3`tZZ>DC6WtW/jPmcWO;uAdLbAT<b$brKQj:pT5AJ*ZAcBOQiF&A=X
%!A[&1$6KgPdi%/437%,7*:.ahR\C]UA=TWQY:7MT!7L;o0[Rf7,Tt$GSKSbceI40+>rnFcYF*72Aa--<2[>/6_:SfUmK5g]:>;I]
%$X&FY=?uFYA@8fAR?:W/:qQn'DS]HX`+L7_&O)$_cpZ=0L*K_qp=+/[R=d=(E;)M%D2^ZlAGk6iHq'\$Cmr2E9k=u\S-eLe+Oa#>
%AHJ0P!%9N*g=U9'>_@Ttr#q_K3hH!8?sO(J_a59_p+t9k<8ch*D.r5n`BrL=AQ+-?W>^oP0UWij`bU9S$GhO(4p)3HU+67M'OTgT
%#"_ac@hEAe%VUs[`n6mIa=:F^:;<4[W/>/f/M@_la4DO+(a:G7Po1rD0*QheO&2mt`R<hr;ID.?1/1c<&ci#QfRa*T8ngP,Y0J;K
%DG$`AJ9$0u8.Y"&&<me0in?qrR%0.U)<,=iE7[Kl'7h,PM8ElfTu%VKQ_fo=Keq_mJp=4MQ!u]Q>osiO`mSO)"i.H`Z9\IXHF\Fk
%6glTdL8pTXg.agOWBQq)isb1,qDEGETS;1>1u5+&L]doLY0uKr%8Rs3HA<CV9o)1]Vj9k=::,?f8!r;GioI%n]"Lf4m;04-;<#bK
%D!Y7=!P5Kb*?]^A/8p%u-3J'd3rggPPo1m+r=>TfKaKVPYGR/o6psKkpeDA&*Y1W&;e*Xu)N#4EClj?`*-GJnnkFj0$(co52FTuk
%UK/Zr^8m^-e]&6+p%]SKGp3TmB:GG03HYk*NAQ]-.&CFGhK%:XclkJ%ZT)d\NY]K=6&9\lLRXEhMGBNuGaFGN&BjX/6kW<P9h/&W
%B+"L6jlmq/0/%c=[l\q?bjY[I3.B)_==>4fQ5G_u"&)3Ni0PnPqj&-o8'NB%bn<rHiiNUUq1';/%n3Ql8u,o5gDl(ha]42!0&eP1
%AVb!_iq[gs[02l7"g3AiR`DOH#ASu\+d?td)k0W3@;tj67i+GuJ6[B;'=uVLbaHKZeWF/!-8>XGhiQg-'Gh`Ei/,@VnncqjM\?uU
%p)FBq%OFskQX^@'/]08hC#$mh5G?dX+6;HQ%kb(aD&ma(*?ZK#R5RFR/%,V5a8upjFCi(;DTh9&(D:X9OJ0t**OqE:7!r[$_BK[8
%LdT:Cj@reA!n*!mF>U7;-EO^@W(7Qg@)&>S7WaiPlk4+>r*"p'V?2WR@,]c]<uEM]gg=:7"XD4M*S'HO63-:W6m&[J->M^jB[]Vk
%hnRDsP/q0u:lA3`TYlQ8&J,L6Q%at>I_u^i707H&Emd\B%2<@G-)@GuaS.PlQJh(pKSp%X:ujV*+=//-iMim`P#_`(bVl"?(#hkV
%(KEO68qRm5`0%;64LgeX\H-]N9S>nK@fg<uWUU+A-Mt'n&*OR^R]?Ya3P,Bh4.@LUX4Y#gd$&(5@l_60kp>;\d%hi<.0IVb3[^$1
%d1c,Lj0:U0F@RBe&YHq*L^GGZbRrK\7BW)C6lhKB<2?oYEJ?<!G(V3?_701d_7qG%-_*iM^F7N_g=jCFAlMp-:ri0uaPG2hr58Mj
%:rpQ7D*":LnYW>(F*5Sp64/s.W0Dh!m?,h4o&Rd7jM?::b<2WALs'p>SVj/ghq-ja0ZW]-#_Wb,R`(78M/dnlIUK,BW^7S-e&9B"
%F:%50o`G^+cE#6girJ=5a/.lc/jjak5Z+Cokb`)CR5\+5)NK>!<'2RW0Q?GL:te?TQ0U.ucW)*KZ1(^9E!K?udQ`c@f2*GMJG;u8
%!SIh@3m+d=W2lT*j%78:p5BLS3)9T2gMqi-,2uh?A00[L@03"u\#7$Uk+h-DQV%JfG(gH387K([^QZ#p6]qj>G!s:S/pP*`3Qr#)
%_OK*Jc3\Oh'G5U3%-V(a3QgI*2,;VoapLp/iGdGt\A$FsV"g8I5ZVtbi8BCm%67j-WA75//is'oVP5K>$O)!"f^'j@=/@gdmn*YN
%:R7@o\qu2Xo[FH+>akL,S[02<=#Jo<\<!*=MB#QoK1gh-X)WH!7s%08a-)TN+3u2^-s(`iXrRUPBAt^:]>FV$qQ]&In1Z:B%hI8P
%`j^Y#XqN[f-+Ro8L=WIgYcq?kn2NJV;$TFXSb-B4kfhC>F@Z"gflI`oF7S0WMGfr`<*1PBBe*V^4Kh+Xm%oeU<]@_@O=:F6N=O3l
%c64"L_BKo/W`3WPW>QLNF:PWS?c`OrK1l-#;L^iEp>];<,N*Ie#R*CE>GT=q^s)";6qc'u[OJHiSVeKE1nqls%>VPR+/O='6%-0L
%dHN\5l1JRL(_DUhklr4ZO9Fl=`1<j8lA$XmUZIU'f5%q<cIg:H,-Tg*2+mqlX_`1,F\?_TlbhqP3os<I^ka\QC8c=lD4r]clDf%8
%HQmUonf0SLYf2enk_VeKD/Ns.MK<_hfKHD!U0s4>7#I$&YW6YVbEWYA>l0uqhZ%o:lr;a/0p8Y4X6"GH).G42j_V&?m`e'B"TW.)
%_#28u\L9/=HAs'qc]iqt*aBVQ;sAItV8dbMM<,@I:<sA%E)_gjO4&MRS4s](Wn[t0+:Jac//JIK^4U'k*''jP[$M:Q9M#ZgG_F,X
%2)Ds-'l[$T/Hn'Yru,P<0oBm?]aaZAY-pcb"A)Gl\WWWEQlf+aIcH/R_f3"Em?A<dUS3<:>,BZ0:Z6S<IgI/!VJ.Sj'XbhZ#sS-/
%SlLu$4uD?/q9_HPH$hBd"+!/sQ\MMGa68IQ[b+[\,r.nOVQ%\".(%LN4/5u(k+-:I$kepAno-u,dh\(Q%>9p)TFjCh9T]%b\<4^j
%.V[h9%4tj(_Q9eUJ05R_otMU%&4(#/o2lr/"+miVM?:sQ*Z_K#FGVbXS:d11F1@GOcE/D'*h4cZXJVuT6UQ0I;h66q%]]e;$-5!S
%nI^q7dTKMc@/3^kbuJ,>AP-=Y[(2kF*TmuiHt<=]VTM?U7c_X2:rd$9krmJpXsM77YWO5L!eMq3(hRLp63a#tQL8e7$REj/PSM#F
%n.Xjk`c4,)_j;C@LMVAQrp:!r*&7$S#bUDZ;IIEeC`7:A5W1hecB[HeE<_hkWX*PQ\L7\ZMi[N2ji;KDEo]@sRjZb]@1TLl2r(>V
%=,@75`[QSu%4?R'#c(jiBU;d729E[tY!1']*U,Hl3V`\#h2:jYnCb[$%V1"AU84ibT(.SHiK=4raR_5F-T2,MNjPq,9!fI:&2mEs
%MK'i;4%c5dQjA6,lfo$\V.\In)S-8q23ni!;E,XmCH#ekT'8`0il]e/53K@#TYfduR]K37/O_E::[3Oh5!O87+OBR%gA6j)mU2uq
%)WKJ=?68hI_f(l#M7RhL[kukJ;\>rT<@JNE6(DOt&<6`-`6XAs86<o4%>@-!3Q,NQ04A\8UI0&0\,mqT'M^:'AIS&qD+TnX\;\Im
%gbPOo9FUA#B0pQ>fd7<LZW%[J0@nqF53R_F8DRc?!Dq'\ipf7<'_$88(`S,&+:fSM$>M<&;0e[*5unR8f1cD`-36879*11uZ6#oD
%+&RMLho%U!`RWMgc!,_@3CO1q+?X)55__Q!:l6FWgPc(>I&&S2\LObQk((ts&(neRH9n\dR)PbRfT4:+W5^84G-[O7jKEi8f?K>.
%PW,`d0Sq`1oRYu4+J(M>I3Y[>#O]5CSBA(9UUrQA5gc$3qe@#S'f3G)c?U:\2#q1Y!C"OGY-K&f=\&gMkgc"6M^pZ*38*<O%.oen
%&C*hRLg[AH0*)r=*!1"I8BZh1l3aT58_3e6fuNk5Z:3mg[0:d`cfT!WiJ+,iKV-'1=i`YG'oOIh(&\V,KGZjjiu")./kr+k9;r,n
%OPLb<$R[nKN.OA8i;nSLM9rf;/1O\`,a5'&O::VY,pENd;KKr@_&uHXrPg-!L-4R/._-gdBh&bd#DWa2>;dIl%pV2ED7N@H:u&R9
%e@4oAlH(?uj=IBf6TnHKaB)EAdmHk-9t6.j/]WWe%*/l@XtRRJ8<37!4aD4/J[RZVM6ghYj7cPn&::E*pYlKQQ<XJOVE,AL?$-tm
%W,K32\4+i"*O64Hk>s8j:iR3,'ZL'8)]]@AW#]EI!FGrLq0^Zn#[bfp+Lt,I:Ln.1&Y6'"nt\&/&3uMNS18jM@:@3"V:nUr#'Z3W
%860grm&Nc@q1^Xb)(1X0$-;(W8K;9`BK/JdjRC:2;%W=:nHu(';^+ohYWRK2n.-)JjpH>un>%X$EX@]M:K4AW5OL@[JRGEh_N!Pj
%NoWM1Y$_g&S=o1qi9PLq/*1drNK(1XSQ:'**BaE5.tl%F)fG5@JT?,T.A(I8&J<R]*h8G\7b#I7S=mTWE2Umh+hYHe,VHX_MGHck
%\OZfu?(+6)KZjtjFJ3`&l`+1L,&W<q!6A->"?,gN&%IkMZK.BSf5uRW>[YGiI7LI%n51nPS^kkG-FaNg].@t4QH,1uG1VtkJJ&V9
%42V[e&+/Qr$QRh[3'?:m)g"mPC7;A6p2`Knb:*E+#6S$HlA2@"]+o0?G^FPBX5*AV+`,a&W2D87<`r7+Xtd/UL[BYoD5i_6h/sD\
%FgFF^gQ`^T\0O\3gR'!X7.WV)jLSDs!GQSC'Sa&o%[I.W-ZhFHJ4+Pa,ZN8f^8/R(KRk<N`6&^ccb@*SW$cT\@M_O5U<J<dEgM\3
%>I0%<U\H_Lh!3lZM?/*+)(t[3/>Y^Mgd"?b2*24#4IH<7E14lXF^%oUYcpK)1m`!8%&qnlRB^a3M5HBrlB%AY`6dtJ;srPuCut7%
%nT$8j9hugsGh0*DI(aJ%jhiA$<XfKR,_-kX8J+fb;[Vg>8a#<fkOad\g;E'oc'OnL!Ke!25TCMV@,#8#e@@C;`5D#]a6q$U];Y+)
%O;2'$a!#gro!Wp7LSX!.&e'k5EO(SmF_.H`)]!@dBSA];p%A*G<kbHWJ;rSPN.V>YCEZ)4/'7[6S@4Eg3o\<Aa[aU?BDFBuL'(Os
%*>Ym@)g6q*[*(smP.FYE@XVMEc7,PKh>8%Rk_\D.]pK^(O6Q7WL*f.ICe'2Dd1_Fo<2J*jFQCkIIa20gii%]ucI&t+VU]s*(C:SG
%'qVdOXQ\n<S'*E0LiPRo`SdTfTfRJQ)-:Y>Wij-s*oJdo7qL$fVpc1qMN\4![k>C/=*ZTp]$krudda*Qe[SN1ObOWD?]cWijiUpm
%F_UGrL>7"V7I:=%]FId(mI*X1G/'=uHgpB8A,ka]G'>llP^Bf^\9=G(*6%B8"D=$TRcN*GZ+?hp]#cTV'1\DF(Wsj[HnCm>`_=+[
%8lJ0'RS"$2TNk3h$hkcg^6GV-Ne6J$[nKLgM"q@#Uh->BqZ+-o$W!;_"RNPs`!*V1.I45",$nM*Lg3-1lbNJW$h=#C<Dt)'%`C5I
%Vm;<*,QO!\+@)5,kRtsI3Q?W*VjqrE:JZ89Tl+lSOKPmOR+g`O"'lX4"2a/BWdMVDgHeLID;m`1oam7(n\)d^P@mP5+FAbgUM>^n
%/__:iKr_)`Em@iEe1``D.eiM$HuGaD()i'^\>_t3EgaFgdoGILTHBYD+<iCW@?=)!=K]48LnQ^gZ)EUj/[P3b+^I?<":1*%W"]oJ
%Vit>fEM/$a<#Q)j%^aGfODNAG)7Z>*Q0F^.9S*V$:KD-jl4PdUI-b?m:f*@6C^#^WS;f\&m0Kkh"0)cmRp^6dX.eN45]%fA2Tm(0
%o,T,u/fn9WBfQjETT3N`X#rsDe2JU#htGi*!*uFLq`m<eo2jpZc_iCC"c?PMB$*t/m[USi30\M?.X&WGN34:XTe>jjn5(9E+$[W`
%0s6RqKP5$'H*T4L1[>@gEkK[ehruWPNP*jf"T_H,p"@D.q$ciU6j9=timQG@kC%S,\??<ri]7m380C?J.@uL-3Yt5!b#Z.>&HogH
%$5l$X4O6tC*j@lpnP^*A#oE#7P(G%l:JQ"LRGnU[\8UPR?qgXD,=e'HO:/Z`PhGou?9&t`!PLi4[iQpm+E)^QhMic_O(P@I-bd]Y
%f^E9*FZ?SDaYb;3q^rj_&06h^k].7"\j2E74JjU,G54^:7idLlB^"Fu8s?uToHajS.,1!#\e?q@=A4n4U&O_mruM[2AR<uTJl1_3
%%X]MA;qIhtd)/4JXqFq\B.O&Bq)5sC'87M\DJ1O2*At[@8gI1j*oURECp"SK7C\)`6&)#J^ko)f\g/84>B6V.U>gn\0Jmb\U9JTV
%j1D!&d?X1+@Z!++pQn#c>+1ADBMX'RK7gLJ"rb">b)MBa*]hoV>T#sR/$A4!]2rtC'VE7Siog2E+Gd"Jm^h;b\DbL<N1,FfV!o--
%%h7g^_B)sumqUkT3!OkC7$c>YcG;)7<.ta>!Uf@=/eQ`$q"`^i`+>Gu\CqY)1H76AhsI)0VB3.aeJj%MI'Gq46g,P^M,W6<W*opA
%F0ONMf2d;-4d4f9">&$@d*`I94TY0jAF)Q9&5Rm.Y+5i/X!^VIgiSUT*>lq#6b=W6Si/8HLH/4!gJCu_dV\SOhR#+m,F+bY85>s_
%Z_N8l&_)fn4Uj+PfiG3WFY.KekPcZej$i+=(V`@XTZ5TQC3Vq_('?ti""Ti"Wu]-+g<g_FR1]LUi8`N5fF8fj_baAd0IEB]*Z0<%
%I+O16P,lk.j^Fq`P(acU7R_,3l4EcC*)DjHTmB@@Or/0%HAA6ga%Le/[)\:/ZdnB7&qc?=[W+76LEcgGZaKqo&4j4G@g?HL4IqQ+
%Cl)a5K4P;cmqE&-mLJEkb)3]VG+bM>kWH"=Ol6`>!>J'rVh7eulAKDU#SYBY%6^O<NZ-3\Xf;FhN^r=@^:UCT=?:2Sj)UKak.;7W
%1.j6b:"'4Y<3`.D;@$]#jO3Sj6I1I+AP6+IM^Jf^7E!9En`.hK,!RA*:dZ3c0Yih`/ZpZ,#h7o=6H(OqJH)7TGMBMN3OeUO_!b*d
%JcJ[dkD8LU\TAtq"i6LAft=+r','7RDIFX@kdPbbA,MI1cF$\SY<)<,gta6lY#1TC1ZS8NIi.54]G-tt]Pp(.EZ37HFo;-/d]^Q/
%hSVW[W//fb_)\S>U_p714-*.YZ=#1ScDEK<@^6c!D-(Pd^)9r(oZX"]&Ai\078)=r(_<Cqh(n%cQVnIlQB]I]CDZ-E+QsfIOi"u>
%<,tnO[_f0p=6&KFeRX\L3\68=iH^kO/c1J/:Sn/$\n#h"\fmp<:e625R-p<a6UX7T3q$i6\Qk8/LeW_74`@DtVWm'Y)!;n87XA.7
%o4ZsqgoXo\Yj3tLl.e`Te"s@\481iAMTUirhQX\C6g(lPNCe#<1-LkuHs3r%1NADH2]@NRa\G\h&,(;@_P0!RkH$QPe]tBYaPq,H
%1qpl5X$PFaaWf'bp?I-d,:K4f4TTgJS()\4/n;9`6meIiRu.".94,#!J)9.@P"LGcNbNg1O'WabW'nA>ELJ/SAVLmfgUfK=%>WUN
%&coMsmnlaoXiA%,Q_C&gO?NV#8>A(fru0!LHA(S1c\[\(gko!aZ4hBE"-Q%L-HU0]Nug1cM,i>%T,od,H:9pQ/gF:H#K,("/b#br
%c555Q'Q-p9k4ID"D.o"[_HH$GX<:4iC]$Ah3>;kZ-qqUsAhX)MCVJi0=TkW/X5ejd)tB[T@dc/CGSbP&S*><+Ld@#g.+;<tFDmZ*
%;tuN\&*fh.7cU_t@^Mhn@]Nj"P'8mjDqjr*@L+m]hQFOR;TL*&)-YCB!:n$?NpW9Yp"RQi()N"F0?e3!ARBT@rS.usJiLY;>^2:!
%88:pY0lU"Xb^#U(DuI@45G7I-j+brE,2t.Sek9\9h`\XH!::jSD^HV$eFf@+d4OI+bp*YnI]\#cDlu']U$C+RHe\>+)-o42_o@`I
%B[KcE#f@"@rjn^0(UkqL`qIg>_O.b6L1<M`^E)t*QTJfKGm'nB%%a6\k$%9mJ+*g)\%uDuoS$0?h+qaYBZipW4nd91:tu!G<4?T:
%XJOdmI!D/-T]>;r<e59YCWq[p=n0e4o>u6,pNbfeKs,aG\bE-f^2/bkZ<1TrmIT$SMbJsPH?8tfL?dYr2KOqrP%hdP<g.TEfGj7B
%hu,R\7G84"6^*#l.mBA+n%;pH=1:hrjIJ6r-d1?WGC)!pb1AcPKs#B'4EgV.2g^g"j3&HnW^1p*g,k]&iQ<`Nn`^O1e+q17fdb].
%2tWXGFC"e;\8WO>;n#p)rH=F8o.^BlQ`Nouhg,e+S8<'47amUa;S=$I$$g0b%I^[]fq6om&s<r.^rgrr26ZQSIt:2h?tsG8X51A=
%&=K@5brEWcSP@*#MIR/R+JY-1((V$0V>J0uk`;^n/1t+[>&t7*H_Z#P&Jd9N"28``,Ak_HmO+cfG?Mgn]?Asf-@5FGkIf+-r8m@=
%lRV%7L]c[85O4T^1njkKg.dHlgT8Moa`8Phd"J&9HXM&s)Boq2s*a>b]e"Rs^$@X1:\JZEGD]GkGg*aY0E`n8gne]MEP7ED,!Eli
%KB`BO&MAO0[uW]H6ZsGNQgTkUD0Poln9ZeuEVJ/t^'<$RjR530GLu$F"q3FRa>FeWJE_'^P+U^9#?],$)u^b1,PpMUY574T])MTW
%KB210<tR>6J%Sk'\c-A]_In#FqqE4*\rPg=@f"P'kED+ZLfK/<>cPpB)J+!b<NA4d/7N(SKKfN1_E[h4+i62o:.6H!cLsRb9%9(Y
%Ej=K7pnFB+NDtk9IU.NSf3hsno[3Xm.INM9$14J?Qbsh,7ENt%Dd2N<"0Be[m6RL]hD0O[!e(%oNn"THbC-4!%Wlu0h^oB1DE;+O
%+SLBRQW5>)#pKDp!I8J"I[Rh_cca)mll1G?UYQ<uMN9uL"F8C2I"&F/eF#Rm*TBV4*QR`Tm=&p%7[<srR6\#ai>:>5RO<%M?U$:+
%^H199l)O;7/sjWC.7oS]JQ?97^7j"WhNQUk?sGCkfCs*2n$OJJ_m9t8X,g:RU(L$"b8figU!*a^QDpC'qa6:a$h*h*?Tu3[,1#PD
%;E+VY3N^psim2e/@Pd^r3>T;sTEU`rfE"^X9WF%8%u*X`_Cj1OO2fidnkkZ[mEa%oJun$Y.9'*n!Yi-3LV:3AlV)<X3^66-,I5:)
%\!GZ8`><Q^HMcJt:cSs_)o[O$-8#6?p$n#0'T/'#MMbah:pmO,^f5H-jRmCTSC6]mS0<[\]s"J2]A2@3eIQ!QLACKJH(879]Lb?0
%ip\H<:7jV[T/>(g]/F^K;%5&+0h(TKn!JR-e'U&ZPfLfuC!&o]hn%#aG3%:RaQT2RN.pKdK,;]`j&1^okQtCb`8ngMm6NeT#:`"L
%l!UP,kqK`=$iciG?9^RI\OBEW*e3.,5?X%AQ<l`#l+amAnTg/c&]o5p;.G3,1g968fVlGiH.S]=)+ubnXJd?aO`m_\;2-0QB+Y<r
%2d*8c6<BPEJ4_LsBm".(GG<L!*VANdY*41];0-t!D`j7hMr-'\p"j<r=8M.TaNYDu2l,ItpR[jMd$p(=dM83Ke.Bs%I>.5]bKUV3
%9uZ?q@d6m7F!Pp\8mT8MJA4Jgf!`b;dAPEtWV3Go=,tIt)!-BbARF&R_>2IG:HI]DB:@LF=>qE!4ocjcJGK`)WMRj9?^"_5cj1B"
%7-eXkZ59Qs,pFF;o6]>Yk:K+2AAiX"`K!TGVE-`[j(E,W4*S<;\S!ddV_`7[L(:7H:`l0??ln'iD8GHC.WT)fF-"Y8r,[:4fV-ZR
%r@3)R:qho4nBP\_*MaUI/\+tX`-Z9uVsX<IH`RC3[g#9Bm@7?kep<)Yl?.!C\=m)CHZ$00^%J7hGEmD[.2oosC`PlL<'Pcb*&B4s
%<!G+7U20U2:c-FrZ$#!Y9(H/(8d,Ou1dPUL0[u,q7mZV@(X')3*X64bo[\LO6?X>#hPNT:Y-!0V,&6N_#&!+SeZ]`XecO4PPK%ps
%WirL5qn+5A>q>%B>FPe.IE!a\+QdPKmMXGVNhRh:H$ogI,:(jS?/M)a+FoT8?$]+s-;`2'-`IueI:o1d&:0TWpBCXdiG;E*P=A\'
%.C$5II#iAldcql/E\>nQaWbOPiYC,ngE_DI\KXmfb>j>Ln5Z3G9>=$#^_!2P%DE*&2ZSiMqi.7jgcG-i,cZ4.Er@2U>>W33a,XhC
%<KbA(H*'oE;<8`[ABg!9?TdY\]>?KS6tqpKkg[nDAC9.`(^i,k5CDhgA8t;D)-n7OH`)8)<)_dV&e>:QP1YJ(Hr*[NO&qCV@Vm10
%*V8W7hL.k=fk6`a/b5Quc?71];;ZHd>^*-`EQO0%#PB$1cuAFK&aZ.YIBQ:G`Bee5<.^$T?Bgai.;3AfDXgki?@;7s"dN'_OB(ks
%?rb%H-o`C_]$DLH60\MZ3&)K>RC2nJSk#:?%+U'rcCEmZD.SS;5$h=Olu1]23H#O*X`X$+Yri8F:4GbP,<`E`ZR5Y5WT?a9.riET
%Ugi]'^jHZEUnB&GaN:,YpM^:FbD7=n;Fss%[-d<7Z.%-deNqO:>1rjDSdnh%PPM;f&-%EU-0cYR&jUabd>KRA)Wj,&@qP=]np7\m
%>(OfC9)'uRY]td1ADMbo0+efV4M5.!)181cn*YP[gY*ul;9bmXP0HC9f2>CJo\8j1L^9eN)AVoF':2;%EqP]'P3U?acSqa].><o]
%;Wc7X.A:T)\s/>o'k>3l\5cd#Xk]ZG_7jtc?9H/!agq1PP^WMI9>;hQr2!$t;1\0&<;@>#]0iu<9G>2C.@_PVj#C>G\JLpL`M`BN
%/P2+Sf;X<T^7_m[(+l@ug=NEn/3\`Lo$1=(I<4<V(:$2\`kB"nS?0Bqq.,]6,d3K_Kt*)UDY5$`p:*S,M,hH)B-+^!$EH:tn#=I7
%k,j\WWT8:o;<YbNRT7Z=Rb;;LWU>forD2h-UKgupB9<t$de;@.Pct3g^Y>K.C^'#+pOVeuO=*3cm8l?K+`\R^gY*Ol>8ZNi"Z^9^
%d,Af"]M(6=/^Y6N0q6#F7+mJhjI#XcFBbfWa<uK?Su*4&A@g'l5sQKljE0[]mGke*]d;c"7'7aa^GLsI\BqpdD1YCu;UPH#Ru+]L
%\j'b)@TCL^e1u<f"!gJ1f!ah&,l*tIh(M,%<=`&&21fG"[pDln$]=ITXe6FOD1Nk<%b5:^!fc<N>J(0=FXQA.Fiop)qrRuk>c]rV
%r4=Z=`X4GS$PcWAh,"V1oo3L[<TT3oRJkE=OXgc<S2!:f4/!u*T@6W^O4KO*,Lg/F(=\I9U:"K)?!'gAdt>bGj^+NN>oY0I%2"."
%'Z-p79e&EP@&)WkIKp$(92J6AFu[BI[2P/%V]r[!H0Z]sJp^iM<Jk#[Z)o&dp"NQg.HDK=;XH?(>@Qug$O,fF6Nuai/0ND>p!D"l
%^QjL`o[7L<W@EL3aQ>NZLrO5U]+4^N>b*--4Qc-J3b!8'$s-taF_B\f5-icIT=d7_eT$l4jdDk+PV2!#AW3TEEJ,t?QVp)DO)5%B
%,KI;6H*qJn>B7VU'4.X\b.DSo-dDMTB3YeT73mdk>Q)r_(8p2H.LEmQ6R2\/!O$;Ie&dYQT&)sIL><OG*gIcQ"N<F-nh:n)T?U1B
%r<d!Vfm>>CBZ\6W8cUb<fng@=!&7WLPLU0+_#'?e^-UX(C-5rSP1h8)pV+%*?L'=LUsHZm<\IYS/d$8<o`o>QG^BEQS3]EX,e$+*
%7d39E4_`Dahf$$eoH*)ecan1bel_5J"UZRdP"0Nl!UW?"borM_2"03/HiUl\-g!/MRcCB&R3mLU2Ibl-[pO1[b118gMc&&1bAR1q
%:hasK?JS)F7F+cAX^M:7\97i*lD6tZC!e!EL@raR@3])uei7`$g7hKg7!;WOp25l_Zr(2XD(h,Oi<R_AS<`MceMl&.$Z;_#+:m^S
%SsK;C1E]=N!/2&DQA3a6kW!#lmlIP`OM`&Y9H]E(gKrYRbahW?>]uZn@nfenY77gHEGm>kntqa5BXB3I:>RmA@G]+&\;3Cm<S;pm
%-S=h/;eF\iqBB3GX!&/&,12ulh<.%;O"Ll,$*gXsZ5tBl":(Mr=AA[Kgj9oMT8\AU;j??ZV9#GP[G87foBuF;?B3Nm87%bg]>NkP
%G5=[Z%MQ9oS@K4C4m_h.*7Z(0&UJ7mQE)"p@X(^5>LG72iGHhX66"qH=cZfTWWnnBF5iDn?!06b_\?0`;Zpr.`Dq>-%c(J/^9T(%
%b>W*:H/6)0ZGDt_gcp"S2NK63%HtJUa27&Q/lZ@p7(W;(;p^;Vj%Bi-Idcs?/iuregX.!6mX;u;l(M0>OIpajX\Pc+fs6>cW0moD
%'IYlb7]I1eqK/:W:o%cJOb2;V$k573]LJ3L<qpjoW=Lt^@_R0(+lQ5i9fo75V01cgOOO:EM9MdXoId.L]?S<o"AQjL7''G$9(7uG
%plq$a4;GqDBNW7MF_c6s>-hJ*#$<Loj=U\^'N]O>O!!oAe?=(i5be$7'8en/gliMfF6Q"'0VTj)E(eJg5r(^[c3C7Y4,r-Bc,Rtq
%B`pT,g5?g">?<&(jk#)Y7G1p,%T9QuEYDo9"-KfJLVdF*&D8-M$3S(l8$*k0`2..ultm1g>TR@h,7c>lc!tmE_t.epq_`b3;>VFC
%_.g499m7/_du=DtY/&^;G/@[Mf3N>NTk&Q>H`L*qKlZl10DRRi#/_$5p_!+K2AMG0b^cY:&Kt!1]Kk<0/*^1GX@'/]H(0cKi8GC(
%4[mH@)npNA+_]4]lfX(Vf?![Q,okSY6*qNP+'imUhL^P\@fV!%OL<N"QuTbbWJ5CC3],B%!]bk4GD`7)gP^7_MK,?1kdsR$T-;pj
%a-M5'7:3W(R;a?W""KImq>-lDJKR7-gklgR8)LC15f]`f@-r(6r9RRLrSCB2C+:F,+@0'8'L&$J9gtujS"]=$nX?2@eqogh7MS/Z
%+;WN\c;i<*H]N/eA*Cnha]"NdBe6$qTt%3FZJZY)NuEk`4a7#t!g".3h=iX17skA3,]2pqLJtFa5W1QYokr;.:`1\e^TXo30(jX2
%gCou'O*\[@QMX.$dQ.&A.mD=X]o(0UEQoQ'=-nmJ\Xu,&-5)+`FD9rNl9r&=g4C\qOoS)M&'/?H:hmW.7a:heA%3C"7]$8A/^eM4
%C#C$HYf@_"F5U75)97!3f>m02gh&Z,cbj\LbRgPQLe(a^$p/kh7QHQY>PATrUnp7fM>RRS1s&+Iion[lNr6T>%Sh3r:oYb?W1,SV
%[)D@Kl5Df3/h!YUPrH*udTYJn[_X[[FNQ>G&uS>P@Lhu?LhULadhd]rS),tnIR`.;q,qNYG=*Do>APJ6].mK^argZk1AdnOnZ9$[
%j=CaGQ,DS3,>q-f>=DmX;K9<N^kBk^5IMF3U]kl,a(?bmKM;tl-=Bf2ifGMD:l[X2P/,[$;Hs:F,Lullo%MpH-N$End8tP]&`d2S
%_b:B&j)Q%p.0I1,MsiL#oL%M"Ne,e%n\:OJ6Ac0qg/)s(M&MQ%rHY*^b%!Ra.\C45QkpR.W:aYoKmIgK\Bns<ZT7.L&uY@+_d5*_
%>.F\VG!?`gF!a-3n0<gIS+Rs42%-GUk2&J,dO8\]k8<(2'SNH%`m,.(crH3o#&;Jr+%#+HlPecnMd.Mn@TV)1k7i++VXi<IA_F\:
%P8YL)EM+]?[<>1`EGp[6$*AT:C`u/HT'<<7?g+38%#hCPk'E`j3NA"[+XT,b*LK$JTJF\u!8/YUCDZ&Bd=!!EVbKlQ]?9&tP`sS/
%#S>Qe$,ju,>U3HJhWJONEl@WGgQSGAm"WNhX,Zm@iCC+]4QAlqLd4.S#\l(h:Gg7"/Ip):?'o0*(:(+X%d,=0X$GkFfB_;];3W;L
%JqqEY"dEF%e>lh==%XaqS7k_f.>#h:`V8'+*e%4`Eq\[3H:/5g5lq!,ZU8L/U5F$<;`HfAOk9!R;/ueDO6\mmmoA%3e^tdeEfb@;
%JAnP?j=%VEI2m\NSJ5AjAMVQ3eXuKYCZ`UfQ^;A*atdOI?8^(SC1qW+]B3lurQ>@m(S31j`>:MW-@!VrfO[9W:S/k(f2s[u.+4`d
%kK7M;lp@?[jZ)FCn?0JqdnI75SbWdfeLjEDS)<a:o^hG0INCP)d\9a_j,=?!.@O:2Rgc'agZn]P`5PKM?E4NK1k&7lOo*L(D0Lo_
%$gZ,c(Fcn'0(cUKj:p^+hnSf<?c%[8e/8*?e>D!@2e!<.:bj-U7Pa5Z652r8o';NZe&d"gPXt`"?!(N)EcO+)Os*?bE=6O,l=$L`
%+NCp$;c"AZ!lIWd&W/dW-s,(q8Xf@pd+hI^_7iS^M)%+BLH7n<>(.D'W4PQuUQIh)lZOY0N_j@i,N,8B(T>u&h)&s6`tnZgCTXM:
%qSf@<abH'lNeOa>E6j=GqYH1d^<<L@.A]GGkm#,^l'Do@d!:Y"%f=l(61<0^S%CiXK(e,mRg28.R5kk5h`l;qh4As\Y8=kMgtcU*
%qqd+Ha4jg<6D#&c8o$U5"Nj5hj:i"P<;PB;O0)iT\#RdrgjUlVR-`L1$&[;QFRVVpoX"9^lK<'3@r'lHGer.\h0m;Ln,9=ti0X%M
%r'iE=Y[7lLg>XNs4i%Fh=4/FZ,<]h;_[Ve_W1,!n"mWS+5:uQ_$Z>t848G#mD2EZL/@Tn[;Y=WTTqJLX\/!*hJgcn/n#Uk_(e^t@
%;^jS$o'PH'?<W0+1mln.lcM52Y*i+BiK[Fao\iW&FD#YV&.Wg3?0B7OWfmdcim&)b5oh69EEC$oR&GU_>Y.tY@;2\nU"U3Vm%sk>
%MB`]-:@0U?mX&`f-B?/!f0e3#JEdufNBU4%&EI=Gn(^sYm^4dma(<+R*2R\dDu$:OoL4m(nZ\El55i4Up\br-,QTPt;!u."Ip,H3
%OJ[])82HW2[Zl-3BSK7u@$\2R<!K!F'?g&i3Voa]`9bSSl*BS:Mo7_BS`IAB,CWDaV9r?[[fB-MP:e\=qr(q@*\dG&`SW4uMe]AB
%*V,fu#l+K4_,:9Xiq.<LBjiC9GdRVWG5f-EA[8V50(DLN1AqJ+$ao;YcVfL5g-3s*7Xscq0+,Sj>qi*e4\XHklAA:)$[l[[:n?'h
%6H2!#&#_e)p';D5EG<Gu<,RHfT-NHr(u!:Fkj@Cl"tJ4F)5HdE"Y+f,V]YI0?#T=bqR,d@DL^I5[e[3UhGK1TA]U":^lj_+!h15.
%0!g'5<gg.@E,<=9:7qa7'J5Dg(J*O"mBAq+XTVP1PF/S+g)TW=%Jr&m5H.3;c&m`hW=5Hf;E_^8S&&()A*CN1djT8$=!Y<&\"kBJ
%28)QlFj+;8[_1FmU%89=c.ZSOV/fopo0Qs#lM-8g.F+!'2H:;f*H2@+Hqu?9A$eh/8oPgd1K`!o]u^X,[U,cIQ@j[BdNX=/I'IIG
%6]PeQ1QmQ["ec1Cl]Mgp>;QP:LMYRR2_CKT?"?GGY*dG7c)=Q7Qfn(&hh1SNYJWR3MK4Q`ZEclOX%7P_NI4@qCO+Eb(Z57VkI>GT
%`pK20Ml^+S),Lb>BXDK8Ae^M$61'@GA0$A'`dIbpLLkn<&SC=-&'%Xqjg@^2:e5_F)H!PGWuB1q+r*X=2/V"VI1#@Z1K#<84thSF
%9O8a=3_Pj0(=,pc*>rC.jZ:L/9n&jrT<ZSCd>>FHp,Z'`\E?EB#BSM1W4u.Ce6088k62Sfc(>$OAr4(LTn)??GdS<go)goh:oU$N
%`8SArFE[T"b9_"JcDo/FY?8>/6'=EXJ]b@,0`%Y0qH_Bu@5+Hsh"0X>-5_6@BBJCMB=*YgO=2fl&.pq[RHl1>i::;B=n1X.c@5db
%eKO/%:G]2%lh^0jkQurD6!:Ep`Ke?=5oef430:1u%'ia7E7:\OC$+mg>u#2%E^?6h@b+9r)76Dfr8,b679L'6/$dHLGk($jXOh)c
%Sn?5Kea),HNcsr%.2b.YlECTDFL+n:c@W'^U(XJffYY]@T;q$;.<6WJ\<\r5^'a+8c563-F/j>6IQ</e<f'*u\V?nXVFTFpG#L1[
%,b"F\9NRA->A0'?W$N9eGl"J.ahF.`>%2OC&?(%1JkG*t.*4iAY=+6_;DD*("OGb#&'0mDY)EO;HuCp,U:;S-GUWe$mdnKsN'lUj
%kod/M1/XUZ[S/2[_1o.MgnQfPJ0\(,gtna7O-RF/\pi(EE_@@_Y%hr0#)7NJLL_G4288<c0RC'BYm'lAK;KgZ)E2cVKlpW3Khger
%!G^Kf)n?VgVcg?aKcN$SfsTk[4]K2j?Jt,l6=+TA+sB,!;@cBm[+VO*JpL`f#>pu7La3Vc_c0;7Q"nGTf]\),>Q.9c\U>JA!h2hr
%_eW.KS>u%@<pt=j"`im=QCo),)3A.07B(,bQ10\IRjC+gOSZRSV2#F^8[I`_5fs[.a?:YYq?eE>7_a`uY\fV*#3n_35DKUTaI6sl
%DUb$BgnO?a?MfQT&tsBba(1^d5S!Bj%Ild>]Z*'N>p\B]Q]A5&QJc<eVqPuGNP.Eue$s/LS[p9T@a>Y6(O\S8p9aa/E<>*<Z!@$W
%Kl!oZ:=BUmnBp0BB'@aLP?V$_VuakO;Pe;7'imu6`sJT`Bg`Ekq%IC:c-WegSTZC+2,da>af1DrbP1A)[RG&iLR5a;B3a-(Gho:H
%a2meuS[uZ$KHmHq+%A:dp<T5p^X?Xa]4j*=<<.P=.pW;[N$GW.3ki\8r2rM'YZXpkbL*%PJkR\%[pk=>n!"nURbE':^8VcN-c%;`
%R18#)jLTATdOLU8BpS\2O[R9j@oa4#+jOpe\#WK$qQ8qrGWhCf3L+Q?NdGI/][/W&7SreokgNs!Rf)sAI7-JV8q!V6F)%D$hAMl>
%2&Ss*TZ0T4"YI./Ha61]eWEk.JC%YDm&2GrACJ8-61"/PVVm7Tog7\.CQAZpgM7d^E6:5aQr-s$-A`%\bNXjZNgE)*=j5>YCl?2#
%KqSX`fX>/^i_Ko9IbTnZH7QZg,>g<GVn$Oi$9W4TC;CNqp(;R9o;P)"8"g\HPrQhT(+aLP%kmqK-Wd,$E?mbEE9!Fpb&^VrMfZ/?
%0OGTSG?H]\&\goi&KeYr-g<#@%-s!Peq.K#GZ]>'YIcIcma(HlhpTb7''l74!M2(Wl7Bg=@86/6:f>8P!As=U+gE=o'qea3g+,(7
%]R9r4bKicr#qHs,=bqA>%e%Wm7S9#tR3m2/[ekmAp`],>aSm<Cj04Om-*]u24t*V?c9d?(VQ+c<hX.%`g$X:]r/Rk^.knB4XC\,[
%B,hMAJjDK>&T`>.9ZP9nmFdVccEY-B][1Dk%?;:-9Qd``Wi4ZWDIN`mPX%_<8?/p(]hrKL0Z-N?hLot=p@=BC8Hqf,@jM3]43[M*
%C`O'@O$mi91-O_EZr9lX4uKQ1UE_$<,T`mt?*8*Pkj2*V)5I8<NrB]:)8>'<)+*u#<P]?&m4onoTTh#eVmuuq_/nT_g[UQq[dWRA
%4I=FVoinODj0(oB#!Is^H_*[dP][I1+)e#kb,3dD_YtiK9Nj.X3hpg1hT8qQa\(,TDL:>io%lU>GS&YF^[g6+hT-eP:s'"k<E:)Y
%9U!r:d*[iQSSj396(mI@M9J&iF`"M7=Ui>f`odm.>A1Ss(;^X"/^4UsI7PGofTW/s<u\>ti5H]p/]juU,EoPT94n^h%!).jeQ^NF
%)Tn4YCWf(O[+'N(.PA9X8rEfGo6:,O>5eoPQ>rTUQ*'VJAR'[Af7n1I92nATGmrjd#pO`K&HDITLChY!X#[K'3M<B'"Vas@=/,GO
%%41i^7+1[PVc1>(SLs)>CoS2]pg!51:F?%5hiDRtGRgijh.PE_?"2T&4qYUUXh(1<WB'a<li7;-P0+0nW_T3TA]f?Y9U2t;W&XJR
%Abd\B]8gQm/5?`;a:ffGgLPK"r?_*_49+;:jN"TU[#M68;53P0iUEKWF^MY_*H[QR-8^G9's0R"[9DF6ETtQ2E7^YA^&Ar5_IniY
%&s^%8(TMj%R%V&]!prmjY&PU>GTk1S9!TT\1fuoha0AA#MI7SI9=;\Lm:'c379MX#=aSps:7dIuOL"KPK$;qB(;TFFRS5r@+)r>R
%W/F23O+-l/6$36^F;U+\r@PQB>1p+G%oJ34<E@aK.>5QXC\/dK>]!B%o8SI,aRa/fM9,VCf=IXchjS^DR$,eT:8JDuM(+o.P#?VS
%l;,"SgQ)=[T=i.*qIsgjN6QFc?[!o[WZ+3*0EB,:EG+QK]p+S[DGMVOH1/U5B0nE&i:)0Z]"Ctllou2T:6&P"DpcL&l0`AqjIqp&
%;2h,G0agfQ4gO`qfe3G'F,i#CR@X5SOeFONm7c%'keaUVY?YU4?+HRa6.DV9/M8AbhFG/t;LW;[B8uc0IXB4OrUi6-#A^Y['!c\T
%*R!n3d"WPH[?re/L%`TRZsZ4cTe4cZ@jm<pX'r6_-<#e5jdCAs3$XV#.1rXGppst(%iDp#09pjEl8P0`Z_+qo-_3^(11&5?;YkB]
%Xt$58WI+"$Qo)XSBp<W@1oFSA-Zg8c97,j43:6uek!#I0C,_V:m#Qr#hSjB,7-,f.V#6=OGG``_Gi/INNdCDZIr/K^ogaRj#&k3g
%qJ"p<m0ZOa)++.cCcu\C.k%,J4<WO,4#&aBP/_FH2/?C7KT>CZEE$MHeVYpP)T`?1OZJ+E=3R;.+FWYa;T">V0PUg(m8s^+Yo!_H
%E9$?H/;EWARK=0*-_L!(Q?Z5qcQ4m\"rQEKkD@WVU'agWfjs"/P%k:U4kXQ,gECDp(mmodCA;1P]8NmrAXbQCMMF+gUs?cZ?rVR%
%?E3ZPg095$Z'UcBmQclY,VNS?[nl98R/>HRU*?NL,XE^Z.;2s#IkkP9h:+U_on)6u>Bh$T!jZt;<'')u?2g?/7SFJP#s>CSY$N->
%T[[AO(r6WL9Ud9JhghDM*QPaZAB;qA0IH#Q,8*:f]=1:I6#S4^PIUA,O#put3sBgD&8YbN<YqEMD^p$^CMEYh#N`@!U(/K(p!!9b
%*^s4pcD[W8(2@R76YSQh*;^!k`:IM#oiRFFWlK]L?YIf-6D:/al=mP*;\.aXp6/ADc&F[ig()fI/t):GK/bNP2EoJ?Z9M::.fj\s
%Wq?XSh;JLKIaq+rSmXT+8dVb:dgm%SG-)f_7X`?latn,l$jO[J_Epc]:?f,W.Og%kn.;Br2q/;)o<DW7D/s'G&\Rh*,pr>bYQ;k7
%:tPollE(::52!cnaMuWJ%3N;`MDs^9"VO^`NiQT3><Q]MDr5J0AB\-peoGX2D7U_%gSbm%dsDc!@=&f$_G-&&Z%W1D&ni:ho'*Ng
%eP4&Pm\/T_<\_+4!dJ?YOBG>B4bH2n]1T;.EP-;Y22P98OE6#mc`(mK]l+@?62;]]eE01)$>%38kbZ1*+H20pI@HsRQnSEo*^OR#
%esu^N-gBKqe?^M#p.(u$1PTqH&-N_=?1\:-&P%fl*TnjH,6)$SA&he,,1%Ha.F$eAf0\_FW2ckBYs&,Z?geKQgSSJb,Kr=F#oZte
%*,HH8;hrNefCd0fF`OKZI^Z&^('tPA6YJcEm#j3@Tn3Zf2SGhGCZBfCUEtE9<"+b1Df+n7e0K,DXY?l64a9@9Rc^:I^Ngp;hc?bF
%[M+F]Ns8<a^-RiJi=%iT*S7(M,WUP;^F3^O_-U>,X`LA94AgpUiAo7#\]RAi$0V@me'9N_V+$1/[ujkRqL=s-(S?)=nhO`<C(EqH
%9"MVnc+/nPesTn[O<CXJ\qaD1EJ?AQdSd>XGl%]=IB0IlCPGJt`7^NtJ?W*l`WC,:3ff9q;bSM7%F*clp/H(K`s/r>+$H!@>E/SE
%M1`Zc8)ndN0/GTb;fDQG?^=cf@!U4D\[Y(/WqIs2WWJ5Wl?1D]+75mB3Qn!37Fatm;4"=*?7n"X(`m15J@htR)ini;ooT0G)ou(o
%ZMYKkSrFdJZqL$KBtm(p^EObbqgOIVD`mKt=hD,iUPrJQko)D$Xg^G6a#<_a]V]P8S$kD=pH>%]p\jU6?/L)r*1)(D,'LoC'S#O0
%O:]tuLZK]PLh4XF7N>2nCaGn>*gT)*dsd7(A@o8OK#hL,=_Rt>*iBt5CYgU29ZK#e]fAqZ3TdoY`K\S>:Z@TABmXD_X#k`GjNn&\
%Ac#,]Y^5R'SfR^4;gBsAV4CN5rDT1l;kH/Fqp%%$pBVs%XBoR\2S.U+\Q.gp[5g-DHBZ,0pq>iq_9ogegQe'_MZ6qC=eKtG4R9:k
%5:H)G*thjP2=FBS10>JqNs-Q;3l`K,L`sAm:UHcj1gIUhnP^:q9OS^'IIFTcHT$kQ7S46+;k';!?*T;#A9]d4$*N]4D)Z*B,G(pH
%7b6mJBulf;7[GXS<)+,8Z?aC6*m5S3Hk:u4SXVpDb)"A9iNTkrb+l.gDk!*I;&_]NSXgh57[WrH2=9gt6(;TGHC.$('eamn%!1/j
%ZTmoNf*m3`:Vc::MX@bu>e,fK_F[ZRdY^UbmR+g,1>d(0Tdjpl\0E3C`Q[<INMiT6W6WNDAsjW'AP.j*@i+;NcCo1]C@9Vtq_,V1
%c^;lM[FnNffh/&e?<)Kn]TiS&%^-HI^T4r[P(=AMgJ208s!(]V6N_!X]6AW?Um*&FUmu(u^lhC^4BLo3kI]n<UF?T$mOu61pHMmJ
%5#6uX9"-UflR7m@FBG^(!\"2V0b37M7pR9Q"I*LL$[$5Ik,RI%03k5_"d1:-b.ep3!l?Ku)^&-d6&J8Hd'/5P[P3tCAPtGoSjb#(
%_gqh&1!LWYeWK`Hiil$??'SD9U;Bk[FTXP-oHp)2hRW_[I)Y_Yp+G&kN[)$V&K1,-5e!V:etPCrqLR7'M7H68U'TdhTQQTI$Pha0
%/jXag.UuP!k@A"rY2[21a^-HcHtROtY@\J%(m)<p8RX-2;-d'nWSTh[fAFn[\%E2G;/h>L+(!Kqb9qYW]KjDF']J[2p7tlo<?=FI
%dt`O`V@jloMQV6,GS1G\KEnmJr:g*F>5Z@,T-.DbPE.<gfVC`K(K,XS0Omt;Cq*XdZO0oCW$"*g"Q=K'M4M;5Jr[(Rl3KnglM[#@
%m)EWSaCkX`*d&UqCJ*X<ct?5@eKoo$n'pV:VrJu#1S.;-TaT_@&eCa`cipRW[7\Z[*&S$k!MH:TXBqX,7C>,l[CB/"hf&H24r<E=
%\sW[em6<'mOi9_f4/2c%<_jY,24aNm,sq/Xfk1DDIL.YEKIQ5A!Rrh_!i<;tZs!6H1OVY-3QKokqq*BoYF@^2og+T-q/_XT.S8\`
%=eNRqL54[:U)K,<&3T8;Ym\]$Ym\+`AnGs?>=iA1>IL<CbR"sjT5afS&CYR9W1l1Qn^tQ9q>5sf$/BM9^r%0NZrC:2/'O)lNpY("
%Ik.=U;k@"%)(D$>^aI:</$p%1.b1#P:.\W(5c(14UpIl/?,JmMcR26%^\sHCUCX8LWg^4ih"T3pLW0Na2R0f;@]H(V<to-+)+CYa
%Y?d'7R6DA7D;=2`BKjQq`FF-6&ilUTs'd.p>+tts3YN7K&a\`a;E)fee'.nnW,6Z1$4.c''`4!5U<<1;=jMM@OIi4.38<aZUODI`
%;HLMi6G1ebLe.sf<+ID/9&AH*,!;r9"I8.lNjlNN)?8f54@K4"K"`%7jK#+d*2o-Bp&g^lqnD$]FO8b]ZP)/_YP)*r9+)YchA`<A
%]GW#\WSjZ;F]5P#"*5acFlGXJ[AS[Wbsmf=0:Ju(9YZ7-TG)3"AOr.W;%E]&:::2,&ePRb+SqNF+k&#'nHh\XbQr]'1B$lBGHKpI
%UnihS_qqgu7o'qH-Ks#hP,;71Kf.K[cih\KlL!c=14=#hHUo,8.R[I)mSXSC\r0Z9IE<A"\Bmko_A.?S8:XG&QR4$;WQMO2&&Pt`
%]Bi\_6/C^XhL&aNRnK"2G-#YASA]ftni/;H[#*]kngr\1c>t$sOGY]ug/[<Z>V,8E=5WfV163E>p.7$)=d0sgd:hu1*s+P'Tru3a
%8fi2Lfr?UU=sAL*&B"-SW+UTdK#hO3'P?pBab4":Cb5ctim\*dRjS]q)-B*VS<1I/Jp]13q\4-RP=p*@]BYTroNt[Z\GE'C+W-<%
%&@9:+Z*hR7Kgb(NQ3-Al1.4#fOie?$>bV"4akp+[+s(X-B92hgWgHOm9AWKSLG/M!d5!O>2@=!K5TiI`W/YtP,AF58Qr_/;ASIe$
%F:f7;3S;W/9$%cDW"Z*;6F.dTE<;;n>M!H38JRZ0JkhU&^*A5GOW8Z,cHn9W$B_<!NVAK*hZg#b:CU#EJ\.[)<f<PXY7#LsMCEqS
%h4f:55(\KX8Ta;GYcK;F?G&3^dMLEH3A)3ngEWQY^-UC:J=:]Cq_irP3T&QH)%1*K_V)P^VlK9qma"?+KgZ:./pl"5Q\\!9.E+ZR
%pfm,O;HorFLT\N,K!=="35Z&(_\"rRS7oQ\Q0!hm4/3rL7<LF<6tE-r*nOuSAst3dbS7Ghq))[5g:9Wq%UWkKCS3<IDm"+AB0gOf
%*^r1YWEFB*OIu3:_8CTh/P^@SJa$%(1t@dJrT;o?c)3o\NK!SX+\7ruhF=o#:Q*kEZjrF*%q1E+6ZPu:Q:')r@uP-]\s_4Q-1&d5
%ZrWCO;6oldfO'@J$d)IZ%pH++.7uXWPS(oT;Ze'*9/bjAUns1E8GJ06ga\XK:pQ<[V9i>nKC_S,k'=mJ61`doe9jcceeUn-#b^h7
%Fh)'a48P/\HIAfXc^@`Ikr`"3[;Bt+KVh.fM?S6G#3eb?T3J2r-k_bD"&OtW<W14M-V)I*hN5LX/A),1@ngt/E@H7fbQ*JVFp`e3
%R?K>)lu\njO6bAA.Xm/O^dt'+5\,(rMP\Dj_XbfM4\(GP^l"tL)RpTQ/<<g%V^e<icT5Y@3AMcK!,F/]MV:+-`B:oX9;mE;&LZ79
%,$Tg$.FJD@jiT!0/Dh=CQs:?TNQP!TRgqYbLG(LC[aL?A):lY>drN!j)EBUA=k9+MV@*-SNd_fTY8N"MCbs;-FuDr/nbbBY[%88X
%0gn&\4ld+N"Qs?$_l0r?\`Ckk'TEn2btJ4`-p/I@`+e)dG>jpkmg<C^m'8`G=V&-Zi/>GlImd]F`E3)u`M^D(5Nh@I&kS$3:Lo3r
%dC%bR-qqe"d9U]\%Po2ak0)Yb0djG8+mGfp-R`IKi\rMQm?Q17A"9I@C=BYm0_r*)&+']o;Y:>gnaV#2'3GZbnVn*R\BYh@W0-g5
%/ea7sp9PhhK<7aH-rP@OQNKOa7*TReQJ56LCu4M`\?CdCE(rbm;=-BC.$pK6:)=UtC-37M0%V'r4B[AaUpPF@jubTdmqHWZqGN99
%6.DP=YS>bn?D_**Ng>F(`HBUF=m)!LV(I:sYZ"D&Yt_)4eOj@2S1df0DmXdJ$chJ2oK>:"M=D&uNdbL071L+E=*XGs#e)l9haj#=
%6hm>[MCUP/`8eFH8f5.Pg9ho_kG&r7L<R3LDLsco$]R*eA9dfuC3D;>17YFB!"(f16.Vj=\F?/ApOt5LrsKPnJ"n]+&TP/n8u4;a
%76lKLX+]L;a-h0IIS);*XCl<>Hq.fud9QB&=bZ%1;FO?_%@+&\`&,J8R<%Oac!?l?FIH&TEj?,_#-80JAWG,X=Tu7[hs`")!%TO`
%RsrtAUH&cM-&-6/o@H`1p`'<YO9h\[gZ&?4#%eIMLLbFpf`BAFdW(REI$j;DUT@u#^=SYiC*V=!B5dF2#5B/o\"Q-]m*o%*oQPb*
%6gP0Sp@"65;r9FZPieP1NU-Q@jMo'C9%<`K1c$)bZSKF'=I`tBY*aT)rD=Lt'Xgnkgb;<6Z+XiSNEa!b)GFH/r;D*2m!j2*5(6r>
%)><E%ieXTQ7(.jPa&Z0T;C$8`&ra3\mD;uf#kbK8jt)@f:_1/jl&(1/7Z"KFAaDdS-u[`IX5$[8@rL(U1Hbo2p]o-c+klAU3RDUr
%D'7Lr-q@n$S7e,t'tco'7R2f7cX@ARbNGS7)pL6V7<f_Ob4Y*H)q^)rcWf[7Uh6i3XAAq4$Nes>)Xsfe_E/3jF1&&Tk$#`X+&T7V
%h8`R<#r:m#"AMVA<?nOiW->M@h)_Z2^a)6h'ee6q(Ol&?)j[,hoi527@dd'F)(\Z`VmJ<>))4#2HkQ\\B'+g\km.hrWq\Y(1[IKb
%p;5/T=93m<X7rf,$N5^,1JMt]nq;(a,.EbJTq:7_N43$+LDD#PHItbdMWcfFZ<(c=i%1E;!pB@nJ't]\[AI$lF4'lu\Ej(![XD:.
%Rm\teLH"Skemt)7:dKe'XKo/"?%P]RdlAo(D>p&R3kopocu/Zr2uS\Nj]>Y2!sL#Q_/[i1RhVn`-oOu0<WZl?Bep6]X<$2D)<ot7
%iAfT<Q&@pj/B56]$U(WJWe4\5la>kGTU>H?]2u^`Wj\P=>R]@W6BJ^=ZF>jm8KXqcg>+j'(r]&DIf]D;$d4PTlBqJ2\S3;+]7uo-
%l9?^"GbJ9SIgm\IQ1p^`;al.j\HjdOFuM?,*8*215ZB+LbQF%L0tKUu(0<R.*8&*UFugcl.D(!'>27AoRE6>boHOp9e)omek"MI9
%=-gkR+V#jf5WGAHGqDGXY^AKZp-u5@s5;VVEX3[Qg\6!?K7R=?[NcUXpFus2Cq=Sf#nX]iRT5TT%j0,%OiW3jiZ-&&lmlb*LajQH
%[$+Hch)*o_F/?Cd\L3t=a58OcrXc4q?`LYiF7/a,g:\Fc6\foln_TtYhE(X"gWc.??*kt4]]!4M22&)E"U4GWX<)^B"(.Q9\N343
%`.kC92&[E<>:h?OVm5"Rr-MVKG3_apLZQhgN(^Y`B.*lpC0K_M8(/M^IA#T;(%Hok%C$`+nRl[lF3%C9iGoRsNMgQ.j#!d7m-uG5
%de#D&Oa(jP5%Y2aE?BVIn'*VmEZ8G].2@MiMf0TQQ5nS:RW(h)#3QRl&fgUT0C44(Mc!A2)MmTb1saD/%tE-Z4=B2u>1E-P!PaB/
%cIQu?;nSJ&eU2^JW63Y%4$C3Z`#4j*5*P'jDB7#HJPM\FiZjq2J6%jAJD1YDHhMf)s*D,pQ<8Bh)=8%oOrk,K]87)P^^Yq<2FX8i
%cNdb43+?"h"LDT!W/&4@<%s9_UaNf9jJmkDM^6Ab<`Z:7je$9AA/>p/em)k[3u78pcZLNM<EU&?chS\LoXWgRM1jYW-D"1t7:M>.
%?^9q)TcZ,3)1@dG>%ipBL"):a]9Ro-MPQ-Yn![SP;"8(9P&?#bU2j@M_;dbD,@,iFCFhGqcFF(`FOnD7-8%PYo2G<QFk^p!C0i'&
%Zec949rA_N^@1OPS&1XaT#4ck0SCTApc2Q%iFPZ$VMf.158soE6I?ba_*8R9Hp(bZ4sVaCqm[!U5(=7^?Y?'_mcRF3FBU)OKV>r;
%75L<;cUZ3?q5f$>_]9ugE0`!gG?l_(S$JhJX#pmL7NPbU+a?iNLJX)FH^&'X?o/c..4Xp>b*HY77I&35QdCWA.TmN^G:WK:Lgt21
%(TYWd_BW8=93^L/YP_'`)$_VX=N)gr)J1HVi*PSRB`r+Uj4#`:7aCj-]ud83I'4-qm?0E:XL)a'WLdntL!D6?#C&Ml*lbq8(,Q)]
%\8DMun&PMMgYb>fe7a!#M2bD2C@VcIZ43;YFQ'Z&acu"2b%O<+)9YKebTQQkeA^T[r'JI&N5P()]O.a=So0])?/`fdClkAB:1YR=
%g&!nIr'm=G4%B=/8CNdqF"u8S[9:sY@<C2s[UZqLl=%lO)YrmNUH`I2&-]uNqIYto?Q\GKfhCHVMFpne#-=[nAm`Eoo$1m[lkDa5
%amr4NZ<K76\HK[]$hHf6\,r+0W>>EO;SVA2j*\[-fFcZ@T'B;)?+.f092PjTL_JIkG7Or%6h3dikgR$@0jYj<d(a=OrcgirF%5Th
%YPK)Lh\6ZeqPi`"/r`Na*+qOER[aLL!p:%08^&]N//@r$>p27Q\-*0C<oeF1B_]'/fC6Oo)h7gjT9A@t>7Z,pl6ebV2He4\$If,9
%:Jh.)$W\+D)/+QH?%SJD\PX&VRb`s)-lG!=nM,WG=0,->,n4Tb4+`^)Ke&Nfm%R(2i_m4O[lZ9=h5$Pf,fMjk$(f2T0c\c;WQ:b?
%JD$EK:=Q%,BtVag.`-.%\dR,JUi<33dLV?@]Z6//be@5,\?K\HL5O&81G$B_76*RD44H48>P#mkKRTpEnjRUr"IN'-/..;SR<3NH
%D\T-QhAW>bI0`f!h%2dE[uLO9i;QS]g1s^/Gb7k+lqZe,LS+)@ZP1]!mU:gT`ssUqRDqlGejKD(0L1?QjW;_=Lk9^pQFum'9UVHO
%"$XrXU5nYgb7g9R:^U)41(B(d&#.5/a<BU4L_V7F<5gM^A(;A*&Qh0&eWWK$eu;pndVJ7llKa>aQ]gf7[FIseY9hm26"Lk9G;epr
%_++ttbsJSJ>4m\)b="GbfHY;?d_*&\-8fWqKUPDS4*/P!<]&4/olAnI8]c^WeAL?QcADj4Gm6XO,W_h2UUL.EfWQA]<qKL/nKNkQ
%[GC>sVPheT^J$->K'l*L1t7^)rT9Y_:No_[nAosZ;)'>nN<$B%./ul%F(G["?$n%gQu]:)S1UeXo/,6FfeKdl1mRt%)X=Ome1nOs
%;K.a\i'_[e5Z,mt=;NVd9Ir("'&7oER!6qT>ND3M"V4LrR?"W`'g0'^]IOQ@PfA\COVPO).QmAlcRofB1>g_N`0Vr72V1Y(%WP]&
%a$VMWPLgA/LtWST&6Jo,S4DCP1F1GKde1,OMcB,YR3-e9S+ej'V0Y&3r:Ha=NU;]30JQ(@p*iN^iloO,F&5dX2CYX9&j3&_%@l<J
%)qH5OWQRMkqS!PN@r7"SPTCsTVEbdC@6u-oNQ>Xi)fn#?F<qEH&Guh!DI!5<W?)/7?+kD"==X>S="Xh4PjB"6\mCur@-6JQ?9MV;
%]'bF3B!;X3!J:nl+lGPn?HJ<k1oEtVe:8tdcoHFHNVq-:YNb=*nn8XrE!A;`!iD%;W*Psm./mbsET%bBdioFhbSW.s%qoUE__e//
%DVK.6-$68@OF<]dnQ]NXa;s,fTF3_%14K>AUrafRONUg"SrU.X>(sJA\B4@mbrJ<%m4Hc8n7kOW>>FOBXn4r1jLoCcQeR.)[)9-2
%>$96,CYMq:S*S*]YQn2&knc<kcb?Fgf_K!kS`6C^2c*&6HcqAc?Zi4WcnIVnNeB33jd^I^A/t6d(.3eO/lF!5Z>fQn[nbQ>@5q-E
%c&>;qS/#7(%7K:L+Q9X04F44h2;F5'X9MRqD"1EMN's)&-Zh6e=$go^=VT[s>Y8>Rg>gEYP-NYRkj&p^;f-4hLa7CT*BHDfcZL1h
%@d;V'\?>4I-F_="@m+PlLG&C:(@Z5(YS&B=B(Nb[rd:prMr1O\C"%o*7glrlq=#T'R+0uYj/e;C<!6"I\\B9[:p8iJle*k5BQ8YP
%D=7U+d92TT<j-C2.WJZS]M'AP>C8;\le>NJjmIkTBl&RB$m&."G0IY<No3a'nVL7lZ@$`Lepp<1=u8X)bDmrEo?_mB^44c`9$l1T
%nD?ng98skr&pliGTd^@`=p=`ADSLBmb!C0FXmfNrMKrAcfqZUi=^$;hg)S++MCoNA6s)(m]*:qbSuB,]b3JJ#AQ`=:Zo-6A.a:\%
%f54&g;b9kP0<<^N(;J6%GsBOsNQXiT](SduPu=tWoeT\8l`k:JS+,0VP)+Is1@]*`IBT0=m<(U9.]"UD?_Je^![3\#J5rP%%1kiJ
%R_R"=ZfI)>4p''-k`.X#F6&Q98<H0#+0\T:[=M,coq8af1LE38G9q_7em?C^UYVco9]a'PS]WQW%'3R^DW8Ho%pi7nO)\Dt,`,lF
%5]FZ(g#ih9,OX$aG8u!E%n[G5g[gR_ME^l(KC*BJauOWOb993uXSutb"B[YW<g\]=8%*h2QA%e>9SoO6`&W^2^\9Iohq]44FHcif
%(rId^`emn)JF[jOX=`mn830X&&9i%C,UAB-Q%`F;H%SD##=Ut=$-hsE_),@don`!*h)rARUD(CPN<d\?Y'\DgU1Pk!&#h(,=]o&]
%*db/Zk'Du7X#^3>VRZ-"<H,ACZOZim/A<&-g!QnMXJ<Le/?h`)YYrlBL*M49<RNH>JhuG`r^hcU._/+o<9G2Nm\`3G+C$XY03SXo
%Wu=&-l4JFjq9:`P.fY=WBQ60HVW`hPj%c.Be%Ne$^,o0aaN/1/MP1fAW0MY^fbm/Olo^ph;*sKRr:=?HL(j)Y6rb%'.GmRS!,\lp
%d\/&+S"PIn[*)-,'PkT#e!BcL7P)7on"XT81(LXd]V?o^!4'*Q%TDHojWbJgAkJC7qbV^B,#kdgieosc,%XbH78$H]Win\i0$)sA
%=3hXon)?S*nZ++BK`5(!\(Fr,(Vr8cg)b*BP_bhWRZ!O$io$&$O!!_6TDqeh"CINlWbsLt>4P7MN/Z=t8?'Oo9gf$\VXmpQ,]:`X
%F%OE5'mpo5qVk,!Pt>0#11qmE,R[;BrQ4umTI$QUOY.k-V,hHK_)9TFZ^`O.ED@EgPReGhV_Vkpp+i%46Z5>F6>Ht>#1u*:@Yp8j
%C&'7W@O%pW(O!iLCSB6-8gA,[WWo*)UhKsg5\6do&1Bq4B"c:2Woo[c-P<$_2-?$E\r1)VM9(5rFuM`Q5h]X8g=ittPDDQLg;D=6
%?P<eQmF<MB,R-DTS&L)%EmY:@9NI^!?g,p6m\Q_DUuUe+lbD9T>.XjAW^`hPjR@]d8njoAW$&XY"Q_NF.7e>)FXNQ@m2`#;MaY;e
%pJXpI?4HEJTQ>gEDOnD])sRdBZTEN4mPU%:!sR"46fL'`%7^`D7LbTiikgXo!+_K$?-!B\;Vi25?ZW;sCRls[A&n=NRs69%U!sji
%^37)<<0+=k;XH$\3N,-[$WrsZ)&H>d=$S2o(buC0H/G*O*,RnhC?$HaT6Y,E`t%ss<\c[$o+7*/;XcQp,eVn^;[j9`PRu,#Zs\D!
%A9W<gjrJ`jXJ71/@2R_3RK#up9$qKgCRju&?238dMCnVmJ55Di$F!TiZ8bAU`s.e["iK9$XEL&_YtKmu.(P.P4eahJbI#F.]0M]3
%!%'SS=l\is/r?L]P>7lUjFhU_oUS3(ZXSgsS$2F=h6kaBK>+A/^="';BesHR8\1<MXPu0Yr=HAgPgttBQ0dghM%;hXEjh2B5,1io
%bH5&=B>O2fg0X:$29[kBI&a*?!?k-8H&8!VCp"*q]+0STdooLEBTb:c:C$_#n7IhSGK>'"L8pVH]Cc#JIdE/:XrVq>jWW`GZ0Q1(
%YfM**Q7$D"JcS_3ZHOMud4-ZGa1OX/g'*bKTq&Di88P3KEKS?(eMEG*`SAO'^P8!b<'1dZJ+%TL;d1DeV3E#V%RTML"f'Nk@u^re
%@KUopK70N>[o+%U^BQ?-Q&t:n6`hNc!ZM!j(%3e3'q]pi!t"ctS89\\lL+*Js*NP5/A%[2Phhhl*a0Ugp/.s7F74HicIDRNp9j@[
%8bn)TdZ4=Rma!rXm>\>CXl146n5+N)0B^CgApR:7Maq2m5)lF##'I5\_;mq?GcO3^B_kL%B)4OLS7u3dE92:Nna6Y38'r7>fE:+u
%\jifa[TPN1.oUe!@#$4un7g=b+b%9`GoAcUE;4O10bqcnc[G[NS6K@6IN_L$>!b!fL\Dt7Eg$658dtN:`f[p5&sc.qX-T#=TL7in
%=dog%.Z\UiC'`fue.ekJ86]sM%NN6-fo^t!:nWt44^%B!*HC%G8YW:B>?<2C';@SYV_rbDhcR(R6;6WXb65g25m3DjUa#Vj1d`fd
%GNNbIE_'gV,N3_Z)*j:-F67eB<W8GM:iU<Md&NgoFS0=oJT"ML'm9_B"Y#d/\Y)<]h^5m&fo6(9m[PjI+O,Ru'g"PtOt8VTkT,pm
%9\%u3'QoR/,n1Q7*4'7?]8[^h\+`jRD!bUnjJpUDWA"e+K@Z.B3P7S6'`./]Gah)j<m6[919-Y<;QP2<r8Vj6FFf<!-cd)uP]=b`
%6jbBjA0;u]\2?%O2:1rNJqRJ'N%JfQ1g0^,XO*Bn3q+o_hfC@O%jSj^Qoh@EMTb8obuC#GL.)s!0+::4U.l&7]G4/p4.Dm?8IL-%
%5Yuc+IUQ'Z.tNj0$`&EO])n=qYA1l]R$N#^l&&K$khJiupU`\]$:6KhS.)FS1GR+kTXk@lBnW<As8ILq:&+CO(!s?Z@9%VH/d3UY
%IFZ\M/M>ao/7eGlb%H*j3'bZ/RSoG656Ro3mEUBtX8.NT:?Jtt7q3F6<X2?Zf&:l4@*SSuC-op]!)S;:deaAL1SR&K[poQJAm3De
%?K;XbZm3Xq3C@QdfSgfM7-U9V<F^U`X_LWK=o$;FKG)5&0))/hW.^OP;8EjfC=9a['7tJJ$VgDqV=*7>..D0SrVuIbs7"uSrqT?6
%Mr>cXr-*Yb?iK]sTE"\Qs7YDIkJ.#6^\m3^cbK6>^Af;<T5q#mVst7T^q"1Z]DqH"5CRj#f@rOgje)SFO8jE/9oQ[^d$=Y#O+6uS
%5Q7!6rr&Jhje)P?mo%s2DuT>mr8Yg^Ie_mRnniiT&iW[9FE[E%ch[>5hu<;prTs10+*-^lHLpV)dpN+Mfu=!U07Wua5QC8ks7S*q
%r;2!Aj'Vf]Z[Y/gl'Lc2U=tl(o^]p!Y<W'c5QCK6eWaH!#d-DBeUQ6/Mat)Od-ptS5Q1DmrV(g@dWaUII(]9!s3!Y)_[CDRi?-qV
%^]32`s63=Oh43S"L0aeAS%`QdmnWbPIFYqoJ+ol@rP/Ap^\M7:plBq&peUcG++E4k:Z("#+92,&^]3f$J,IWBr:m03pu21(RSgVV
%YI9_a[Z3!oo7UbZV9l%RETBW..r/F4\YV]^kA%7LFopl:';5oQ#s;/'1K^NrDA[CMK+LG9hPU7Jb`*5V&M!%`5XACOVKIMl7+>-*
%#*@QgZ81jFc0:ulg&1Hnr])Gm+1CL]@VgT&:o@8,L%#7po[g)a2E?DcCl3i2mp4;1Z%HYo*OJmGCQ9-oam[e5"ps?&G1MW+ggo8Y
%dhj@lQtrJ9+.eha$IA_U90,PK9AS026m$,ZZhN5c\'.GO?A&F<=5+/5CqrcE5<8rs\s%hA([\QU2<UVkLb+=(`!=+FIkcn]-D%+6
%L:@ia,8PFD_dL&=CVO4oO,!B,D"6EVkeI'Z>![iaI'MT&khl*tfC.+Z'sVVDK[LS#B:TgsCCi$RYHt=lX6iiGUQSQ<kH<>jU9c+,
%i>28Bp7O7Z+#H"%2eg[_F$MT"ksjQWpHN[)8iT@5FQ#4?3M8d?3u!URX%9E_LIE6'@8^+*25_nRXL'Mrdsso.M?jI3Ak?T8I6;XO
%i&3BJ:PgeAgC@=<$:PCq9R@RBQYObN#>Eod0=9C[l]Q]e$Iq+^rqZ/D3'#<\9n#VJ-L:b.gi_GH5]sWXLC4RpR@s;-c7LpB'=sHH
%,nQ5e?-=gk+m0HaBd%:e&e_G<Fqe2igY:+)0n*bW,e#,m'Z\lkjf/K9r.N:?6)M%ZIVI<qgUouP"pQ*Eb3+J"NdrA_#h5d6AX[Bl
%hYKSjfqh0*0(MtoNDauLS9G:F>2F[C4_`K>,m77?5`t^BmhQZ)oHqcl8OaVObV[mI4BT8Nn<u10,(/QSmXm>'!W%O0`ghuTPbCP-
%o!t62XZ0qfhM(.3&RO`>+Ne.+-#7[cLe1(opEmi3d5.^^Jg?8Q\]hiUEKL"GSq"tFeMrV9cFRA>kI3\tZAm=%DTPDD4+S\ST^I%I
%R1r&I"m$M7/#/p0dM"4tU#4:+^_>e(&/Hr&R6Y8@\16[ipV"c8KkS6Z.)[RL/G7<1$I:(i-l_ae:0?,-_BkG:5mL#&]]b&Q&+'cO
%Oo\"3?GiEGLT>Mr;C(EF3Q8\W+bA'ogflp-_Rb>b93K3A&@tK<'u=I4Q[/#MRthK+a6).]i^!7p/+jK04sB/@-p;GB-U%+D3Vj0e
%UO:g0F3F>XCRB^.1@%C5`TNrhK4C*EV(oiH5M!>JX*R,;bmMCn]_0XDBiG9EReu8_4"aitEk.btq<`LE[,One3TdQ'\CN#VjPu&&
%K9t5a,JlI)QL7u>>#DiI!o*=t-u)URVU88nQhS0EnP+jX,nb,7)4j+:e4L_EgPCtlpRX\bM85o9K0PO:"t>"KL5SkkK\$--C[/K*
%H#-C_7=EVT:V,aB1tn`A2Kg(+n0&h)O1WCC9)FPgV#A=WQG,d#<H-UZ*#r;aBX0V]%33FrUrA*&W"or$2'('E$UXH3f&^N;PU5Ir
%Z3gLK2%Rf*EaB%TGh(%+THQ'ZEXhZ0FB)>\VnQU(?FJDtOk3I#AD&g9G-6jY++\akBg2Oqk7.*06.O;%D3/eIooA@K;V6WOE;kM3
%\(K(^;_:V6M:^g*PE%qE:Ei+S#Q"tjG\[*^M\Mj;gc_HkW+@^W<"hUHGucPS$jr7l8n3NW9E#s.#J\.dL?tR9\Btg,U&N0*)%+_n
%EWH/q<A"br(=MbX4T!PKF#okm;uN^Yd!rV'n!BOhMSd6QPGZF?'g83Y"m5U0.^ks#5-he3@Yd-M2WUY`Bc--SQ#[j3]"(kCh;muP
%8P9L?"XIISi!W3A-mreS`H1$$E(GZ<dC&.UqFTZQXndBmeHtVYYid%uR2!sA5BDoO*0@/gNq&][W$FFI;/0)DRY>Sh,["c2p1"\`
%D_=.n1r;d<42K/M$]C>+,XLL>7T+VsfN>4d5L<-NhXI_M6U(+[NKPZa;MsKZGhT*m0cLHuU(s5P;f0o*#>P!L%Y^ALK+]'bHkZsp
%&=lo#).';DXV.1%R+pK<F=8R@_\\$3SdT].\M1mTa/Cc^!_iO1T53<'3m'be#k#[CK:ub*=Odctoh\Pn8'$[Dd'`LL#Lg+_cYmof
%f]&^ORgeOY:d@E8LgK.IU@i5FW-R>-0/r:/eDuf3p:NhD9Hrk*2L[i:69hp.a*k=<FY$!S/fGNnq):_#F1YK&"-ZGRKlNhIW@Z%\
%"\9.R;:7^8e31mOp^j-f.P_c=mX=HRIEeSUhq=K0MV8BU*sid/OuW#*bJUo:)KeYCVgp^qeQ[g'DSiG4=("fgog_c5B]jejrg068
%7D1/I;\fA$0.@l[Gpekn'PN;E*N7&^"`j:J._r-&-Kg&CDm0\/jpeR7l%u$rE+*<kI9%r:,-s:7AJm[tYbb_.<qdV4"J^hb"sK'Z
%o3X[>P<o9'2Wr[[64G,!X0q9odQfT%_@eSEgfIBqYU"YmV!unS#VCBNWE)WcU+OFE,*sksFGTZP9EQX_d6Ka[jNB*O):=(qHd1h'
%eA4AGf;=>sIbHI43\_ZJ!ir7udWTRPs(F70Fr7/g%P.tq6j4sbmeAY\GS']e<^"i5Z_O.TG'%,6nYt;H=u90S^A=sme9TPG5Sb<c
%4/89ok&>H#:iA@]KLX3MUsGe>hp@nECB7`#JYFM`(DgPW<]2rn0Qh.h2-.TWANQSnOWVtfWs,7AW/eZKJr+B3OD_XJW[DZ[c+=EL
%E>/m`kKe"^imPk:X3Lk,5Gde2j67YuVrasEP84D.=-T^X9be5)`+iWgLC'X('.M^,V@+eqmjRDKNnH=qcr$kTVcGF>Q`8mXH=mJQ
%"j2PAZV:r.h!A"B`Ao9Q>ned1QhS3Qr%auK@\2#[,H&.cH(h(KH"TBfR<S1FaODVCTJY:1Ju$qF=XEN7M"E-qp!;Sm#0bbnrE8q%
%#t&;$A#X"<*a*Pp5X4eila:H?(/;>faZ5%.!9N!ue62^<fM[CP5U)1kQrFQ@-9oL'3?GM+;RjC3f4ftl`4UQbfC)4ecVC&hq/E@#
%6#?fS,F%iQ3ff9qmCR(pXdui4%uYmffbG*d!&:#tQ),6>>,VJCKRW6;Mup%p$_e:&$oY6FX6^:uR4a/9-.JS5#UQ,r$-G^o".u)A
%/etU'?++csLLeJ/38I\4Snj3P5^B]=Lt"bqB1@Y0bZ''WWnMu61ef,kgX\7Apfio7O+!++Fcfc_PBH-agMVp_S;.mX.;"aVdRXce
%l^CD*P\ndBB*;%4$m'iD\n\f6"6BdnN9Os;Q?IcX\VGH,;VAs3DDh\WN#9:Spjbi1S'5*c[&PWrR;p<pC`XWjMh@8O5cd^?s4VoP
%.q6q]#>QE+.ics:c?MYLTX]L6(i.0L=q-pdo@M_,'m6-D\s#[T]da@@ZE@US#"cY[ELr*Zrm!Br%5Z3EnP,o!*R/gs'9,$,A(s4k
%dC12#iq_(+Q;8:,Dk\pOr7Q[dr-:-FO%qOR/:oJo":Y,V<OiNDAel=SGR[W?/,G]J)AjP,ZY6:6kafQR>\IhdgYh$JMaPGRmi=:^
%,C'ppO@W^Q+BmW?<d"`._um6O!DnroBLpBqWLQ+`r.&G-PTQX=HY7:G=r%f0!`kh-;%,9*:GXgMS:oqCP3ReO)KYr0+Z6Vq3FL6M
%3'7&hoQQktmJFWci"\"qZX9[3*r6\Q,Cn)V@rEJX%o):J>`-+R'=l$lB#dfmFbmkaeY#r+[QP">[`c>@gdU%Ad6&Y5*%hM:V!7[$
%p:V\@XHJBfTQCOOh"et*aOX8F/\SWD;VAr'#,&BkC>onP`We#.FJm6W+E'D]9m[>i)!bV>kH5C\A#Pga@LC4+#M2DJ+a4-K]_u;p
%(7cAMjiC5drCR%%AdEd,0FL?jf.t7T9X$*,mo8R8$?R8s$^2N;MoJZF*"a)GAM":l3;VV*=)nIGepE[dN%>p+K6p'<k8gs+Cpr/f
%+Am)KQAH5:\CX'uP+`cF\M*/:aQ8*F9ufdH.Y*s^ZmJ+&OG6UQ[sB&2>4cY?Ri0N9@gim,Q,[FADLLpuL#n7"AQ3U]+tRXmA?mNs
%<l<U:eDS>IrGWb@ZHPEWV(08[`-S9r(oEf'MQ/Z(/\u(,Zn96a1>O'DJd\_*>Q-YI1C38o?I*Jf`%T7t?k!g(.dhZ]aj>:WM#?f`
%@]O5QX(nX+o:o/5SmSFDU)&Lq")`0,CY!A1Pjh\m`bouf<]Nn@/Q;fqs)FdTr!\-+dhL.]%<9Z)i?Wbl&o8=?,r?j,h?^soen)52
%B?i</%00AKb5c;2^i\,3Y+p^;5%k;breR=<<_!K[QTfa^79[g2kXaWrju*WZWgV^iTfQ/4->bLFJDLH5[UND-bF[fUO57#I+)2IR
%G_k("qt3Gj@6X<Kn$tT8*dd@R*A)s_6X6rG:m&qEY>"4%D^\H6i=KZF1b,FrR5_AlR"W;)M1%$W<4[#gC,WAU.5(aC6sEKq$Na<3
%GA]DhGb3d`7glL$BVO]'BN96e[%cnQ6QuMMDscKbK??Xr-8>?ipP:n(r0S"Tr4^_m+OOB*%9J-VX(h_^@,=>!.9\:PR4:"+"7@)n
%=f_P?EupcQ^64Yo*oSU]BBi,Kl<QZ,)(AZ*FT,=SSfg4\Ec:_P'qd54!m+SYT['D7m;rJ-mO9ciLgK9pBO(dQ@YaF4?7(WXK8FRI
%&>`:90&/3=>]c>m:`G[6JI(,Jc1*DE.VfNH6ImdPVMUROp/T#f=nWXRlaUePZNZf&54%a.l"Oor[-GtH9"_7Y,0_:qQOKh3kW+fb
%@+Y4FB]Q7g91DiTU5VFHA>fhHILAk"1AbH9!Qq9f)Btbn4TM@gVDE>sb)o>4$gi+\a!23<7hm1G1PPfla]Q]j;r,9D0?_4oHIXRh
%NpeQ1=<N1AUnS@TLPG!:n7)LFDclW/p$.qEl@l+lDPEAR+fr.(lD:A*-dhb,Z$NhrH-65JeV!.;.GEf*lVPK\/1H,j;L5Q3T/ZAr
%^SX<f=#\[e3jbF<1_^`HCO["+8_jMfI5l5I=BVV]Ia/7+,24qTBcp=+EmZRW_hZ!nAZ&@9WZ!'DSJVQ2hgT1.;&&bH):=G%6V_UW
%SX00K=`?0?F5A3A%Qr?WHM]pTWD:pg2up]^WcX[J<jgSMN?HKO_V7Np)c6kR-om&KU<T070Gp,sjm!$T$\IDAG]nW(>N`96FVU-7
%(C@L(P]VS9C@[omF+5'-Y[ntoBuIQ2FZY[R(O1TX;s91,nHldE_@sVi>SfM'oIkf8j1bJa,4F5-&oA2r+T""`=sc[ipET=_W]s#1
%]CbfOBHTmN-KFl2TK4f7-rAQs5eRp`paKK::q#O,TuW\2WJ`\h2s^K8iFEeMoSl6_V.,M:gVQqM.`L^=2Sm+Vn5.<$$&;:^W61kc
%&O+L+5[=PU\nY>OK=<J]pu)t:m-uhl%8N[D_;kj.<d]fn!J"Fa+lW/?#9+:>dAt+A\,m9Vk[SBkC"Co.k#_!\m,'tfL]_Fk8ms$$
%7&qSJLkWrgB[r^-/rEJ?7C%Un;U6LGPji`re=g*JSS`hA_^ZKKKtK]TGXhC!=X=cB%Z33j*eH0`2$GI2jjHB*4d/YoaYrMGhi2&E
%QM9N:Y+fVJS-$"<`#i-<^\;:G?8(kSAs4^&RGT=AJ4AdI(;;4fn6d(-O.XlHJ,`uQI<[X.#Fmo3N:E[,SS^Zn6lbjI;e9Jlp5WP*
%_kZ72F/O13=^ts_ZFL'OC`P;"0\DjrQ]mGU?BPK\+c'.P-!I]RQt>F6jNed!PnAH3lOi3/k4[s*707c7ps+FWh3NtI;`>D(aD\I.
%E/2Ai]_@rt`]JZp!9;i%*tU$n6L2>bAa5)lGppZ:Xfn`L7MMa":kA'o/0mE.ar99cpkURQ,1c5_@!d@W.cNKp^AaQN@ZD;g$0bGi
%`,]epco6?A,3&7;,3$r4Y2?78?`YIN%/u9j=#fQqY$`tDS@5Nn"n^o&hP**ufcR:1FXY^l@bt(RAPn[79',GRTnl(9KeiS'JhZ4Z
%`JqSGs3kBo3_/c=W[O>`#<PFslN-=(d]!e!B1s+s:IQ#82fr&Cn;GuD;Nu!hQ5[55Q`;2f#f!_&7Il8(Jup)fZ'8E+_O`.$Ad(OA
%'00g'1Ps0p*b6jHo6befd6<u?b->uW^\BB`6k3n_Z>>&$a;6q<#kR/0`E?iS)ois'GpO^g90eWE&TskkfEmOhUYLJDX9*>L`BZ@3
%\U`e9.<a;?J?\p:D,LNC^TCFpmm6O&Z;o92#rVJZDf8Nl%"`[V]i"1Q3$s!c6S$!bAP2E9`]`C,OY(O'n^\d'6%@\G'6Xbrd!ia"
%/HE3M%kkA@UUIu(p?F<?"^]eO?Yp0i_#%OeY=DfIo-%[YYH\6D(%^TfprsZNf3f#7>r[l;bn;`AVo$S*W]WE[P4a2b*XqR+D4W,I
%$SUT?=EoDkVnrhS%Y_@s>fX_9S(sVDYEusf(90"OrWifeF2!.D4`l0-]V5'I_]*nB%;ucfNeU>6n/'gg%TLEe%o)u:e_T/mPMpF-
%_r!A)]?R#AA'/SF>d.Ib#>uu0"_N<Fc[P3b4.nh,*:oCX4F#F@L'$%**`lR1OfM&qDJM-*Apq!2;lY'Q_+rcQ<V\s)X=gR@_rX@W
%'5-bT,"clihsHc`aSYkdhI--OqU+`H8p[I:0_Z7KTm.=NhM(CLrpY``pYDE\gN&moi%K@6BI(h%[N#-%mKTIB[3+,F+*Rf8hU1H^
%CYTA*f:9VC#%)@,36qdBo:N,YWT[Y5LYdsoX721?7iVl=?(`Z+H;JHnc<2>L`M,g@%JQ7b9Q$dQD!_MES<Umph[k&Mc?Hcg$0,qG
%j#nlcf"6]Z;6E!0'Q:=Op\->T_:T!E=?\tcnpG*ohiE#8oIdBZCc(#G_]p'AG^IGJL$*=JbFJuJbBbHnr+F6q?hlnT;u;B"VL8Gq
%*pOVLZO\1K0Rf+Wp:#J.?hZbR'rQXO4Cn?G7kmF=]%"hO]GpfW*W'+4rO!:-D5q26^_:"T8*Dr'V5Y@]<W@#iIX"7(/X0H8oaoPh
%b-]$6]Zl2f5J6e]=hl0p1X"NBJX.gup-\8AGanHA2phNc+.f5'`4LfkL3TC4J%<GtA/mhXp&*S'i7GUjPjEdl<s9),_4Rp++t%g8
%ph?/;J(kZd9q+IK$RbmcLBG,q2X`do87\/Km_K&`aLQbk`V&Eq\r_7DcitTi58SRTJ$'#]m[r7'4SXE/[si8r_*$B<;-E!0h`p0C
%](Z21k^s-(L0bpolQJ2'd'GY.-$.$De^=E.D#_84Ac=V1cu7,*2t?ut9s2j*Po[J2AXWO^@uHoIcE,"g0.M(WZcYk((F__6FPqOs
%@#EeYfG?#PLY;B0@\_"2YP.,H+ejZe$ISN))g_PRjr=8,FNo)lZ<WHnCp<l"HRR_tG*tViRt#ZNitLl&E][VjCWBe":OlWQI>7"d
%gRdp#fb;ZYPE-e"Oa>dr,QZ>"(F;i'1A)a30D]NapflMf^,TaR6%pSAObX(f"I7ekVW7seO/:WYQU*[Z^0#RcUc74t5C-a^l(^3(
%ar\6FrK]Tm]uEG9kk3*ml(^fa5PHQ6Fir^.\^F":TNh9V%D5=U]`TL-o_*rBqWP9:q^%:.q7"_d\)%I@f(@AAD$>F>l(c"1"i#^0
%W*5bb+Tr3po=,<PIW-?@250@g":PZ:aq#ZR)g!/'^7k9Ei-R:I^t1qk+lM['*^[ZoRm4iA+mNh:.))3V//NI5Ja]::&GV":#D$gW
%'a25lEf0u`CWBd7$k+rl^UDqE^QGAL;;`NWZMbOBrb\K]`Cg/a$IiXEi:r:r5/jSud9s/Xi8,kYS]]f]`>!KI,[5k(`-J/_Ws:<^
%g7[f`YE]l"TfQ"GXa+a(FIm%iaFcg9<0@5]'_Pof+7O4@/ng)d?n>/*X0+/ThITr%R?8A_9^s27Yr-_kVa8$*/]%U0CFb;'EnhLO
%Dm^Br+q\nkhVA&)'Oc<ef@u9"(Nop"b(BYs7FR*QekN4qLY\EfGJj1GUlD9CF.PYkh=G\AImKZiQAAO<\iK.HNJ[j[j040;6+0au
%cB9=pY!P]p1(f]e<hJaJ_SVFS<E)^JUa2-L5XDuH-BE<Q)$JH9,Ed4_%JSoS=8MEDQMB_Hg'T-N)c$fS.tjD(ng&2VXJ-/Hl7uY2
%`>6;G1J8@]5r6U?6<!guD4?_o"B"h^eOn"FZ5ZQ6W317:A.FqNF;&AA6NSj)F'_'4>n,5G`(-oUon;l14($U+F:&6K5NfeD`\;Jc
%oRaDu`=JhB%R.'X+-Q;Oamp>_QT_X(&H4eQp#IeF+$>GRG=P?=ErMV`5#<UJ%MI2ro5ISJ9MLd!PTEbLnhTB^D3b`qT845]XcmLX
%cZ-?ZhP_2,i5NOe@J0!ObmU*:rG,OqSm0I=fX?0j-\EI+RW"eYahYBLmnl\cla5j7b*0AkDL!uRqN*(G6a&V?lQJ3Jr:MrYGr"!@
%5NKqJkh,@-e_$D_E8:"pDU<g'b_87AakWYR-Z_H3Q7):**Il2laapJV^Fg&=hhnc<?V-j5D^ADuC1$eaepX^[7gCruT1Vl]W:aC[
%96s^C@4RX]mO`s8KC/i?(]"\.]qJL-om4\2J9noR6NHe*o7m;q,(9&(X\q*CaNtYe]n>_SW&O?4J9luW!S$EY[uKQR48uO]$gfa5
%CAoPb.6mKsn8im"'gR0fl,%?>eDE0<+7l<k3sED#4M*ua(_ajiO?sn!S-pp3Iq_dh=Qd4AG?Cb/>FQRcg_?^&(F^c1o*esr()tS_
%o!L5A\J0;Z_4l5sht;'.EWaeI5!=,`NE@i1ml-DZYKeC&!JkWiY[nBl5/bV'@Kqu8JtQRM!]W6cXst.&"b!R6eFdV:\%OZ8o="MH
%.QEI1qD?HZgcAR(0WXhgLM@nLNY1pQkl?Q)(apVL['qd[7!32@Rs2Xr7Q\r"a)oQ#(_0;3hFpnN(&aM.18uaL7M19EBUaHi[5J'4
%(d>\Yo"+t/<so6"C*+&ObU$Ko;AfM@U]XFB_bdkuJ>iHl)_GPQN7u(Y&OMtS\qJ32J2WAb$s-q%CXm@\EUl4;TDr[cX!hZ-pE3"D
%-2[mkXV+HfX$l.cV&Qg':mHMpB6W$!2q'"ae-S'n*\2@L6.U6X$YEHdk"E$Q9qB0BdAh5:Y?i+[oFiuK2f>6V938kK3BS^hTDtc1
%.m5"GUA`G]+gnl83`N'FXpNtPelkl'A`hC35n?]dZT&=5c\(@<97k35&^U_:gP#ti$+lki\7&V:JUo<EFi4_H+9g=%3D.0r,f:Lm
%CXRs!NK5#A"q%^)81m=Dm9:WsfBe*r[)-4/[lNg@NjQstE^ME*O79;;*1Tqrj4LecDKs?TE],#R;&E`JKH7?O4=tGVLpR$KcUl/F
%aPis,B<ehs=f]`mH3%(._?#m771iHND5ljL3<tG;SoZI\kIU,:>M1Nlep[m+Kqp^;l+-Yud&fTaq[c-/>34+bM0dr,Plm_C'?`@b
%9CiIbW]H'8P,9@`jEGq6Qpf)pKi;]1WO*Ac/Jsd62R'a-+YU5UokX7.ChEJU>q:1U3nF2oj(N`YG!Dt3$"UrMc1(NEo\)M6Wh-q$
%TPTC[TNhoUN?e`M!%f;u.XbUTgq/C7E>L.u$"eE2EQ];mHh%(C?[R(W;+HjilG?Z@W-"]P>#:K.(Y+/lY'[47?Q8?lb`^+Ze_8\Q
%5(b'TKP%E-Di8*RD"FNCJlR;>.h-H68dqhb5[od4[%*lpHG4Co]fWT`5\%=p45%%RP^9_"f`:>]Y7?[O($auq!q>&pfBuEqk`Z,.
%hgUJLdE\(X6jY^Wh"r/qbbdE-ZntBDWfbd01,?9%Js7#;]<9FK;tKorF5#fu7*C[Q5iuC2"!g^JLIlZ`bp$^Qe^)*OWed3(6QMG,
%$OCDNK5NkPBR&t3&kAu8FiBlo>F)IP=A,*g1u`;3*0suE.5(nSLg+@:QFI3qQs]GAdH;S&]iOG63hQmGTk*cWeojjDf\N"Qr!2'u
%Kl%-)dh]pfc@"_f*j7Y)O<8U)Zm`lhgO`H_7>8m62_O&UTTE;oKN4[+#AWZj\A<AFSkH[!Y0Yt,KL&3NPih7;pdpZ1^6lsJ.>F%'
%THBjfT[K[\DKAR]o-aCP7m-ZP\&H,\5<lF@rJ,;Fc6mX6>-#`')&A^;VJDP*G,).]Vo9C^G`$q[,.KG9knKW;)G`).$6?a5i[[iD
%qnh?E1U?I\jIh_riZ,liNY]s&b+9Z$B^VY$='M%#F,T`4D:bZ$;4lha:SYouB?BcU=Yn9N\`%mT&qol^kaF$K11E%5@md>\MSQ#4
%e.N"4RSitKK,*Um&ZSFCDUOc8"$.V*%R`E9*a>_hWN7AhTo&H1qgH@Hn"EO[ILftq?W0(IY%s&TMg>m(>sVB#5<$q"Xro`+Pl#7$
%&gUP'6Do)eg3eDVMjCs!M*QJoah*.8UPR*$(>Ks_`PS>CmVOlSro)*\qB8JE9>/(Uhdi)Kbk7'EBO(t*GNaMI&!(COinZtF6bLd+
%^SCu(**f]>J+at-T`*EN5@=9s?g.IT\C#dIn#(!1f9I&5?-q#t\V4r6Z%]+6fAZXTF`[QEr-Zofq/;MoErPZ)Un:saPJHD+mHKY(
%F2cT;TqZe]+#\dn$S8UWDB$G%]&+&OoO1+sU">$<4lj$pm$E"M&$GYUfFJNPWU!tW5`NMOL]--8h<tRbqQM'sctbkU*cg!GT!dQ2
%=[k.pJU-pCn@Il[gQ(dXNpte`n@,eMg^@53\YCaqd;Y4[])?GX2qN<[>*>+='-nsKNO;GLm>7@bQ7Y$r7+Jajd24-)NnUFpOb'QK
%VQQ',Y!ZfAAs/.`%Qbik)-f.+!-LVK?7PJ"Br9*#Ue!P6CVo7(?=tM)QlkAH#X*G?BsHopBdkYo[u.Ft6%2X:*J_d!Ih0feO+^@6
%A6+^#pJ(83K!.BGI]`BP&pHs1.URu%`>RcoXOs?XdL/f0FB1Ok^iPb#$&6?Nf"2$*)n;^O9p*M_btC+b0>m;n+.e#7ZfEK=&$PX'
%mGIpP0pG)7lt!>jT<_9B*H&8_R7QELIeO+@4gN+`hgT+RqK.DXFT/u37"Y@tiq3]Hp\=(s+Qs5'[/CGO"\nP/5C.qeBrGt<T<hnu
%V=47Q46Ad+jh!a+q"*BmXr2;plgbm=N>_=Tk/GY`_0kCcmMG.:._fjor#uO2Fj9ON$otJ=G_PP%^ojb-YKGtk'S$$AlCpJ;Vol%F
%`J`<jBAN5^A\S'^7S-K%KN+pRq)WMB/^U8UCVV]M8<f?moXa\%9%`i!jU'YZ9P\pF),H`%C[Sb./godl"ODr4'N1)HZ(fg+ATmH(
%m+FIJGYQ9N8E4+<DJPD,5s\%2X^,;i3j4$05gDXr_:VAWNkY?lU^.\=BMlGp,)eVBrqfM67RoN:m3#.NRJqE,&1c').D1/i_oogm
%;h%G%]4s@.5V@WLDaD3F\J:s2*E6<HFIG=F+/QSC7VZ4)dJY"+?N01jIE\&K2Ot@P3!G29O)*BM#;1m7V-#p20<b>2Tokh1(""PM
%Fl2F]@TrOl.*YAG=e+-Tm8$<0X(M48[aUp@LBNl</D"F-i'80R/Yc:WSLpT\ehEt9/s=%6iC9VR=dJu57#H/`R3[l#a>Uj+3XDo?
%,0m#5d'ESH,YfVAJ5^XBC-+'`.0jt!gj\=Zq-hTQj]0"``G<>qj@:,4Dldh!C8HlmU+#gt[aKa"U$qCHC9@In$K/!n9fW$?gZOj_
%2+Vd,XeL-uF$d0<V`Ur^3o(*5)J3\pGJk39H1qWnRrR[\<&u>E(1qi43tl[mWT5r?8F`i4CualEM_PLI-o4bY?WfO0T?&>E.li-a
%Rf39R]j7fgfl<R.DnuCHD?L4L8FQ!Xc';Sc^]k,eO)88o=+d)B6R&Cc1e=X+rqDW&>-[\3kF?"*F]Ygr!>[raFAukdRJSd``/:so
%T(oBk?8p=\oZO;Niq70?.:??e*="HK0p6fa`')>QOjUQG@<^J3jk@!8N-2g>%;6?60R<)1@Ei5meqL.8F>Ve-[O*BU[McNBN?nr'
%YVhWAe)RV2koE>ifCC8;=N]^M9hXdLH;4<J&r8*AS,)jI/@dq\29qu/h<%jQ/B+WkQ)u^aNlEMJo,&FiLR7@DjfU9Z9m.Gq:FsOE
%84*0nB+*2PIaME';dqmSI2t:q#U+UA;?WIJU[k_XFuG<I0#BM]>W7iY9K#C&P;r!ZQ`fc5"J&Q1`fRTbc00!Q[;0K7SqE0m>r676
%)OG;DS,J_Ja,s@m8su\[`QQbH.:MMMbSof>N*2W>"'/F&06@El`Ai6/A3U*joQo`-i$B,l4ra@MAoUPsd2pO#_H]2\ml/(Kf(l[A
%;</,>kQ]GJ0XmXsRqIepRLkhIfrp0*I/oKTYPhk[93m1_XE(0AY`E;>eMBR;-lsqp8j+sTf4/#g`3-kPEC%=NZt:iOD#]O(MsHE^
%qQ`\C2k/eY07Rc[/`Ff:>l?]k19sE]@!/naj.@c5Zas@!Q-Nj^9@LNs4ZdJS%,q/1Ue2bL0NMN)(KR4gZ-B>/D<jd<c?6P`GgU:G
%f^[eG/_:qm^q%3/JPMHSW*O5k5s9$[c.5LIG/I#'oX#PV%i*7?j7d<IUj'Cd"rbR+%<9/3eQ'f/PdA<AMc!YmNHnQ=S7A]p>8lPd
%nf>Aq[og!R\>9fr\#AHCNo?qkB0LC=`U0KcRh$U1,JS&tjW0.(p-<WHIgEB8j>"etmCLKLHM(XtlA4cqF8QIK<!*,!r%;^X\85aE
%C"q/>c*k'ff4$6ZQF1LX^R"S1a)8<L0G'8a[1LV;%kZ>AC"'[OCQBeq[Um5CHB3L:q35&V[JAP.].`jRH'p__EP!i'],\7Zr(==o
%WU$6DhArs$SB#7,3PB1=(N').qW`Ae[`E-5c0Y6;]=1)U\,#kUYTi?u^h0@af=L[UV0NMJD)jX'F13AFF'cSfPo7&t>iKp8H828'
%f6qkDm]:3h18ACO<Y(S#CBj:_>LWQ']HcTH?eld,Pel_JHmA9gFWf2cp'80XSOZ/B1'@MYaW8H2;;8!@q(u<LUs"'0[]*gAp2%/c
%hgW,0`2@0!*S1>He2E/?HXo1tOeoIW]5][`)ltN)gS7G6)`<DHP0WIh$Z.ehoAd/k;$7!QjEjp8_=<dn&OeN;990*[><UiE.SR]1
%2Nk,s.#'k_k[EtC&b@HUiEqV,\iT\6+.TS$N8L%%NZ9=QgrW#Sn>]NkJ8AjL]Y[]V$^_D1Ye-T<rX`+Ao,1]hB/4jKKVsf'L.<MS
%$?a?sCXT1M'?EAe*arL@+ECNL!@[1&`NS1m;[uZsd6?.pH9$`fTb*X8ZUDYQ#M2DTr/;'prm>oCm/,t4Z>j,*n[c)no6!A,c\SZ%
%3&e3,;PS5S^thCgYLdA\!hOu(4VJ'!Pq-(+@'#:Da-C8>-[<?BQ#]a@*FG1u5S/D>puhXe"!>#dlNltA2<(!\gW`dYng>"K&*"!D
%[DdFdqq-LiM*@jhl#NdhR?oU%<XOgOEcA>m^PrKSik40BU,506$DqWfrF2BUf(Oc'Ktp'DC5U3FcdS+2aT3-;YD3=MrZ`?BnfDh0
%P%GHWH&'.@D7?8IcqJt6>s2?j6B&"@ZK=ro>/FI.N6b`RDY3eYTCP^KST[Xo4Jl;L8u$_\7)$1W-p:+ome)kTLq;l.1;UH`&%oST
%KBm#R^Dig;lHt+L&c48>.")sFhs)\<*6)&e,H'6_<A?c>g06+s9[6m#i!<[@/XeZ\JuVc)0TX+(^ilbp[c^W+8ONX]2#+:r9uF.7
%c>UkK1u=YfGmDoK'Al\)C?.Q"hZ!C.@'[uJLB"Q#YKr_td+<=emf/OFY1M>u>(?KcNbeO0\[u$q58%(-pV=MSJ2+D<9+q]B8i<?r
%/*0-MVI,O6a%H:!l#V)Rs"9bMBd(Zh*4t"`bGiTVgb)fMW>2Jo28'`N.3e4iJL4!0XdCs9-6/4>"H/<9g@n`arF9ZuUO$.=,\_p=
%1DIMNQ^`N<Tf.NmSQFNOFtY5):&jLT+uE<A$?a="5T!A+XfAM5*8SY.T8b3M>=5*.c@&?JJSR.Xo6LH8^KQ.F?bTS8\@]Ik8%aA8
%L`+#,lenO_6"2U'?>Uj'lNX"cE^s\6UBB%qf1)qU!SCgm2sW>HYAp9KeNDnVeqZI^H1VJ:2mY439C-MlqD@de*/a(',$Z.NaegJI
%W8TG8d%okM.M]9.5#%b?bC6#0)u$2o,>e#*e8BptRpnTM.94r>RJQTnIV<:'d==h#9^([.6ocop1SMJ^+TFb.-FP%>#LPFMa6lUV
%nJ*-0)ZY,r1V_gHNOBnBs+_F9i!aF>X<njF/qYC->4,W,m*el`9I5'4YF+s7L,^-p[6ho4?T7\>Xp/6D!J\F#WJ[4T8pCZgi<Zt_
%4bho$'P2"0G>7_p5.['9A_S>8o6k`Dg6sfIl`%inREI,*kOr\*rO_R_f?2W-KAs!$iX)`c\r7]B&J9^Va79TsB)'!!J&f/CJKOft
%cI45%cN-B2AAA&T\b>m;4rj/jSW*_BbTM:;4">oUVP]62#MT37>[;"13%]!uT'@?![krK`C-'%>9@H;\]]b!W5I1n"_N"LSP<]jV
%.1j<WmBb#:U1=&DjK1nprn?L(`.qN/SKmuC8\erh%OF]X_JE@tI*EUe%Q!6A4.uZ.1O#)d[H*3;&*S.jo0.qu8M$aLPI&TL"SD!i
%pN3ii(*5V;@t[b028/R'qhV8@f!1be'^*<?ClR!*OF;D+Fa8[ng7_3Td1-^H"mr11bkfklG:Guodn(0J.r5*@*PFe:n?I09r\$*G
%Ib>,UYU]?93X;23=Y!5?'Ll6r?D0&/8Z:9BB&#NBT$bna@s][-i>Ze6F_2"qSXPS@,e4k\m5dOYHEng[Ko0PE"!+8fQ:`YNBnTMR
%UI;uG[ScKB>H&OacmRrr.?@(BAB(iL90jtB/kpu10csU6U0Y4NQ&E$#oqnKQHd'Zu\q+[G[V-9S`S@&3[?jV^U5coE+beXjBf!G3
%4^JT[IX4n(gD'RmXdg8=nlfkfjPIm=\/`9N$+EKY^'f!b3XfDnVGjqPEg0skCg0JK$qMetR>="n#W.NfM+b#U4s"tihR[R!bB^l-
%3QW-];2]k9CEeFZO-!QIkrMuXJ(@q]oi5#W[ac*d?^GsMiBM5;1Kn?d)![gIAq/?WcPu`(G:)X78PO^beDn?/'E,PfZ<`7!\?r^`
%;9Q:l?#sjI"uo<eisJU9kH=JI.Zj4;R5i3AD6B8T\8V9"4Ho6:&HnEs]?WT&4]V7hG2IB<[$+L/F</?6-:?C6!#+hpWC024@Cl?5
%O@YQSNM=s0iM&>VXI*b+OmI"eKkl%+FaDh,cQo/HS1E]!+*H(Na&^EP6MlK[Us8!Zf@51^?7A,-MH@LbW?qI,qZ,)Rj\W4`a=0<+
%\IJ"R@@"$UH7mG\*LEmEXi-QCPXtB?J?Ydu[o&'%S&4eIb8$O7O#-sC.Y#prmB`VPpUL^g+K1Br2s3fVfml->Q/Y%h\">L8]X+:Q
%c6?9QB?6ne\$n0+.(h`fQ[::MZJs$69+9,%rU,1fG20dQjh3g[P0sZN>mhj1h*"pdeK1itr&'3-fhW\r:V4jqYQe+6jsbW-'ean#
%'<9r>aljkfgLJVFYi3K6,#\aeZSOD7#,kujLdo_-7<fgoj8R2m<LO+0Bq=3hO"s$&:Me.Yc0cldr-G_iV`31561rlR*11eAopAX^
%m;h/ugg!VL62p_:B1?nERt>&mA'&`^DIHEp_tiPg<qq8n\LXflA<$AOejm*dfKO&gpcTj;PnZaE%@N/kcF_3=SK9C[<30ci65f\a
%XAp^C(3\V+=]01QO$3$-e%YaW_P$O+^A]7hEE8&2d=<q*Q?PR%'SF0(I=1=-]R3b4*K;\cI'530`=qS,Vue\m6jrUG_4_F`dh*(]
%nFWs1]83a"S58'Y`J$HjT??J+8/_WqkClIJQW'PZ;Rkq#q]"uT*]Dg_k%9R!+\64okLH>@`G`,!R*X*2DsR4!]00rg5D*Uq!fEi3
%J/eI)0orU^bdQ%AD*Ie[gM=t!fZkDT:7Ua5M>:,s,bZfuOAP<'Z-H*LpLq!%<_8u@g6]!gGKct/<@[:oj$$Q<I^]1=@j]eJd"1n<
%:D:tBqAg8^%#kFX=LQ_#'^)>7==Pp/)ODXBZZ<fZ9Jea53Wn@EoiYTYhXbpiZV8G?*#fRR1;#_m,880dk#^;?mS*PU[HjUuEQX^c
%2p<P/eK2tlZ(f[M#TB^!m-6GNRahnkds2dV_%V[<c3,%1gJFn7I7sia\RVWu,%KMa.ikl["r7FPRhKdAKeisHKt-u%kk)J#A[O!:
%RB75PnCMONh4OSOrJRR'+[YiHJVP*J1-CN/gQU0bk&;eXnhlJ&9@gA=crE%ER!j"<n%FAI50k:2*2s0Urgrij!"QU\7)a5eSiaVh
%F5"bt2=]hNBD([-pn0FGSb/9Q%Fo/9c#oV&@RS4/C=naaIOUuq$M/'o-F?&(5'5VE][_$T/+^K%jDgg"7pJ%u,XHOgB:jY$=%!kI
%lM#%6mAe]r,e#,TNB=T4MO/bb.C9"pU3'^S<.WFk5isqsQmhGZ:Y0q#Tt-U!1D8X-'9c1CboaCE,0W_)"BpHCYH]H83<T:f<[)5s
%/LR#Y.$_'#hkT8VT&^^lYD<g&V1G^[;clr$[YbV\nNV$TO]'nY`O$tLCB234U2;87:5kGS.)7gWO*Eo*9A$YV&=T_>51VE[OpUuD
%&fI>-h^Co?I@(NWJkriY9&FJMI`2a;\2-,#;EUFIKRtDc38_A/$C)@*()6g'7Q6+]BJ@<!b<e9!-)HlqaN0$J^]Rd9c4W%]]$@D+
%5'S;.maU,)OfQU(+O4F)bPTOS55"e+^:0e/,fc8<Ag'G0+j=d0Ir`cA-#rnk0;X:KqF@OmG&m5*rXhcNW>fpLmZ!2oX+;`hE<,Wk
%"AWE`O&YPZ*JVJe@SCuJiN"CO]=e"TVbZNL`/a^YdXqXpWm05[L_M#-U,j%fFA<U$&O8gWV/HV5<L1nK;>9BKn?asifpWmk%gr_(
%Id[ce=?H?9(6,2rieGh%)AB>Xg\.Ug8/u8G1iM6.@3m*Z[Ckj\(HqKR4e<p5Ri4_+jd]%"kEI(4qIiZS8>>j;<=Q@2Yhd^F,YF5u
%9N)El[NYKTCjBf5kIQZAM_3I[mb;sW@-M<6JNp`<2#bd8ETD^NMH%M\4O/5IK:")GV_&_OZGf)h;ZAedeRIciJh0f0-P$]nj-*a$
%o]$oJGPnoB].dr[3Fah5/UQh2%A\0969$SQ'b[U4m</Yt^t@&#K$%QF3W_Nh_lFjUUf$[8J=t.6]!MLXW;R:ik#2%cQHeSeC][qc
%1q\5PEX7557EWl[NGI>R9u<`s0blpD$>S1s)$bbnAtB%)h1G&&1tJ1#ODPO(&CaSb5dMmN:a?(j4@&c!%j`NG<rm!5/TT.#+)88:
%[?1$^2%gb?]uE/,'OOup9snmFp@VM0-,*UaY(Onlj_gh=`;EAC3mj6)#.iJ&"EaNEYq=12^23Mj9`4n6p:T!@A[HhKp?*[1(Y?-j
%R5Y4WZDph"@)T[;^^GthLu"PPZdtcG+AYB/#>P%^KToB&nWdYg.da5%2)!#e7\!sp^Y2b?eG2q4K6fE$]^PI42;J(]3C9Q_\Y8a3
%P[:'3Gu,*\hf2gl1J<8Nb$#C6@J.)]boQnTg#NQaW=1uH^@Irt^!<kpqas:4I+7"422?N\K#VnoJ[r\2c5Uo2D,,HEh/3`_g8SYF
%C?1N;Kk`Y=#\F!9Yc+^@?`oq.cfIBn3:&PbPVm:UKH[C@Y):KQGP@:7jiZXM6SY,k;t7rkaEPo[Ee&[9(kB?M'3K(MjeU94j.tI@
%f;FjJ*#ll&XA+_VV,KTt=]]10!NpNC/&P+Fp=&8?Pges+LPNRp_2lQ+GWf`S\._-<EK%?R/R36ER>$-=1(/369+P6u>2ac:2b1<(
%b!E1B8ZKlir)K",?la/@goC4dSg(qf^Z?luPBDZRRN-mG/8LbiX0O+gD`\+m0sp`=hVii"ehMR2atoXP0GV#VcR;T!hrjE`QZq",
%_rF<YX:Sms/rZLLTdV0JRc@H;UX::E"boeD$!U1qZ=1ATLf/g?8qI\g3-Wu=:\/`]iOspYnCS2RHL+-l`A:,XcR5')3-IJd+Ge:P
%bQkJT#<2HKD2K?p4g=G6LU+3dm,CU0fL@2T_3A52NcNgYPpr>AmpcI$VSGCXn'8@FT3X$Q=-R2>G!*3-bJ=EGMqR5%X*jGG5DhGC
%)On)$2h.:dlG*;X\)7,_c`=VRkS#-cE'k(RUfA%SS*dNY*(S-MZpUk?dnq)%l04FRD5Agd,M$kpVbZ.%`],?SA\jd>>pFIVH']k6
%UhPX%3-8LPi%95CjA\na^n5FKl)6-FMmuOS&+AQPVFkYrb+p)O:_s7,;l8^Ka=NB:WST0=*,.f-9:rtndST)=NY6t:SE5.!p?]'W
%?8_@&-^6jM!Je2#\Jb$&=G/nl3V^@Mfes5,b#X*(TnKVn^Rg<aW1R'^-9[TeeRb"Q+,,rDjhAW2;,bQ+FN^Y?UHqkB;MD4[-ikpn
%5o+/(BWc?s#AO7*fr5_,g/hOI5tB#Y^aT?!/f3TH[3pt?0V$a<LWNfEH#9b54HLYLXYo_H?_=gU\o6KL6GlOT,A%6<_Vq8%((;#B
%%*RL*Eg+e<K9A8i.8=E\9pAUaG/K4ZHi$2gmr,GfM_G"XTp`g>)f,"f@GB>2E`M$IYAWQE\_o'(@WEJb%C=1_NLIFkpNr]bKQ'!j
%+:jU7+3-:bYll8<'NYcT.qK'M@'7^_OK_(G[dC%&R&Ztof0RU?1e]k_K4NbtGCT/ET9+?u%q!a"^Y3qpQ\S]e(oF-'m`<TmNgHlO
%';B]%(l,SCU@B*Q/g'_//Wh?:&C+hp8iU](UH>oEket#YeJ73PRL%39BdYgS!*ATb!PK0XO0uR\K,%OjE8grYj:KoX5lmDglFLgq
%SU_#]*U7]@8]54PlHMi)@?3j<)jXSr9B,Z=?(o@Jc6eJeAJ,%VW?$`QEakK`kHl0`&_XP`lPset(@EB;NqK[g??Fe#>B[>T-UsV$
%9,,!H/Og_5eKueCYK4/oQE),]*,Xl!AqMlabqLMW[W%8(Ju!g]O*mZhdaVJ@E";Z#V`INR'g2jc7?s?"^Sf"/<2MuM8P@0YZ/Vu0
%2T4]26=:uc!B!R`b#ei_AtP\fgjH7&EGC)X_(OFeG2k:`4BkJ+8giq7WeY"eD[-]DA!J7oMk8GV?t;\6"*PHc#7Rl;K[lIcUr>(O
%e&9X#c'b]SIX'^XO,L/)h@S/HXd/T'bk&35X>17.MIPm4`tFtfa'i1rUEE.hl,'r,fNAo/C-Qm(Smhbe;.HW*_#A1]"K"JQMmK:.
%Z8U&)cq4_c[M^=VC57*H0f#s(lZ8ZP?'2TQk+e,-2k=d+TcR':d6%lDGMJapQhSP_GgUIpCX!o+&/F'6/-#5,CCT>62&!;YgUj]a
%)TgGo-N<Iu=`StOW4PrHVjr_EZ926#RQJKRH2G6$S]b_O@M;]`%Ak._d8Z*jTQ61F+1pLWcp8D<T$eg*A2l'IaDGgge&ktcViid9
%D=+:+:-&f)TaGmP=ulcRAMDuqprlbj'F&=E]FnhbF4^5V0F0-9e]mtQO0'ZRs(IHjcaf9;e5,+%`GSn*et=+#jA/CXrphV4;0WGc
%$r_b*La;7Z$8c_s2OkGAgq;d&%k-=Z^9nj5j+,V0qXN9_nu^Y5MdekhM"KCTS&G]/C=;q/$@PNG.0er;'MDT(7Ds$h14#GoU2]R)
%O'T6hlDm)pU\EG3o-C5!'F!)`g!X;LUQD+Em'b'tlj5RK1WTbDMJQuH!\._XWZR\3).bHY.!-8sD`HKW!)KP!'t$%cAJ#4cjn(UU
%?1"nJ0eg\&lIRaCH2P;eJ\[ZKe2e4CW4)E$ph!.=Kp#K+euY*@6/oNF#\D/Ud(u^cgEn9mM*DdK(O)?.&N&U>oD\-FV1;'LDq)ZT
%Vi=mH!-)JbRm*XVP)q]Lpt.4e?^>A&)uJHlgqQ%jVJHmR*O:AWO+"Sfq(0Lf,W;mFWOG=*27#6?HY^<5Y?Nhb1:QIin%[1=_M^/?
%WSZ1gLQX9.cc;n<QBQG5_JD9-g[$o1n9nBqRH6ees6,B7%I[[t7"%%2Q<%n=:)+0TdkqKPb7<&7,N?;gP:PMWJjS2YXh3^,e1/E+
%e8XE#E!BLn]!J/4DGiS"o,<1dnDZ$N56Zcr3WFoNh7geTN.;\1%d0.'iXYA_1Hqe6_]C\D=jGk!f?nKR=Deom=EF#+/RLC41FELk
%P^-S0M/2hm9;;&.O4aL[#Dr55jn^d*4EuWFmh.nfs3oQ,2;s7_ld:&..=dIr7aENCILZ^eT!#83;=JGJq2Aa>Es"V5cDg4%nZS&Q
%biQ4G.s\[2X3/>X]_^ocoPdQ5ofrAk^`=h.Tu%.Z]=Hc>c/ilQ-`]6C[ad'MX5hW40eue8C+?IB#5(MMCWV3sUVpRdGqbGuf6ZrY
%6RN6;pe&U#rqZFUYe)loPb+#O4Qbj\9fJKdP:_;WBDN\@2MK02,L=uVDS5^.^;^)-%/4m:NBF2kM)jX$NnGMS>\"lHNeW(i\df"l
%9Ru`IpchqN)g#B;:@1LT6IWKQa#YSq=[3h.AcmH;UgHL@L$tGG__%?ET2ErlT?+8u(^O9gjfdu20,.OlM`Yf6jqi'Wko53B=p0oO
%S%\I.EJ-]a()G7ee)R>i=f:5^@uc`n&RJfrG;o%HEUS$41"bON6A;YtZc>4r*e*k"Wb>F_oCt:#c#l/Gh(ZNdLMK>(G$Q*515XN[
%dZhh+a0!BS-8k\;Ft>G_psh(_NQKs*YB=3^l7#khWfloE@!V\&-gMXp:JZ<UT!-0(QVJ@F`8XMd<E:Zk+R,RuWZj_s\q^'5>#`2Y
%j[KP&ofX+3l=#\/S8b[7)FRns!(VVBp\>%H;t:`1MFOK4)TZ,r]I*dlK*Tp;]<>tFI@IW'nk_dHfPi,JRKM@NMpm3A<1+fe10F0*
%p.Y0.No@\\r!K@!`SOuhPp%.XHGV/XO'b.WFSZ,+n+b_#2IO3;*1W9j`F1hMH;2B[[4TDDH&LpO`8l'S>9DuZ*fAa=;#'5mS@:q0
%hnr7%\k[qk>Le:CL,f/,;"17![ErS'pf?A!oEd'M;gI$F#u7%8MZQYVK0o,R^&Oq&MHWahKr)frm5)JL)K(3uY=:&gP6M&9-'F@E
%`kn&c*\jME!\kKE4LQbsJ$g^Xc>L-DFMnCKA\pAAXO1L5&9rO"(8$,#<=C*<`5u_elrCF9k\E1eJYku2SG:A2=DXKO2f_[FG7$oX
%:8//-lM@R.p?!E*naAr;&k4j]qDGk<)a^<0p<]'ELEF_K[K5*c6t=oDQOm#,;n+r(8)n&-D4H+NO_Y4=.g*,5$)BhBrt[<S22W7u
%k?`"i6J@S#d#scVE\"X)SiHI9)+bg5e!q+IB@K3qV\W(0;$$g\"Qpb6PA,])fudVs'THkp/gn8[R3fY&Cj!VpOl&F$^Oo<j3&L9!
%%\Q'Jd,p<t/P)XRdF36ad+A6gUBM,IS?KpcIt7ZV231Ec^qpdSat!a)Dkk1N.uO1NW5XomPQR3h`GuOg3EcJr1WQVgUPeq6Cs:\h
%?09b`4c@e&LO`h$rj"(EO7h5RNW:`>CRCF@^nf(FX:?l_>`WoDYl[&=gf?PB_5A_\fl?IKa#f2_qY4]T$Lp#BJm43fW;n^2fpZP6
%%7(UlnbCYdMq34%WaC'F/O2N0$*OB)qI"*qq%/0T&8cYr3WobbjGRutX.JkM]Ipj!F7bhM)iPLJSkgTaEqQK;R),"Q1>R^VV/;_Y
%V$Ji;2pT]^ecM+jN"f3@-b5$YKl4"?De)%5?g*#oW\iJu1A0XlMVNU7.LNV/4XHgWFn8HbfQ\^?bgNHl966_tNEQs(5PSi*dVcs7
%ooR#>;)1.=MR>*K5-TXb`AFVnbCkHQV97kf"7]:=F6bs$'T-no@DSlSh>!,(r@7Tc_Qk5:o2kr.l^/@GDVP(-e$.Zsp^ib-'j.8+
%KFM%1.lB*6F*Z*jQo/+X9L9YY?OBVa`e%,F4.(V?`XeNp>*WP=H)2Tg7t:2#F[`LcaG`7fm'$D%Sp_<M15M,2GhB-,cof7,Kc#`K
%DK3As=tqV0&-M3/<g]sl]!Bo'mQo\fq_;9-I8.b.^AI+ms1,T@F:L1sLG)[iYg]ds2S-?p+p!#c/jOTGl_+[?G1YeHlpPZr)cgD)
%Mo>QO.'?SJpc[^,8k>`cO>R+<;)m6dF*8ue^f^p8$&76&:k]9[W&Uti-6IO'YL:q8cl]'V-tsDp/DIGV,00GJ6!5>f@Dn(l5q^c.
%%^-W=qSEjdS:JI5ITP(9%M+Rg$@S@b63IU$LVMk1!YIc%_I*V!jINF/F]GNI,UVQl0DB5X<)=F_mlpUAIsJK*T=#!?ri?X=?>%op
%Ft1'Xje\5LHgg(W?qSB[%kg]QQZ+<aE?ZYXSuZJEE%+*4Cffh]="XIGkI(4p[Z,dn&FY/L3)D.a0I*.r8-9U-97la*a%D\cdI^Q+
%f?W?[/B3lU835O`UfE-u70Mse7iEA*h-lPQ)^(oAS%cA#G/FEjbVNYolU-6f9e(.5`(?CqMVu"cC2R5%l\p*`]B1n[L(KEhPka2;
%=X`_f0X;'i^EmXU0u3m]#QT*\gpcT$MO$Rq'>+)ePa3L=0[5X%>)'!>+Ik.<BlJ&u2<MXrRPV[)Lr#<#6$%<B0urm112?J4$=?VO
%`dG<J,'W*uYt\l*7T=q$&KL;4ZDcXDZ=N/4r1rEqgEmu;LI-Ht\<MkBG'Q3ils*#k^G;tP569PJZ)@_JD54j"%T383\$>d<km4<g
%8n's&(/l5%O'MVnPe!aVLG,1n?;)/$(c;G<+':e_5AQ\M%J[n<-1cdkH*cesKEh,;lcCQuH%.faAJ!9VQIPl$`4j$;DJD.8nRio'
%+cMrhZ.('[g2<KC/=&MnhQ!_\=n+.a!gnEgq6D/M<s:]GA\^8XU/NV=W(rC(<OsL60^g&aWZS"k>-P4<?<j+a]"X>b/;94:$b-aI
%`g1JknV"r`+Q9SJSi>XFmj8eSV9PRcp"<1FkcB!KL]q-!6QtKB_r1Hf=oMnXV'sh:GRNCE95JBIZ:*3IA2,PL9//72UPP"C"Dl4e
%kB\HD:LK8qJNcm@01L',#l3D^KV6#mK1DaVJQ#,c'hKEd,U;:eJn(_qA3l_d4[TC@4,254T%Wea6flET(e?^%GM>eg*%2LaRkI]R
%6&icO4ids=7qF2D7,7"aPo>qe*g3jFc^X`UDgX<<n`TO)TGH(Y01lbE*HL\'chq=ldM5;UPVo<bMco0gUh>3J;,*>pS4Mot]$,Ie
%Wu5]K)n"l]&k,STRN*7E4]o;&-UHXc:*K%]V/*nR&BPeELXFYfL/N5$2?6*Xr3U]J:[s?kc>d_Yib:8;7'O06(CMX3/6ON+=BbJu
%eXU'R0im5t<lj2S>bcE*$WYoU`ldoP^`Df4iKt$f]P-?g?1A6*\6mVAdT9[[n:iH20W)DWP>RLcdO`7uP8e!tIcY^W8+XXK8cXSk
%8Q2*U@E1rRWT^n9ijdEJBd(tSB=4[t[ZQ<@T0d3BNPf&"q;f6UVl>;5X&(!9_m.1$/MqX)7.[N"L&PG\gd\Qi30XiF4KSAuMaZ*?
%q<AVfm)PnN,:(cI0%,3qbQ3KqM^m9m_Z&bb^$MZIcYXDo9JmqtmT9h4ZA1nufb\"C8S=:<\jJ!^N&/.!3-:)tH8AOX^%u-!M_*%S
%R^6]VAOPW[P?G[/@--keb!M2M<e_LkX[`\N\p0os=WjrI=:t"J9rlo^/6)b&9.XRIQ7f*@f9B=]OE1j:`^s"/;[BO[+)cU%cUmpJ
%KTp-E8,T*[_K]-QhTouEkt`c_6>6)\ot5:9\)E\B,ug=jF%t6dNaA.dIm-?jHDuXSY?hhnnHd>&-&(:;ZFYHoVqdLifPH@)5.9UD
%Pk]R]qDAW0c(k`.OJDM_3KQYC!M3cb_Y,FsN<cH#'<a\A]XE.[ED&#p>j<]t'F6"gd'OFQ:&$-r>H==(W5:gjZ7l]X\&a\k90+KE
%:!g8[S*+?5r]+T>f#22s.Y\CZUQR83]4K0(I,n<iZH\`u1FEq%>.;G'[F?0`nk#Y$Y-Fl<)iZphFLTF(dP3S8FbGr"6"-@>FH?tY
%=U35:FncoMrt/hZ<*^_TA:r,aP/Pfs_@mBG..+S/4Vjr2C/8]U5!-JnJZhSkp%./FG;pHTc4h^)8Bb!>.`Tb_>c7`A3TBoFa]l`^
%WDP<7Ip&boGmI;7SB=/!=k2_k\1NJ3#g&jL>bl>V"sp;1(,@aVA9ta%B(NgnE,RBSZA+^TF:ILZb\Dge2S"hlRQ*ahiL:\s%KO\C
%c3k*^+[s=OD*E?:P)s@cl"rhlN\=k/e8WL>YD>jPM(AmW9^U4p3$&SB)P\D0=A(`ip^hU:9ODqXf8NH(XB?!=/YsT\S:L8sfG\n_
%a(cpmF.p+!6pY>R4L&;KBe(Cg41V!b=2I%'b;pkbi#FtC.uNGsb+qp4/?1g[mlR^_;I#Q9j"?)nh'$hffP6Jf(["P=]iB*WET\*1
%3aC,ph3].IKifmW/O$:88L79%^%1u&+-eMeD66j4_FDd/%R'+5:bQ#E'@/;7i,f+kHnM-#]?aT"WD:j`(.KiX`M0Xd)ChSmYae'0
%9EM5$,XBGMXAF\Y@Uj,F(9pOf5HX<nRCA2--FB4D2A`83*jnsi^6J9TqSaaq`"c03iN3q+LJr\nHKFd!S`B6@5[J-#'s\$f[>o[\
%-ei;J)#NA:K6%n.q,]e!S-SC4s!XH`SP=;ZJ./'TSr?)a5MBBG]We6Ak3jtu]CGi/dU@Jo<F69dNL'b2WqLZ7U:B88gdN#8&\$b*
%FJ'9>'-o`NQTBjm<?11M4Is`Ch;/;)(ZcQMGV6s/oQsV%>)LJAD/=GW^5ehJ,sO<)X&f&<1Y0<d?@MO/&\=repUNgpSKDYfXZkDl
%p])n(Ngg0MarPcMa([#ThJeXVe%XSu$s0&meFk;HNOkn:qgH%Y]fKo,g+.FlJhVgEnlZr_QsKRS^pHj_@$^*<<#e9O.YgehTL[Zp
%_.3#4pDMVIZ]ADYUl5G>n_KlLqMHCf<ZO#<VFM_f)ur%B5p:-d^F@T&@g%r(_;\kf')gaZ!Z<d((+R6(5+aTU.^;BQDQL!.jHG;7
%34Y76(i,n`]"!4D_,KTpo7O.nS-hVQ/9QVd<#Z,NW%`Nf3bP1B?@C])cR.Q[rXU#r9`Jde[m(_[j\j6/YkR,MmRtqNG`^80^)E,I
%-Up$7)**7ZR6"8ZDt/ZR&$P$D&$nsX.+1Z8!:%ak[E[i"jr?e)M9doN"9;9n&6r/+rnnR>\RNSuCi+FmZs1e%4rpBJT8mJ`1F:BO
%=lg9<<8..i<"WK`<cU3<SCNNbV`G;\'s;:'e,7-;WeZ;DN""iTduCGP^lmi',E$RpidP+5:?i5(GC9]inYp_=G2akPAU\I#!/Zne
%\B-Ts\Eu'&kVa<`L^h/?lK$5cc;l3KVnG<Y2n=?[f?p?^"Xf(ZUqtPI[eEoU"D.,^ON_%]_684;PKTa]RPMbhYA6&P/+]@[,CMP-
%1*R6/bHbQafZd#kkP(JT>K`EcIIi?JWeu$WG[!;!XX"+!K`"rCg^M1&X\aoF,r#dNcM(j`Na@kJgKl]W9mpj<k?[Taa2QXNMX4W>
%B9eHt`_\/`_5OUj+.8*aHhWVPYh(?bN\L\]J%u,_A<Y0hj".C<0ECcrQR2i]hYT:r35?.-iH66l';>T+gW=eNWDN$*&n"^u]r`tL
%flS&;e9&Xt-DBnnH!1!SD2]=(p7nM%4q<a39Ee(We"NHVL&*P+fTFPnF,9q;i)`loe::9@<l+:ij^1Z&[Mk8Z.09Kn,<tXT:C.%!
%idt*),(\(g2P0Pn?-GQ%__t,GV4cOV/L8Ir34a+B6;lK34et%ul;M:Z7[/D&)oqKLZ@p_o]:3Pu+umr6<e@(L<?B32L(5KEnX]gR
%f0(os^$q(,Y+K\sI>3cfAq)[UHD7&(+cKQH;hBL3b0h;E'1t6,7"P2GK;'mSjGd8sl\4D])NC7X'2^h_47DT-P-2m;?,]@[\X,[R
%b2&E%]cpiWSNFU81d1>98c.apV?1%6=ht7*?:Dk\\6jVLAf\$`JDE7\kh[-5r;K2]^]4!T%Ic6MC%-'@laPc!pZAZoq9@gpc/4!E
%h/E;5+27]C^No_DDu]V"n,Mi9*p5K^p-8NLO"W-]:VZkQ++Nn,GQ6hjIIm3Js5pe?N(_Vi+89,koBh&)j#=aQj1kKY5CE3B>e-$L
%d3&2_^H7cK:\4)as0(>Xr?)(0kr&M>msb#r;;_??rVuUVJ+JHe]>NFO++)Xs$9Z&bTDY@srU&K,?3gCb@bm)Nr?&fQbs2-dBqbRO
%s7l"@hgbO\rpcKX_8F"_rAPht&HDZQk<n%a`@_,[S)=5DGMiE!5C`:`gHY5\o=/-Ri';XucOPOh9O)sj'-N++$gd)Idf_!q7H)Uh
%3a1Zc"TuYOGYR4sX"TVPg;-t(8X*rkB4V/-U#3-e!"em&9M%nJ'lF-.`'[q30Z39h(,s1n>Z1aN'[Fi5;\?-Kc8=U>:Lt=nP'pUl
%ILG,D*-I4((p#>!Z7c8p`Dn4p8<@LS*FYY5-&XRiQmW\G`C0!k+qJR4PmNigNqXu*b7Kn*N1TK%hDRS!l+[^;C!J@FjnenX>mE&`
%-&%RWK^iI$\_j%%$!%a%c\sQmi-85c@bLPQWB\o]ND92?9;=0BLqR,uhk"pl`1]u;4#*NH_d0'f@LoM^RVc:]+P'i`jU'WnUSC'I
%i#ceP67]b:0-kN,fbO2^D.e,.\?'<`TQELU5uj(U3<k6!5h-#$7!;0iR(V&FAD=6nA*$KuJ!&2aM&,Nc)])A49YqkpMliA<!WtQX
%Y^u,_9h=L4L\+Eq5)$;A;VHgr8:Y'I&2"nN%4]C%+;U@s5JHS\?BiZeY%eDt7h+e4HVclf)S4iKBpPq^g4)+g8eqBb#_(0->TJ#K
%M]I[!7<fshBRKS5rtg80A.R5+&Cu\]>,B!.-RIn.:lS,dTYjUo_i"+r/+^S7X%KuG+fVH`+kHY,'Yth%4h4Bam9=\<&?d5%Y#er0
%pV`Cc.VG<KB1[aB=/m/gBCT$:n^,F=d&d%6"+6)gq^__qQKX+Hm-Bad8rq46cmh>glOX&3:NLmF_*P_k((k#@,*$<+f*VY[7V>sX
%bbeUV.M_2>.3j+DgH'js,t,%O$JIqbo;@6F$!E[]G0NGo-%1#<]_4r6i_bgtMKTO[1s4nb0oH+[AKr=BPYZI\'2B9t]a,XEMPdb.
%5fY2`%?XENHUq&i>gu`<`&cr'*qH=7nl_$>=Kp^='A!T"[Z2=SE6C)US4kWa76qo/eEBdA`TnUT7B-/08@#an]galEMK'dsD`LKc
%SV-"E,.&fRDMOI@TQ%>B"YZrrWL,48l8&ppe>@Y))#W"ej0+Bh5lJ%eN^(j7-@RVRSI-O\#f0/GXNlJS0/52d$oK=3W]4$kQpbr9
%YjYFN-?E7&BdJ'XNea?jW;6M&jr"[\Wa1mLFR8mD?^f>(15iLC#\Y!]@;T;OL`4W*BrgtQ^tZ'u#qm`^nQJL!H*IL!Pg8&5`M_8*
%5iO)Z.&MBBoq"S^VP\E:AM21D4l/chH.sX"8OE5>Mf4sU/N0FXhoG/R"j![=5.9/H@`@^05)pd$IE9e)mJ"IOQKWj2E$o;gE2_'a
%:6>bsY80j/o!5ApmmV\`03Mm4`3QYl7DAuW+$)h4)$<)aR"_Q3l-DGY5MqG?9$V>k)<gr]K\7e]84SJ;^6=hRaMG;]]&l/S)Y6t(
%Z'e*u]Rl92-mC:,03+=cAG+H__TMe#&ZR8(V6c-,j^M6/HA,uY7$WSqT6FtG=f3_nC-k,X*ImTWOe5_!r/hNeE6N0SGqg^YX6/hM
%q7J'>&.iHG;Oc>5L8m;7_fsfb29i%<<e*%Q3Us@<Gl)RZi%Nm<T0F(;P=X/qUWj"?p4p&[.sZlQmV!VFk&M%D2;d;Hf73):5g;->
%f2u6YE1QX(E#n1'&c9(u0R0RTFp:rP-U^#&LhTP@AKY-^eB@YGd>'co:uRq\9*q!EnDiVqLA)'Ss,?fRCVFpu.Z-.J84;bI!c&6_
%(.lSMce11?aeX@gCk1B?.Z:SE+eA;_?Lis^g]WLWT>Lgn7mgnLLmpSHhg[rb48O2C]9)_<m9V,6G^#WgMgANBC!X"d".0GA*/sK$
%@I*I5dGjS+3"r[?U1*[-kGbnBq-B2Jh+mr"/<;ZSB]V%7f2V&*N@`A(6;)mhU@KL&"'SYAn)M,2P+R^ZZW<<9B[!q`>s4c:P"hJK
%D7p5)AQ>RoWaB''?BVe*KgZKS3'"+NT!dVEQMo6^8<*-+_jT#AK&9:73?>T^2JJo=2G-Z)qkY+8oR+(tR4q![)P9/;l\&D]Yd3ra
%0nDet%FZ*V.B0iTX91^oUE2&u+8h-!i"Dk"R@\*Y>)OX-#`LP`0)oe-)hEdZa2Ed"RO)sQ1g@>B\<UkbD`O<ia#W/1]u)nI4aYsU
%n*WWN4`B:4hhqQ6#T:KT"F6L;.WUT2<MlKO<8i;mHL,%rhSf`9pCS2u><[<rHe\Kaa!=C`+,5=PcI/kGCWL2?Dt(Me`+j3cnh$]'
%)Q".C3ZS4U\Mn4d90XrIc^#2/G0t;AQSQ#MXgbVfF&Z7==Kk4YW,GVCREVSMMk:O^)q"+r4r:H8!>W;>Am+fbEOlVAdrKp%ksi"P
%@')"51dC'-Aq/Z%Iu[F"#c2Yk?5Ml"%q/ahbpTQECH5d-/'6%%+@l(Eb.Z)>P"=G$Y@_QqMgN)0GZ*>F<Re^En'*AI&Hff2[U1$]
%#&SG[P]cb+erOLIYk_o7;+rfUCc!.o0TGFm2Mo7>Ft^#0`biEXL$D+[F]$)WTKsc/Qs,BcTI%pp(!>aLa31IPAQHG$,GI_jFSsuR
%R3P)k:h`+Am1+[&.V\^qUa*^^G(8@7IuXjZ[m<+QCg1OFVBNsmJM-=D[)>'GB^7f"b]HS5B7k//R*@HtU$bA@9-*K/NLlSIZ]#//
%@64:r,b9h'hF&<X1JcoqP^Knn)?$ie3-.P%>A"J4Y+^dg3(.]SK#EZ<dnB42P5@;^hC9*GebZGY<tJ!H2q,$&93Xj&q'f$So`:$.
%>.W49mH)UC@t<3[fp_S0UES,??nu>ZO_q37qiV;K4bP%=T&l0++ab:sJs/nt=gj`#T:K`b458VemqU$A1Z/tM_j/s8LFa)5]^&p`
%P#'bu5$nl*8FE;X&!/:&m;qb=_H0D*%;c_1/O!3&XC'5&8$,41?F*8J'XN1EmV>a.f(1I-oeco0,n*pOS6:gA1)#5gl#21);o=G@
%DFU(9Wr=uPchFuCX#=,._DT4GlLJd'YpM*q4rgQ)Pt#"J;dKi%&rX9;5Mq+UN:3C9'[Ior7XOa3VY\](!OF!=Q+p"1iX9k96<7Q,
%5W-$RaA3Er>DLY/CaF9:)X0:/6En+-FlVPGCD5>7'E]`YPcPadm@u\fcjn)c=]Q<fh4r,*Kuo`\1d;[%^eA7U"KNVkeK96lghkYY
%_u'n(]4koW_o:c%dIlI#]iU!>X6se4aYPJ"O=i>];9G?`9!Bm<b"GBS3<eeu#*R#Y:99u(;;Rmm6(*W_h4kXX9#:AHdC5pX<2u=4
%M]fj%=mn+rLQ,mN-@Rur!Tif:rU2RQm7XJ-fb1jQpUcgUI#D%35.ujsr-VeQYo"Fdqp\ZM)YMG7VN9A[7:9365O4Hr\ug.L"m3a&
%*L]lZ@>$'mq:_]UK.(Z@\CWEPdHT2#^V`&LoO*Zu)@%YrUZ4HW2hJqC3RSL(]bRb>2(raJb]@B0i]+RkE0JXhC[hT6\+U<QEG74&
%B&=_FfCo.ueeHf#6Wm2<j!-YKkS337;.b7(>0i]27sjYA.dlk63+&CPfe#L1I5@XZbXXg1=+i`DlqRJ/4^ek!UiN";>KJT-)f3^O
%qDTC[&bD-BdL,<)QnXe@+iC1CckM*Yc'hCdrZ74C,i2]@mjCYM>[sNC5Y!>`!0Mh64Oc-^`]t/[$t3lVHeQ^ENn>RX7:N]0^o%Y-
%L,nk/=q-m>Y,5:UCYVUQQ39<QDOk?YFkIe;"'&m:$kbcN)M!?D*MFu/,u0XOh+Bb#qq\;2rR""76rpA4'Z/,H//fU'OZa%)r\].>
%^L$i]XP9A"WZ5J<%M$/Uj6VQRRtg&hKWTju\lXEC$C87l@+;j$ojQ*]%bQ@gMUbZ0?9fWboZ.nU<>LZHcflR#`:,8Y/&@A`#/t0S
%!L4[0;bY&gW]4LaX`Eu*E2hC7e"+uHS^dY$?,\8Ap0*%>lNL*S6%-YDY9%_qV6pu((E=UZL&*r_!/KW3Q7?+D?!uC@dSOn"BX)m>
%WrII%ckf.HOnhQ52Q.LL<.'LFbDrb5qX7rC#J:Y+_e.G#.>Z+)42a*STc?]bEZ3X^:?&V'c0D=FMnN$sUMRR*gT.QMYDO7bO9!Id
%C_'0?$$[SE;G40bU+Z=W+^4$`8,mNc01=P'ZVq#N#D".4LQF3KGR!p\-%-!U^tEWREOl2e=i7'Z"")E[[kN$6POg+!]=h`H-:E.6
%7Kn8i@ZGO3r;or#W1L)O^9ekC]LgPN*EWu\'.[V2KTT+GF4OR)F(pD`g<6PlGaNED2N!pU=ud16ZZ(*p_jr(*o:bZKF+@*Ajgb7X
%>hO:X7bF/-3H1?Di\5kOAW%_+\1610W+DhIi["Q?OD!rF"RO-g[/?M(C6#ao0]rb!P*XGpP9V'RJ=8LiJD"_HoI.H#cJd'[k_Df0
%CN5(W9'p""N:qM'%`Dhb&uTQF`U0G%n;"2e=JIMufm+Nr+[(k\p)_LVK3,V'Y+Ces,hPejrN+g]2"?q,CjhrpSo&h.Q6'X"pp\rR
%>A>lIV*TaUFW[!21no@@kPZ7k8Nk1\?HkkK-LZZoMM+DS4`niZqO"Q,6rb2dm`H/GZP5*pm=S+@DG_7l8&,c73_J5[U#P=4'Ektk
%j^^8\q+Drgs89eR2t%lHes^.$>bB;Kn)?]q">/do/X4nhR..3=?8V5>n&SN_5MT.ldc-;O=AL\*X>9Hgi[ViY'U0uSQXOW7CNLgu
%E1P->%4k@g?##?lZqupG.Jue"f4dLB9RC+>4eTbN@@SQhhWRCa-]c,K>R?l%a-=tRE>Z[(;gtJ5r>BY,G*f>,'E>mko+USd.8_>a
%A37)f;b5h&\CdB@b)L\UJGMfUoQf1SDra^Ya3XGjY(f0"m0qk1P&bNGf-/=D'^Bg1eLjTGTarZ.k3jO0k)aooTk-L9'B4QWkR+Qq
%<<X0hoLYrB*6q8ae;O\ZjS=!AJ$lJ9_>OFT0#O6\n]h4IjeQ4G[A@CloP;:/+#XijgSWVB^npAG&ge*2C,J'ITQfA4A:,NaRH(:$
%HAt(nMj?P6?<F8=N\-Br<#h6-Ba\P8R:G!i9UV*&6)K\U/;>`/c-pG>e:26RIJ18@2`2J"&R^(>Ha+UG8t5eGO_k?q9qi#rNL.*-
%d^l&3lJ4!Jd/DJbe:N!J(0ng,mLK"oVu0]`$$-l,\I:h1KgtiVbbNYmZYb<`a]+-l+ju-_`ptLZ$TWI^]brm(F%+.[F,75EZrYCG
%(g.VjgZ64]X$M-sgIjeB"aBSLQ#ie;Z9m3D.)OThFjQV(DlfrER+<S&4I8?s$s+mW;=#oG$T?CKb%=6T4uB)A6HYfkR'jrU2O$1M
%d<*]=q9Rft!R0m7B$RiW!^2jd%'*')>_Z88KA`QX<%0J"k8MB8"`L&3P'5/'Su>&Z5bVo1m2ZZg_i4>HQ@W$#h:=mQk%on;pDF94
%<usLsClpYCLV9"OBAT&^Gg2C@m&!oiVZEbI13?`P[eJst4\aFcOEP-H44a,*M4A[6DL0mH?f%i/<`HLn\t4d%bIQEj-rjJ0:$&$E
%VO2?8+<7d)knm'_;[K/@5g!;JQan[qT9>$Wbu*',lR[7tEjqjE=Y1Ei,p@O#j_+fD_/>WY3ihG+8h[XT@YSi!n1u]PH5hb<Hp3\>
%H3r?I+\8]/JtsuL;M(oj\AU$r44L:O/N+!&,(NT%C9jY^-Zs3`\?a\+A-RrdEdqZ2a*]npH'tLE/t9`3cb&+(DuCP?na/doFf0dd
%;7#*UA!O"uVQlo9<GZGT!>IeQqaR6OLt&2sH/*P\ESR85GmjQ->DPUU,,f_R%^/^k2\H%l;*(6o\g69"a&gC:6Mb\2n+-OIML-(i
%Q`Y:uFEGDh@Q/Y0ObN*cBHKTbPXu?q`Y#KYoJGrA02"MIo(7T`QiZMLCQoE%>"p4[:#K6(TD'-\meu:<ON_6rGt.Z6q!YI,??Fhd
%*u%ZjM$@sXqR#*M7S-E+8m`h*@[;>?cq_CqJX@\!VOQZL0@9g%T]L6]9$H+m47s'p9ZenTO48BH7hjJ"]a,q_&?ZOl,4-pGO1E+f
%OU_6hb]C!"biRa/ZCUW.F'B[RLKO*VD+8n./gU1JcSrJNiqjQ7>HDENaT_rBO=(!`0!s4@e<^q=\8pdBU$qO+>R_BAKf>p=!P_\\
%U[B($9/*)^Cl3Pm*6$=&S="Ee>1T`93I9Qm-mu73;]?>Vm6lO(4T9IF13Fl_G(f,R]XtEg'Q=fTmFA01"SoM[:p%iMRn%Jj3da':
%/sr!oR,-`(D9gQb5?Ot37+^-r:Z)cuDf)X?mS:XX89QMqGG4h7U$["o(Gr:Bn'u?ZaoPUR_d%&MnF2D5Ln,VA4;"^U7iZ^:'(=8H
%:ql&?,i*AZW_%WuaXW8us!Bb@G)lJtGFem$`2p0EW8i$W4,m2!2FO;VDdLSG[nS1,(2[a&j`X(Z;7,(.<iC#Y,t^4T9sEopfB:uZ
%WlI:d&c"GD,k*)H+Ccp9TFWd07lNnDBBnL8?CNmV@B'fIPa?SB8]2U5]3)D>bpgH^6uDimNX4?N@.EO,#cQ;*e(pe\aLSbl8FJ.(
%6?9ns@L^.NK:7'-hb$j)VHGNc"Cbt7]a&DIemj<HpuifZEITu`L6'agW@mJi)?YlP8On8d^6o"IL0\&U,&:JnQ6q`((GnsjdbNKM
%N"bZpQJ5T[>]P[9Q9N!aK.*a^2U/"Oi_CEfl1Ptr)6::MY8tG-Fi'IpfpEm>MM5"'mK_QA;/UpU!c(",0URZm2T;_(J+Hb,K-/KZ
%p7U[o&^X)"gp9:W&]+tNW!R8b">&X+SB]1(YB##LLn$L!Y_Oeq>>\D2ac\?s):6]YqaUs=IPL$c%.FY\h43`Ij4^tu%7YVDY&>F8
%*X"h'[IuCkY9e+VnclEpLO2W.KZP/$943\A2a@-ol2lYPksI:X4'e-p$1#F8^U75=Rig?n3,!?0Rif5,.%j.[Rgn(r0J)7g<;.+m
%R38fHCf-]gMU8i7RLM)*>Am;[8+M\s%_ijhGZ7JVFOYZLAO[]+0T3:>(sZ@rVdA\\V]9]^Y:F2Pa*)sc4`;E6"hUg?eD/`?a\QG^
%q_62#&(?N4h</us(e,%\6Agk;oNbbY*.Os./00">[H!]smZgcFbo6EU/`-GRIJ_?6EOJWp@^s9lR3'DMM,%IkL+4MS!5_XS$oVI%
%#&c3?H5&%@9O-AbT(nXV%Co<0,s+"EdqE5arJ2Fp_:,@q&26(:,8P3POOQC*^VpMKkCFX2'HpC*1*+8%NS*nH#d2(?Tno.[ff?cd
%ZiT4@P[`RD^,uRQ#tidEL&/KPhZ.>rGq&%X[A#qqi4?hSPXp)UL-N*Ls"mU'?iRb<pCG%9m[sLROq6flIf',*ha#!\F43APp@#27
%q!UG_N`9K0Ss.&6cMRbpe&,J;=g$\KmXONEhu3P`hu<ViIe3<Kq56ITc/7T7](jUdqu):g^AHB_jkK]22/\Rlbb+Zu7ma2IrRL^V
%In)Q'oYBqgE:Lsd^-;Mcjd1G<H*</D;]1)E`u_4p?rOmYqpCEfFCMI++J/,nCS-`3rTmTM]pp.Sa<'7""WQ-m[q>RbK<G-8RsrcS
%5(3,RoOdhB^')7ioBBH*rt6UG8O3ec#B4YJ->QRLn/F[5CC8mM9^SPaG47@\=b:cWomhd(B*Cug]*S5j;Sm"2esLLRliAe'IcpBL
%e.aP0+I\mu>FM1sE0ar=aEP/jGm73mU+E-2p%!pP!be#)HWd?RfA2?g<4SQ&eZG2Qi!XDO3<Dp,?aGE7YFTOQM:F2;Nohph,/=[E
%bLMJYRZ^]th2$Qkh#b`Up$%sbT3B87f5C,+\+m=RqRYEM-7A=:FMIUXpAA8:`n/is552trN4B6^II.GYS#bbhQn@<#,Suq:FecAo
%SbfHLL1B37"\G@Hae(1IH<1X'H8<HXlIJI@!YP4sZm5;8n>jU*HgeFj]("[jib:'\o_jgUXWJc;5=_U6HGqoc1*oDqS/g]WP=r-,
%W5;DZDCGXsP>g<3hTJ7N4)83[qW8st:5SO8_hfGg$cs,4Sg7^'g/s9)\4"IJp;JLBarMZBJ3RH/F_Hf6c2GHp(1UlXb(-@:jBI'i
%HLms;V(ds).K6&`r.ct`BDWO"r=/Tujl!7VC,1"$>.GAFF#VuU$&-:9rdU"Ee/15aP,A'%UjR-U.J'bj<f;X+emRJo5i0U<$Ao)3
%FL`8TnBF02rMbK7BJZG?X"C>#(Fi+t?'t?5&ldD:l/l5\A!,MC`kdi-1]is3PDOoB&qCTchPQ1r`qG8n-DbtI%Jtks*/<AX27Y:9
%I?:+k992#$W6f?8]@\qcFT>3H/\tV7H'0M#T2\^rBKsVfOFo%;d"q%IWD$lYBd;1#hX'-FcfdqHAhg-Xhef_3]`1ll:=5&4N-OM$
%5WMsRb$f&7=NH^P98j:R:bre[*^L]^<EKU/"?n.9-KuY%`&_7U$H0t+`G@7$P/G5:9SihFP17sZTO^-)CXL-g>J1OV1P'$nU;Vj@
%;B=eV6k*gEqeH9-@,bDN-E40L#QjhUW\7&;(6n--hj];GP\EWe;a7!"eYH[&oXe.SeV.Bm<1UXBYU&X7p:7ZMYOC@[eRF2(A=0P;
%X:/!LgE)>(-2'S>1J&#9"pC-(Z$)/n3qEt_Fna8(D;8S99+)BI@=]-S=BGDME-PUTBfg5.>Hp?rMk*E7B,%Q@XfCd>[+IkC&>(^a
%So6Ih"tPL*/>\"cdT="L,!;5n.<j+85k;^!1LfL3<1bgIce#U$8_S[fMTQ7*[54;&;go!f3pWNAR-M3EQm??!M%Ejf?jeJo*:GUn
%V3[<C0W@="\N>WgK"%`m&3]ChrZFPpFTm5tn?Q3@#c"mG46_)TNcG6nea?7%:+6/cRQZi$'f1;#_^("q@APcJ>/]T&%p]XGf85W6
%#&nL\h$tgfd,ubCQ[D7K>O^49RtH*t\]<Al;a)EFi&;I;Fr#Jq0Le\A.8Zjk\)#-bOHrIAQ'c`dZ18sP<AM#I/2Mq625\+5$8>!^
%(5_)EF_7n8@q<h7k-ehdQ.8UF!i\td-K_WXOK\N2G'G;:-A@A#8_"_X-)N.*A&6>[$*bj\o3$AbnsosI*+p#tJ,eFlmVQos$7`/%
%=:nS798tZ71j#;<Xu#tel.g%!)1'.*4>tA$/Y(u)=\b9r6ASD+6;!HeVNi=B=L!K24A0&EpEdn^Vl=,VQG6*NGeC5q6l:V=_r=A)
%9`1>C[>sjc*?$4X]Zp=4?k1"uo-.+ko9C64XctUBc61CkH<'),=VF'YCu9$KNQemKb4;?)X;T`%Xk`8j$Ak!'(Th)6fH+k]-/'fI
%@:P(]K`.<":0MA!k[Aki0O0h,hL0n?'MT<C;2\p>FNN:BDk3'Rd;i,O'a/;6.s(tSW8H8)`KKn'D>PeU._m*&oi"a8\\&H]7V0WF
%b%0Y=IRLV@P'9?1%k6W0(HouAUt1qrW_\c[/hGcfrKOf!7"He."O`D6(_W2D,j[TsX7gqB8iHr=gsO9obGa-g5$[a:[p%<4M_[2;
%#;s%;Q%W(&B29=T:Q2d^N[^<\2r%5h]F1c3FLi`o/Z33pRqI`RU/h5p:hG+./;/24A?D8$5f`c8KNuEk6n6h8i$aO!dq0;5)s0s!
%AYfLt%S5ZaN8E.-lG4gGJeNASc#b'3&IsO`cEZGO<WA%#qRrH6]Nl8t[#q]jlE.f*!_WceB%<McM5sHq:<cnAG(d%I&.<g-:bn>[
%pimI(5p<<6FK<`t0^VE=-Pt+58BbWoo%[H:E&H\,,"X*.AQl9B0"I^q\bT+?'oeT(GbgS\#,r#%E`N`$\5dB<;2J=``.q&BPE!K.
%PTV2h/lXrWH#k7h>9lBO@\n'>b;LeT)>C9O`lVSnj:Q<sfW+U$f@$sSQ$JCACRm@e2&*Dq5A=*+q!5*YP^2lRFZojZ<mPosE[.\M
%Wg*AmWElS74sMrMJhh6`eI^dMX"3YtC!`\is/UOgc'X]A\HX^/7t:<t)uXI/e/+G8c-V=^2:<goNha"NE]Vfj^iksLoaReUjWeh?
%`V3Q3k$=2Upe5Yh-/ZK@6+!SfL%\f.#ADin:&;'_:O3PQCR$@s898bt!TMSEFTh-GiqF@m@j1t5-sQl3IIu.+q^N:^3:Y0*M*8bV
%F6%r(DF%X!N.n1$=.fVbGdtK\e\`<jU>l4]#!:CVY"(TeTt>AOf-#eC'ctVB=I"UFKo=3Q6uA<fI%[t^Oi1kHIIl054c_LaX)%gt
%WT4mRK.82[$?MX:iq<'EjJZndg0;=RV?Z%D`Gs,$ST6X-$FE+1,#SdS1JpH7<:53<B):"c+hN]$2+@p%Zq;&Z&K9FV=K-tO2GEu!
%V@aBm8JN2f[>(-qV&6?4KDX=M;`7]H&j,7L&jY*QCF9f\JB@nCMSh&#`R:oKFguOG:*K-T87km'i+`3-hsiSYru,'^W^?B!RF)Th
%'TuJ/HEI)nRrbYO9uX.B;#st_rWnB@!+'oe3Ved&EcP9H_t.6.'D8Ko2*/RZ6r9"j=cmcJn;J45nELCU46[<+T).85J*SVNT)R`C
%MQ8WT/J=f2.nIfK/U]b`SfmXm?AGYsXZpfB["RhNK(PDj,gm&,Te/Yf[P2=fKad8jg.5KT]`F7U-^..[_"'\FgC`u^%ZmS1krNkn
%K1n`W417tB^5;.S[MG-4WA"aGo5ROHOYS<bO!U#7JTX[V4Ri=/M<#UF*2\(&60dc*Hh[3EqXaGRpT@Jp37&T<\O/1Ifgl?jSC1%T
%5t%8YcgBV<oV#W5q#Ad+$uTNOn.BnTFbK5*aQ`#2Hf&)bOU6Ub0*4;3(fia8](Ot<CT/ml6A1&j7R+r]piN&tl'!t_:r<`S-,mK^
%N?q6\L-r[&((p]fTr7a\9![)WFfa`D6KMa7n.L6(^O[)MaOWV4<9]N9;;Up\PgS)=M'h0eL,Xkh<sfTc\b9\.^2o0>i>bu3k=%T$
%-t_"(UKe;jF<2QrG"j*tRduI]AY\1R#X=^ebO*(M`\s*0M"'K#)JU8;7ES9B![5#Ol&WD\IsLlUgQt?&W8lg9V`s3j/f3nt0E3H7
%r6(,Fc`5&/_'=,ZAJu'k/Mq-G[QRa?g4@p.C/Ii\*,gd@O`kY31r-]^h^-=KdP@a_/%hZ0:*ZRH;PkqG3BWj<X$Zf,W]r7TI6if!
%M7S;%KML]TZ[ce+R,Kf"o+c99cAFid`9(e<.3g@!%]0tqRi`[u*`5%1BV%=$)?:M2n)YuVktd-`AZBqG<C?]fk@VFt5q-.HITF,S
%N\#VhGVg>10'fd"T9>?>X$&$tCrLTWYJSt`#sp*[YO1W:$(#X]1l`SU`@/(W6jo9JQAic@eHmbif2U[]Z0XDIr)/dNqJYq?aA']\
%&;o!70'A0aS&;(qBBQL@.SnEXb)1gm9m3BM%Q,d$l)6ne+`D!J-*DkZ!QQ@A!5c2L_(Zt.C,>gA.RW_[`,CZMP-^@O.DuOM+bZE7
%3:Zog-mGWNC<D7W)C/`kldG\f)JJ%&-8/8!M+7Qh',BTaeuu^HPDVamF!-:.="C,HoA\7brP<feEfcYu`TLTfh6\t[<L3DaK>gH.
%WA`%8=R1r*M]JF^#Th1M+]@cb\SbEhOS[2F%O@J-3+HFnB4i6/cQ;q2]KRXLP;op09g^Dmn\fa*o2hh%,r-pVWJ-*_"6C;]C/'Ue
%2rW\CY6p@G`AMd+od_r!j^dbALLFJ1hFiRBE6Rj"-P<-fdepMq]qo4UP$NZWD9lk^rj%#;@8slh/6X>2Q5)`gD7+<eSEPfJUS+1'
%#n`uI`Y0+bRpq5c'mQ:)#opOWrOGO@hcM5sMe<.`OC\P_K/7c&[L$/9]nQRL0ht,DQZ_L6<$pN4\=7X']fZKhg[tDc4TZ8faAd91
%l=.m#J)3#MNdj^/j*W%]pfmESEENAr]2\kQ()<S=`]TfU;dfTnSta-MAaBTP'Ln")VphTf'YkR)gYt]9edb:FVYo)jYBo4FodN</
%,;LmnJdDSBUhY!f,!E63>;f]<$:%d*IV,kE_'6OAZ910fX?/"&P^p^I3cY9_Wt*04;;7(/a_'K^_umFbJ[m>l$,O.<Ps^=3k?9n*
%bT)sL=B:M:hsJ(o[04T\$kBHZK[8G`8%]&n]8%gmrQPJO2^'Lu#[`p7@sfu-PO[@#1>[G^PDr"2Gp/Dk5&o%?*q!a%HCd#O.8g_3
%6n?%=MI4f(50UKLVbmtSfmII/=fkkRdWB=uIu:)jJ9@)1G9nN6Np+D<<WCAHQm1o:oGq-6_D6b(R`/t^^e*\?hKcZT(<j_>[.^N0
%,#qp":<>=U$57dP]U-c`dbIc3#qV@L`4[ME@&Y\)=1NB#i2dk4QH]m10!%e(qm":C>C"e%Y?LUcFUic4k%n$1^RqHb@4B6q3)?3o
%Pf)B:oj]KHX7%8UA9a@BaHQ'MPEs`<74T1;1:!RqTY?!6jID;fB>o)'Y'l[oU2Lm[g.sA#L!p*%:,T3>.C<!W`n(Zd5Ou<9AC>%G
%Y!Js@IT>Xp\'Zh'h<e*-/VuSdY/f8o.4=e:\(.N;r?RHekKm\2Ygu/8,L>jsTUlpPKtsPmM3BCrWYc^dq;+l9[14"gZ>4faJoif[
%cuU5)[9,c;%G<YE9T!JjcL<K?`P0q:dR=oOoA$toam5[sKE/&N)clTYor^LobXa!#5@5#tT:QL>0F3\E>Wui47Y9V;MbLorC7oM(
%'=8?'L^Oso^NO7,6gN@[16\9S;5f?Z7Aj_'MITecYE>dAml$t9NQqp169K0b/\d;Ns.->tXp0G"S75@q7dVcE!ci;en\shm7+CQA
%_:OYBdctp=:\sPsX%bo2P&p-:Uhu9DN3rgBO?@Toc7JJ5/V-:gH^BgX9S"-M88.G4X<pIF<'aeVFgAZbqOmkhd8b,b<56(pYCC9"
%n-&ldW'M6K_*B:(Q"Z:J=lq$G1X`"-`_EC`6;CBH=^#BZDScqAYg3TR+Gfg#(eN"\*3%'HJC>9]-+Y=@hA-(HNo%NW]Yl:cdL*.3
%"b[GP)R3N9i^A58Htsn"#7f_H@BP<$Md%8=K$-Yd7,u627!d]lVDT'81/A+$&0,qg9dH%L+*>b(GR4g816#%],h<>XS&=+]WWdl=
%:?J2)+SqL)q,nqj:^1;Wg<CK>Ho%[i^+AagA4#:]&;L?"&SN15Ro:WA2PqT1U'tNF6!I0$eqg2U^CqmrBQP(&)0UW!ZNEs8pWY7?
%QSQ%4BoE8^TJJk$bh`t+I&RZKGpsdrV`S$)lgJ/0k"hiMY4:1/08B1gIJSkl&E&*ak["Cera9LWNTG#BZD<i/Ck;kJB[%8e_<!28
%AHo1OE)pR;*S`YY&3a3fNc=,?Q5!XQOTlI0-P5D9M5*52]seQ-:bbNK$*[Aq#E;8KWMX;>0Ld-rM^3)(hD]QD\cLIR\m<iPn?Icn
%*b_@p*73c&d"E@W<^?@7!e('n?%^u[\V86.a6HL\'iHp@94$cdKD\-\&D9P_GS0soR,PI^_6=BuEeWQmT.%QJXBRVarq3438s0>F
%]$_+19FD3S<$DrclZT0sT`&!u^DI8ag>aJpU;M]j;c[:M&O2\E`\jMb5]'2"*T?h!A+2(ehJWjb8B]dWSCl]?FR=9QU)!6=[@go:
%9CdQKF=ee-4O)!SaDDDo,L#qW._,e>#s&qs$ptd4ipgrp2E4s;V@P\%+9OFWc$Tsp/4QLN$nZ<MaVnA4>K,'RMI"O%D11lY(A^Cf
%]P+l0hDqCbnekc`\:&=KQMP9"Yg0(jVX?<6YgaPSq#n#YWl.:=(K^R@lju_k5<RI6GoVsa]WIC,Lj4]ti=6TI:`30-gEL%>mc<$P
%i[#4n&@#s<==?ctK-J<a3+_#@>o]\19WUPPJ^$@WZ^^\p>hrn]:U]\W`_@Lu4#DqmEZX>.H.@FPrl!ILbY1V+37n@CYG4<"APl<s
%/3PO5'KCebHlMCR8]"$6(@+qn$LQ@s8Ig=UAT!EW:AR`oQpS,`5coD#Q558:7M,e]PGQpOW-`5b%el?V)D)*ShYQV\QUhpDQg.D-
%%Ke"F8V`U>kZ;P[f2<*T7nF7!U&jGA0ithQ'g!>*Wk.e)lTAt$0AT@D$]3K@35"`HVCC66@q5&dqSM5KYFO$P6X;%(AP81!e7Hg"
%jm&S%Qeektn6ACKd61bF^l,KH=u=Re_^B*o@9lnWgmCZBC!]:MCM7I"G?5fV`(WHG/?>\4mh1^WEl6MkZM0P^X<a(f3g_?U"J7RR
%+<l-Tn=_ke.2#kJZNb^+BO?5V5gctjKEce\LN#,34<HHnqC+HUEB_GkYhWRCEoN":GLrL29-qS/\Y<rc]`fn,=!ap59gUVhfQ4H3
%9Q+Ee#mK(V^>LU"fsjMYa!B]GM5'hd"bm:[0sjIE2635m+u:?FHH4NR6A+al\f'>57ClM_=3k+3#;*NSL;j$2lI"oUL@D6=K:\PY
%9iDZ_@aJG!L6#ZS#JW#7&=SHhLBkRo])9qOcar=u:JAX-eM"L2C\qMT8"U;M49[&-7IG@/Br,n!/b6@P-B\C)d9;Nmh06<,+qoAc
%7Z&ge-=P,+&GA4IaA=rZ."Uu!QG=n4IOA>?0f^"\;K.Ym@a48)Y=IU6>"k#a2AbR@N::&7;V<4UC#[oOL[TgY"bYas!I0am_3\]u
%D=#.^W^Oojn'l:48QHQY.`E2U8F-4#DC6%^qOOp2^t>+Eb'i?+k'ku2T+h=@g6%p2W]8+7\<)028DliY4\gBjP1hDB98r7QQ<1u3
%>CD1.hB"<H46M!Fes"*FOdm_/D:?XDgO+e64"$RdY71QG\?M3-lF1ILPE$DN/73l;>Ob+n;6\.q:#9?68biLii*&Ru@7XZ/A^*9f
%m3&[=!+uM6G:jLmk'Q!sj&QMH`Q!_s,aMH-?Wa=R=0'_%DuICK^]I?Er76(0J<=HJkB^:P,UZ;(]<*h8Xbn#2"F5\<RL1lp0Gs"t
%hq:'.\rbq<b,l3K#!]1jVBWqFIblcMR*5::WQnF0dE^?UI@EQ%2Ba\oDG:mA&//="D^6_H:]IpLTtBW'&FB"pJ2$&%!m+\e?1lO\
%"['Z_GGBI-L4BaY;YR/d<j##F30*ErnHFE?QtO(P8iFC)gHQunr6IsijV>T-KCG.d'F5V+bssI(jrLVg!Au%1akW.%[;5->La7^%
%>bTr^K9_q/]cnO2JsT(8.s.H2:3PgoWT&sbWWM5%_<<CK%j&3iVL^=G=mp8/>FuK4N5S"r'`KS8q>@:BZqJ+e5eNjFWNN`pV8h)1
%bu'"_O57("%6)92/<Wbo;nD)PPY>Vghc5Os8rk*_:D%\<VRFKe$@/Y/W/=5T8&V!ZAHB3ZU@^HA)mc1/r"'O>3c0YHlg*0uM+gk%
%f25t)RJ(E_`um?iaeE9gqt2C)J'\P0)kKJ&Aa`J)**T7(<.14AG[#]&Ip$R-S"bYmZA5)rZ:/uY<l@t`i$4be]ZVG5(@QWm@",eL
%^7.7/GAaT5,bYqE/mlQJ]2Pg1h9U#iV5d'AWFJ>S;lQ:>].=9R_b/\0Q@\)BPh;g#&%5:]If8XuPre_mIJ*D(n.#'PEK@l5'nV6D
%Yr@osR`!GSJg=?XV*`st0dfu)1ni'Fm?fNQ]IX^%)88sj5Hstg/Lf'jf4RhbH%,M8\+tpArj.0%$L,Y!5]e@9FeZsDdhK*G$)NkG
%5U=tLb[C3okA8VSIb@,<nVlI,gecTH[+c%lBRNAoC[4,?H9c;lfVKC?cgP\`mL<r,6DKX]C!jbF8L]F_kGfb!i'IPDof%<<dJ`l$
%4k*t.f_QS3X"$MqNB/9)*>1+^_\GQA>*"\SG0'W).2QM_ra_^)Hb0cJ"i[n)ic.P`0Dk[6^M8JV0,C<T_?m7u><oEA!X+*brCW:g
%ip%<kG8KTCA=>Rm:JI>_76W_e/S`fe]dEFgjUsSc:J8pNo=g-FB(5jfh_gkmoc&=m!g90s_U=>XnO<'GlSKWY&ma/_mM9fZ`a9gb
%msT#s;E6eX+l*0Iq""#GMUmL6Ci%Qo6.t93_N)&mU=s:<aU.fIH)sg\9<C7k'b\f\J>POak'*I0rq+`2^?_D(#E3][?;WRioAD6)
%dN,-Z>g:DTBS!1(&);1!'#u[E&b*8=YP5PT4d(5*=k4l-gX@RJ!`mS=_oLX$.onra!FQ$c>M>>[1^%loDH.;t(3`8h7420-SL%!0
%]Ss..g2.[X4+Fe!We)-cjB5YZc*<)AHL=GB-BccpRl1]\Xte93't#_^>%jK;P$=qdRJ%r&n*T#K-P9c&Zk.j4XQ_W@BY*@E>2"+k
%it\P9!PL"NB^LMHGj/$f0sa)?LJ\]W.Di<Yd2-@;oNUuV12>OuYF1UaoLqk78scLo@j^%O-$qX?WR_)TL]Rc#E$68"53A\;'2l":
%3V^1XI\P]\MgA/`-Oa;>c_%+Ri&CHC<n.rA<_S6@]+_g(q^\4A;;cn=*,T!8X!oS]i=cQK86sB,NRs[d(PUbRXk&I>]>BgGPAq^d
%Zfq;I?nG[Hf[E7,9\MC4f@r=Ee.L>/32]_T57)^jXD!=Ha$2o<4hhBJIS4)fA;PEY-ulFIm%WdFVR';N_@2=FG]Z,-eVc?ain8rg
%Ss>_l7d+eiR4%jKgFAC#T/$Eqi,GK\"IT7L8&%'UY7dt*_Mn_(42Q=9R%PW/dnlGd=4J'*SYER]IIHmO=e+$6B*$7DZ"t+uH/2=7
%QCHp:Wh:$9Qm<LM(l*7&$j`n3#F,Sn\SspfP"fIF*nHGIENauV=KAfilcH7kCTJ>SqGl`K&77;5&t5>H7=9((B.T5l;-t"7hZQ9#
%oYLnGJPLF.YMg0@Pcm;4=Rd76Q.2`$:6]4,FOr-B8/IuUA::1A9N)'4YM\HBpri^"_:*W0-c]/KcqEfGokFWl(a8$D$6snZ171Hb
%2q**<Pc+j*rfjDU+=c`0D\<euL(8=+i]U<.ZsBfL-!JS?95H@i66'8U\#D'Zn8rg2M5N;h^ad?=cK6Y`-+=B^WRReCJ!hlD`X@n*
%#4"-'l8khFLBdYS2&)AWeECP%6SYgGORmKAj-%*N32HlA"T!&H%6V^%-`#T93D17##l3%lj!.IhdE%%&+E>P<?167ZY<(\1PMV:`
%"\kbGYNmp%P*Edaa2h.snKM0(g.Z3<9A:jp0mqWEl$P%WE726a'BPM+.mt^r3i[5Aa\ENH96)OOkO%M2E&ln-buE=oAid^R6ktWt
%r]7Y]_[Vij=mse!Y6AnT0'?q.V5;ZlI_^h):^&G/Vc>A<:O^hLDgtB3k<XOZeT;q4;\&#<`.krS)E#AhN3!M#K\2oapOFooEhr]G
%(MOSc/Ad%h+-h.fLYT.T-kr7m9j'tOY6U@>-qfgn+uoq(8Ph:daidchOjGE'jb)Xk<ORc^<M2UPm)g%M/!QtZ7bC%F0V,c_E,b\.
%9+u.uiid$j`?[TNQRZ%*KZj]]Lf6mX>DhajLSu#gkQ7aQEQ0pdE?&DRBc%:Fd-dEt5n8*K^[@;h;i[l0n*M%\f"uW0,"X)qa!t"b
%WK0`pVR8o.MlX9>dS45D$gV!FZiia-2$@nf!Q%i6)dXuS#aPQ*YnD$]kJS%Q\1KhF(s]1FAcSfuT]/75Tr:WO_m\8]$"WN/&fq=:
%b!<46<u09Oj_/1gR1\Bk"ed/mEe#$]"]b+q1a>.5>^`=$`dT7k'%lehBE!44:&BJp;e?#i,ft1Q+F1kjlbF&EmK.*EJ"+GW7)Z]8
%Oj^\l8j(CdY!k<2KsRgJ%b8WJib(-4Yc>h`;\l&$H07@5"^bj1;9o^>cNn3^Yt7.-kgHC5G[H'rI7]'5*d.NX@j)j@W7ZkE?5;rF
%h#k%4Eg0AL'EHjP$meoAY7HDY["_GV1SeMf'e%%0:-AKlk][Y`h!0LiS%L4GF-cR>Ihh&Y,_ur31Y*sM7D$!A-kYSn-?`E*ZpZrW
%2a4JkBR008XWr@CQ\'U_h,?"0E(^>"(<:F2pXtm-(Vp/7ApKKnAX$>;\!qL)<N!M0ii".e1.TGTW^0@s=XhZ%,;Ul$9rbeuUh)_C
%K.AGbTEgJhXGBiRe$<Gnd9a`2Z+U8"=?CCO(>E7mLC@bu^S.^2'1$_YiCJK&TekFiB\0b4Kp9okUD:Va]HdJ91.F<'3"^(X30o7Q
%ht`4.pu%.g^.!QQ3O%jb;uE@?ZB!:.2rH=ob"KL\iaKM@8\3I,rMuj@&1OW>%'DK1g]&L(noa*p%"79R9n*:)&a,GI8QJ7)lYj;G
%ZhcA&@W_Ke.KOthr:uu%"8W2RqD^k1Gh5#p%'8*]&iL)eCT5o`9N3@&`SV&ZJU'A5?A'7N30tk-c&*tbE<<ZnA>Ko'Req),dQ)6%
%X.d&W.J\K(c+t%(*[mDh.8IQB.Y0Qg[;CFs:tWnjp>!k$MTKDj1@:_gVo6`_]A2a`$]o=F?.4NdO0[_%He6*&KQC;'^3MbEMe.;%
%CtnV?8Yu#nbLZ.)L",`I=Q'ce:[GK]2u<-[q'mb5/MqJP$4#D#U-bN/'^[fqZ81P$6Y;c\!0Fl8_#Y6Rb:DEITN!"7"_qD4X(u]Z
%K"o<hnojY7.:X>7N^WB-]r%>B'I!9H?D&784U?Y7.E,j%Zo%['Csgf`=]?j!Wc:oJ1d5lJH^2B9WDHPj+c2QN_J/G)&qtH9c%U2X
%K#kt9&9'TCZ0sZCLhoYD+"7D8Y4XCr.AG#*3^M??rS@`S7:X+#PHQ_U"<\MqNaZfUJ/&9R*ucH@@/UZ`KIP(6ouZ-R@iuII/]$J-
%V2qQ3m+!?%<#@sGVL";VePF./=VM%\:5NG6er>g=cD0)ea#R94)c=XZY-A3]Z__VB1ApQd)=Mtl$0=YGhU4Q0SF/3GXsE1CNKJ0j
%hZs&O4VC?q/VtM3?:QRa$Tf:>]M4EgZ#E_uZ4#h^$&ZfFDu_RqqfSNYSQ,\46!7=F(1I=eC_W902C_GTiq+I%(G+QbYb`e#!n3GO
%?,:98UJZhBo)i'OdPog@GE4:#a)[QBWqI'qVWe,5dA\8DCEf.AK\Z/KK:Sa,\f?hN(5PE9lLcf;1<0^FFY5`\_i@N(:s%Yf_uWA;
%.foaSp`b9uh]!H3Ju'Z(]'@2f1`PgLj#h7t5M^JNrr'V2=+Bo3r_riHrq<gNs6c?u^A\#6IWZP-lG%`<&)[B\hgb6en%Sc!^]%=7
%n:tqrs7X\r^\o`]a)D!uohTN*iV27/iK(bNrO6_En;k?]T3/Vf^>Z9pl>Q]`s8?=)X8a9Z=X)J~>
%AI9_PrivateDataEnd
